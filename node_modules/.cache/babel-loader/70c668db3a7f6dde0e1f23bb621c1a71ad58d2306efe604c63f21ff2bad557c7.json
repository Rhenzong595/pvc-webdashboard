{"ast":null,"code":"import { drag } from 'd3-drag';\nimport { select, pointer } from 'd3-selection';\nimport { zoom, zoomIdentity, zoomTransform } from 'd3-zoom';\nconst errorMessages = {\n  error001: () => '[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001',\n  error002: () => \"It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.\",\n  error003: nodeType => `Node type \"${nodeType}\" not found. Using fallback type \"default\".`,\n  error004: () => 'The React Flow parent container needs a width and a height to render the graph.',\n  error005: () => 'Only child nodes can use a parent extent.',\n  error006: () => \"Can't create edge. An edge needs a source and a target.\",\n  error007: id => `The old edge with id=${id} does not exist.`,\n  error009: type => `Marker type \"${type}\" doesn't exist.`,\n  error008: (handleType, {\n    id,\n    sourceHandle,\n    targetHandle\n  }) => `Couldn't create edge for ${handleType} handle id: \"${handleType === 'source' ? sourceHandle : targetHandle}\", edge id: ${id}.`,\n  error010: () => 'Handle: No node id found. Make sure to only use a Handle inside a custom Node.',\n  error011: edgeType => `Edge type \"${edgeType}\" not found. Using fallback type \"default\".`,\n  error012: id => `Node with id \"${id}\" does not exist, it may have been removed. This can happen when a node is deleted before the \"onNodeClick\" handler is called.`,\n  error013: (lib = 'react') => `It seems that you haven't loaded the styles. Please import '@xyflow/${lib}/dist/style.css' or base.css to make sure everything is working properly.`\n};\nconst infiniteExtent = [[Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY], [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY]];\nconst elementSelectionKeys = ['Enter', ' ', 'Escape'];\nvar ConnectionMode;\n(function (ConnectionMode) {\n  ConnectionMode[\"Strict\"] = \"strict\";\n  ConnectionMode[\"Loose\"] = \"loose\";\n})(ConnectionMode || (ConnectionMode = {}));\nvar PanOnScrollMode;\n(function (PanOnScrollMode) {\n  PanOnScrollMode[\"Free\"] = \"free\";\n  PanOnScrollMode[\"Vertical\"] = \"vertical\";\n  PanOnScrollMode[\"Horizontal\"] = \"horizontal\";\n})(PanOnScrollMode || (PanOnScrollMode = {}));\nvar SelectionMode;\n(function (SelectionMode) {\n  SelectionMode[\"Partial\"] = \"partial\";\n  SelectionMode[\"Full\"] = \"full\";\n})(SelectionMode || (SelectionMode = {}));\nconst initialConnection = {\n  inProgress: false,\n  isValid: null,\n  from: null,\n  fromHandle: null,\n  fromPosition: null,\n  fromNode: null,\n  to: null,\n  toHandle: null,\n  toPosition: null,\n  toNode: null\n};\nvar ConnectionLineType;\n(function (ConnectionLineType) {\n  ConnectionLineType[\"Bezier\"] = \"default\";\n  ConnectionLineType[\"Straight\"] = \"straight\";\n  ConnectionLineType[\"Step\"] = \"step\";\n  ConnectionLineType[\"SmoothStep\"] = \"smoothstep\";\n  ConnectionLineType[\"SimpleBezier\"] = \"simplebezier\";\n})(ConnectionLineType || (ConnectionLineType = {}));\nvar MarkerType;\n(function (MarkerType) {\n  MarkerType[\"Arrow\"] = \"arrow\";\n  MarkerType[\"ArrowClosed\"] = \"arrowclosed\";\n})(MarkerType || (MarkerType = {}));\nvar Position;\n(function (Position) {\n  Position[\"Left\"] = \"left\";\n  Position[\"Top\"] = \"top\";\n  Position[\"Right\"] = \"right\";\n  Position[\"Bottom\"] = \"bottom\";\n})(Position || (Position = {}));\nconst oppositePosition = {\n  [Position.Left]: Position.Right,\n  [Position.Right]: Position.Left,\n  [Position.Top]: Position.Bottom,\n  [Position.Bottom]: Position.Top\n};\n\n/**\n * @internal\n */\nfunction areConnectionMapsEqual(a, b) {\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b || a.size !== b.size) {\n    return false;\n  }\n  if (!a.size && !b.size) {\n    return true;\n  }\n  for (const key of a.keys()) {\n    if (!b.has(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * We call the callback for all connections in a that are not in b\n *\n * @internal\n */\nfunction handleConnectionChange(a, b, cb) {\n  if (!cb) {\n    return;\n  }\n  const diff = [];\n  a.forEach((connection, key) => {\n    if (!b?.has(key)) {\n      diff.push(connection);\n    }\n  });\n  if (diff.length) {\n    cb(diff);\n  }\n}\nfunction getConnectionStatus(isValid) {\n  return isValid === null ? null : isValid ? 'valid' : 'invalid';\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Test whether an object is useable as an Edge\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Edge if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Edge\n */\nconst isEdgeBase = element => 'id' in element && 'source' in element && 'target' in element;\n/**\n * Test whether an object is useable as a Node\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Node if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Node\n */\nconst isNodeBase = element => 'id' in element && 'position' in element && !('source' in element) && !('target' in element);\nconst isInternalNodeBase = element => 'id' in element && 'internals' in element && !('source' in element) && !('target' in element);\n/**\n * Pass in a node, and get connected nodes where edge.source === node.id\n * @public\n * @param node - The node to get the connected nodes from\n * @param nodes - The array of all nodes\n * @param edges - The array of all edges\n * @returns An array of nodes that are connected over eges where the source is the given node\n */\nconst getOutgoers = (node, nodes, edges) => {\n  if (!node.id) {\n    return [];\n  }\n  const outgoerIds = new Set();\n  edges.forEach(edge => {\n    if (edge.source === node.id) {\n      outgoerIds.add(edge.target);\n    }\n  });\n  return nodes.filter(n => outgoerIds.has(n.id));\n};\n/**\n * Pass in a node, and get connected nodes where edge.target === node.id\n * @public\n * @param node - The node to get the connected nodes from\n * @param nodes - The array of all nodes\n * @param edges - The array of all edges\n * @returns An array of nodes that are connected over eges where the target is the given node\n */\nconst getIncomers = (node, nodes, edges) => {\n  if (!node.id) {\n    return [];\n  }\n  const incomersIds = new Set();\n  edges.forEach(edge => {\n    if (edge.target === node.id) {\n      incomersIds.add(edge.source);\n    }\n  });\n  return nodes.filter(n => incomersIds.has(n.id));\n};\nconst getNodePositionWithOrigin = (node, nodeOrigin = [0, 0]) => {\n  const {\n    width,\n    height\n  } = getNodeDimensions(node);\n  const origin = node.origin ?? nodeOrigin;\n  const offsetX = width * origin[0];\n  const offsetY = height * origin[1];\n  return {\n    x: node.position.x - offsetX,\n    y: node.position.y - offsetY\n  };\n};\n/**\n * Internal function for determining a bounding box that contains all given nodes in an array.\n * @public\n * @remarks Useful when combined with {@link getViewportForBounds} to calculate the correct transform to fit the given nodes in a viewport.\n * @param nodes - Nodes to calculate the bounds for\n * @param params.nodeOrigin - Origin of the nodes: [0, 0] - top left, [0.5, 0.5] - center\n * @returns Bounding box enclosing all nodes\n */\nconst getNodesBounds = (nodes, params = {\n  nodeOrigin: [0, 0],\n  nodeLookup: undefined\n}) => {\n  if (process.env.NODE_ENV === 'development' && !params.nodeLookup) {\n    console.warn('Please use `getNodesBounds` from `useReactFlow`/`useSvelteFlow` hook to ensure correct values for sub flows. If not possible, you have to provide a nodeLookup to support sub flows.');\n  }\n  if (nodes.length === 0) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  const box = nodes.reduce((currBox, nodeOrId) => {\n    const isId = typeof nodeOrId === 'string';\n    let currentNode = !params.nodeLookup && !isId ? nodeOrId : undefined;\n    if (params.nodeLookup) {\n      currentNode = isId ? params.nodeLookup.get(nodeOrId) : !isInternalNodeBase(nodeOrId) ? params.nodeLookup.get(nodeOrId.id) : nodeOrId;\n    }\n    const nodeBox = currentNode ? nodeToBox(currentNode, params.nodeOrigin) : {\n      x: 0,\n      y: 0,\n      x2: 0,\n      y2: 0\n    };\n    return getBoundsOfBoxes(currBox, nodeBox);\n  }, {\n    x: Infinity,\n    y: Infinity,\n    x2: -Infinity,\n    y2: -Infinity\n  });\n  return boxToRect(box);\n};\n/**\n * Determines a bounding box that contains all given nodes in an array\n * @internal\n */\nconst getInternalNodesBounds = (nodeLookup, params = {}) => {\n  if (nodeLookup.size === 0) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  let box = {\n    x: Infinity,\n    y: Infinity,\n    x2: -Infinity,\n    y2: -Infinity\n  };\n  nodeLookup.forEach(node => {\n    if (params.filter === undefined || params.filter(node)) {\n      const nodeBox = nodeToBox(node);\n      box = getBoundsOfBoxes(box, nodeBox);\n    }\n  });\n  return boxToRect(box);\n};\nconst getNodesInside = (nodes, rect, [tx, ty, tScale] = [0, 0, 1], partially = false,\n// set excludeNonSelectableNodes if you want to pay attention to the nodes \"selectable\" attribute\nexcludeNonSelectableNodes = false) => {\n  const paneRect = {\n    ...pointToRendererPoint(rect, [tx, ty, tScale]),\n    width: rect.width / tScale,\n    height: rect.height / tScale\n  };\n  const visibleNodes = [];\n  for (const node of nodes.values()) {\n    const {\n      measured,\n      selectable = true,\n      hidden = false\n    } = node;\n    if (excludeNonSelectableNodes && !selectable || hidden) {\n      continue;\n    }\n    const width = measured.width ?? node.width ?? node.initialWidth ?? null;\n    const height = measured.height ?? node.height ?? node.initialHeight ?? null;\n    const overlappingArea = getOverlappingArea(paneRect, nodeToRect(node));\n    const area = (width ?? 0) * (height ?? 0);\n    const partiallyVisible = partially && overlappingArea > 0;\n    const forceInitialRender = !node.internals.handleBounds;\n    const isVisible = forceInitialRender || partiallyVisible || overlappingArea >= area;\n    if (isVisible || node.dragging) {\n      visibleNodes.push(node);\n    }\n  }\n  return visibleNodes;\n};\n/**\n * Get all connecting edges for a given set of nodes\n * @param nodes - Nodes you want to get the connected edges for\n * @param edges - All edges\n * @returns Array of edges that connect any of the given nodes with each other\n */\nconst getConnectedEdges = (nodes, edges) => {\n  const nodeIds = new Set();\n  nodes.forEach(node => {\n    nodeIds.add(node.id);\n  });\n  return edges.filter(edge => nodeIds.has(edge.source) || nodeIds.has(edge.target));\n};\nfunction getFitViewNodes(nodeLookup, options) {\n  const fitViewNodes = new Map();\n  const optionNodeIds = options?.nodes ? new Set(options.nodes.map(node => node.id)) : null;\n  nodeLookup.forEach(n => {\n    const isVisible = n.measured.width && n.measured.height && (options?.includeHiddenNodes || !n.hidden);\n    if (isVisible && (!optionNodeIds || optionNodeIds.has(n.id))) {\n      fitViewNodes.set(n.id, n);\n    }\n  });\n  return fitViewNodes;\n}\nasync function fitView({\n  nodes,\n  width,\n  height,\n  panZoom,\n  minZoom,\n  maxZoom\n}, options) {\n  if (nodes.size === 0) {\n    return Promise.resolve(false);\n  }\n  const bounds = getInternalNodesBounds(nodes);\n  const viewport = getViewportForBounds(bounds, width, height, options?.minZoom ?? minZoom, options?.maxZoom ?? maxZoom, options?.padding ?? 0.1);\n  await panZoom.setViewport(viewport, {\n    duration: options?.duration\n  });\n  return Promise.resolve(true);\n}\n/**\n * This function calculates the next position of a node, taking into account the node's extent, parent node, and origin.\n *\n * @internal\n * @returns position, positionAbsolute\n */\nfunction calculateNodePosition({\n  nodeId,\n  nextPosition,\n  nodeLookup,\n  nodeOrigin = [0, 0],\n  nodeExtent,\n  onError\n}) {\n  const node = nodeLookup.get(nodeId);\n  const parentNode = node.parentId ? nodeLookup.get(node.parentId) : undefined;\n  const {\n    x: parentX,\n    y: parentY\n  } = parentNode ? parentNode.internals.positionAbsolute : {\n    x: 0,\n    y: 0\n  };\n  const origin = node.origin ?? nodeOrigin;\n  let extent = nodeExtent;\n  if (node.extent === 'parent' && !node.expandParent) {\n    if (!parentNode) {\n      onError?.('005', errorMessages['error005']());\n    } else {\n      const parentWidth = parentNode.measured.width;\n      const parentHeight = parentNode.measured.height;\n      if (parentWidth && parentHeight) {\n        extent = [[parentX, parentY], [parentX + parentWidth, parentY + parentHeight]];\n      }\n    }\n  } else if (parentNode && isCoordinateExtent(node.extent)) {\n    extent = [[node.extent[0][0] + parentX, node.extent[0][1] + parentY], [node.extent[1][0] + parentX, node.extent[1][1] + parentY]];\n  }\n  const positionAbsolute = isCoordinateExtent(extent) ? clampPosition(nextPosition, extent, node.measured) : nextPosition;\n  return {\n    position: {\n      x: positionAbsolute.x - parentX + node.measured.width * origin[0],\n      y: positionAbsolute.y - parentY + node.measured.height * origin[1]\n    },\n    positionAbsolute\n  };\n}\n/**\n * Pass in nodes & edges to delete, get arrays of nodes and edges that actually can be deleted\n * @internal\n * @param param.nodesToRemove - The nodes to remove\n * @param param.edgesToRemove - The edges to remove\n * @param param.nodes - All nodes\n * @param param.edges - All edges\n * @param param.onBeforeDelete - Callback to check which nodes and edges can be deleted\n * @returns nodes: nodes that can be deleted, edges: edges that can be deleted\n */\nasync function getElementsToRemove({\n  nodesToRemove = [],\n  edgesToRemove = [],\n  nodes,\n  edges,\n  onBeforeDelete\n}) {\n  const nodeIds = new Set(nodesToRemove.map(node => node.id));\n  const matchingNodes = [];\n  for (const node of nodes) {\n    if (node.deletable === false) {\n      continue;\n    }\n    const isIncluded = nodeIds.has(node.id);\n    const parentHit = !isIncluded && node.parentId && matchingNodes.find(n => n.id === node.parentId);\n    if (isIncluded || parentHit) {\n      matchingNodes.push(node);\n    }\n  }\n  const edgeIds = new Set(edgesToRemove.map(edge => edge.id));\n  const deletableEdges = edges.filter(edge => edge.deletable !== false);\n  const connectedEdges = getConnectedEdges(matchingNodes, deletableEdges);\n  const matchingEdges = connectedEdges;\n  for (const edge of deletableEdges) {\n    const isIncluded = edgeIds.has(edge.id);\n    if (isIncluded && !matchingEdges.find(e => e.id === edge.id)) {\n      matchingEdges.push(edge);\n    }\n  }\n  if (!onBeforeDelete) {\n    return {\n      edges: matchingEdges,\n      nodes: matchingNodes\n    };\n  }\n  const onBeforeDeleteResult = await onBeforeDelete({\n    nodes: matchingNodes,\n    edges: matchingEdges\n  });\n  if (typeof onBeforeDeleteResult === 'boolean') {\n    return onBeforeDeleteResult ? {\n      edges: matchingEdges,\n      nodes: matchingNodes\n    } : {\n      edges: [],\n      nodes: []\n    };\n  }\n  return onBeforeDeleteResult;\n}\nconst clamp = (val, min = 0, max = 1) => Math.min(Math.max(val, min), max);\nconst clampPosition = (position = {\n  x: 0,\n  y: 0\n}, extent, dimensions) => ({\n  x: clamp(position.x, extent[0][0], extent[1][0] - (dimensions?.width ?? 0)),\n  y: clamp(position.y, extent[0][1], extent[1][1] - (dimensions?.height ?? 0))\n});\nfunction clampPositionToParent(childPosition, childDimensions, parent) {\n  const {\n    width: parentWidth,\n    height: parentHeight\n  } = getNodeDimensions(parent);\n  const {\n    x: parentX,\n    y: parentY\n  } = parent.internals.positionAbsolute;\n  return clampPosition(childPosition, [[parentX, parentY], [parentX + parentWidth, parentY + parentHeight]], childDimensions);\n}\n/**\n * Calculates the velocity of panning when the mouse is close to the edge of the canvas\n * @internal\n * @param value - One dimensional poition of the mouse (x or y)\n * @param min - Minimal position on canvas before panning starts\n * @param max - Maximal position on canvas before panning starts\n * @returns - A number between 0 and 1 that represents the velocity of panning\n */\nconst calcAutoPanVelocity = (value, min, max) => {\n  if (value < min) {\n    return clamp(Math.abs(value - min), 1, min) / min;\n  } else if (value > max) {\n    return -clamp(Math.abs(value - max), 1, min) / min;\n  }\n  return 0;\n};\nconst calcAutoPan = (pos, bounds, speed = 15, distance = 40) => {\n  const xMovement = calcAutoPanVelocity(pos.x, distance, bounds.width - distance) * speed;\n  const yMovement = calcAutoPanVelocity(pos.y, distance, bounds.height - distance) * speed;\n  return [xMovement, yMovement];\n};\nconst getBoundsOfBoxes = (box1, box2) => ({\n  x: Math.min(box1.x, box2.x),\n  y: Math.min(box1.y, box2.y),\n  x2: Math.max(box1.x2, box2.x2),\n  y2: Math.max(box1.y2, box2.y2)\n});\nconst rectToBox = ({\n  x,\n  y,\n  width,\n  height\n}) => ({\n  x,\n  y,\n  x2: x + width,\n  y2: y + height\n});\nconst boxToRect = ({\n  x,\n  y,\n  x2,\n  y2\n}) => ({\n  x,\n  y,\n  width: x2 - x,\n  height: y2 - y\n});\nconst nodeToRect = (node, nodeOrigin = [0, 0]) => {\n  const {\n    x,\n    y\n  } = isInternalNodeBase(node) ? node.internals.positionAbsolute : getNodePositionWithOrigin(node, nodeOrigin);\n  return {\n    x,\n    y,\n    width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n    height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0\n  };\n};\nconst nodeToBox = (node, nodeOrigin = [0, 0]) => {\n  const {\n    x,\n    y\n  } = isInternalNodeBase(node) ? node.internals.positionAbsolute : getNodePositionWithOrigin(node, nodeOrigin);\n  return {\n    x,\n    y,\n    x2: x + (node.measured?.width ?? node.width ?? node.initialWidth ?? 0),\n    y2: y + (node.measured?.height ?? node.height ?? node.initialHeight ?? 0)\n  };\n};\nconst getBoundsOfRects = (rect1, rect2) => boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\nconst getOverlappingArea = (rectA, rectB) => {\n  const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));\n  const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));\n  return Math.ceil(xOverlap * yOverlap);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isRectObject = obj => isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nconst isNumeric = n => !isNaN(n) && isFinite(n);\n// used for a11y key board controls for nodes and edges\nconst devWarn = (id, message) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.warn(`[React Flow]: ${message} Help: https://reactflow.dev/error#${id}`);\n  }\n};\nconst snapPosition = (position, snapGrid = [1, 1]) => {\n  return {\n    x: snapGrid[0] * Math.round(position.x / snapGrid[0]),\n    y: snapGrid[1] * Math.round(position.y / snapGrid[1])\n  };\n};\nconst pointToRendererPoint = ({\n  x,\n  y\n}, [tx, ty, tScale], snapToGrid = false, snapGrid = [1, 1]) => {\n  const position = {\n    x: (x - tx) / tScale,\n    y: (y - ty) / tScale\n  };\n  return snapToGrid ? snapPosition(position, snapGrid) : position;\n};\nconst rendererPointToPoint = ({\n  x,\n  y\n}, [tx, ty, tScale]) => {\n  return {\n    x: x * tScale + tx,\n    y: y * tScale + ty\n  };\n};\n/**\n * Returns a viewport that encloses the given bounds with optional padding.\n * @public\n * @remarks You can determine bounds of nodes with {@link getNodesBounds} and {@link getBoundsOfRects}\n * @param bounds - Bounds to fit inside viewport\n * @param width - Width of the viewport\n * @param height  - Height of the viewport\n * @param minZoom - Minimum zoom level of the resulting viewport\n * @param maxZoom - Maximum zoom level of the resulting viewport\n * @param padding - Optional padding around the bounds\n * @returns A transforned {@link Viewport} that encloses the given bounds which you can pass to e.g. {@link setViewport}\n * @example\n * const { x, y, zoom } = getViewportForBounds(\n  { x: 0, y: 0, width: 100, height: 100},\n  1200, 800, 0.5, 2);\n */\nconst getViewportForBounds = (bounds, width, height, minZoom, maxZoom, padding) => {\n  const xZoom = width / (bounds.width * (1 + padding));\n  const yZoom = height / (bounds.height * (1 + padding));\n  const zoom = Math.min(xZoom, yZoom);\n  const clampedZoom = clamp(zoom, minZoom, maxZoom);\n  const boundsCenterX = bounds.x + bounds.width / 2;\n  const boundsCenterY = bounds.y + bounds.height / 2;\n  const x = width / 2 - boundsCenterX * clampedZoom;\n  const y = height / 2 - boundsCenterY * clampedZoom;\n  return {\n    x,\n    y,\n    zoom: clampedZoom\n  };\n};\nconst isMacOs = () => typeof navigator !== 'undefined' && navigator?.userAgent?.indexOf('Mac') >= 0;\nfunction isCoordinateExtent(extent) {\n  return extent !== undefined && extent !== 'parent';\n}\nfunction getNodeDimensions(node) {\n  return {\n    width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n    height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0\n  };\n}\nfunction nodeHasDimensions(node) {\n  return (node.measured?.width ?? node.width ?? node.initialWidth) !== undefined && (node.measured?.height ?? node.height ?? node.initialHeight) !== undefined;\n}\n/**\n * Convert child position to aboslute position\n *\n * @internal\n * @param position\n * @param parentId\n * @param nodeLookup\n * @param nodeOrigin\n * @returns an internal node with an absolute position\n */\nfunction evaluateAbsolutePosition(position, dimensions = {\n  width: 0,\n  height: 0\n}, parentId, nodeLookup, nodeOrigin) {\n  let nextParentId = parentId;\n  const positionAbsolute = {\n    ...position\n  };\n  while (nextParentId) {\n    const parent = nodeLookup.get(nextParentId);\n    nextParentId = parent?.parentId;\n    if (parent) {\n      const origin = parent.origin || nodeOrigin;\n      positionAbsolute.x += parent.internals.positionAbsolute.x - (dimensions.width ?? 0) * origin[0];\n      positionAbsolute.y += parent.internals.positionAbsolute.y - (dimensions.height ?? 0) * origin[1];\n    }\n  }\n  return positionAbsolute;\n}\nfunction getPointerPosition(event, {\n  snapGrid = [0, 0],\n  snapToGrid = false,\n  transform\n}) {\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const pointerPos = pointToRendererPoint({\n    x,\n    y\n  }, transform);\n  const {\n    x: xSnapped,\n    y: ySnapped\n  } = snapToGrid ? snapPosition(pointerPos, snapGrid) : pointerPos;\n  // we need the snapped position in order to be able to skip unnecessary drag events\n  return {\n    xSnapped,\n    ySnapped,\n    ...pointerPos\n  };\n}\nconst getDimensions = node => ({\n  width: node.offsetWidth,\n  height: node.offsetHeight\n});\nconst getHostForElement = element => element.getRootNode?.() || window?.document;\nconst inputTags = ['INPUT', 'SELECT', 'TEXTAREA'];\nfunction isInputDOMNode(event) {\n  // using composed path for handling shadow dom\n  const target = event.composedPath?.()?.[0] || event.target;\n  const isInput = inputTags.includes(target?.nodeName) || target?.hasAttribute('contenteditable');\n  // when an input field is focused we don't want to trigger deletion or movement of nodes\n  return isInput || !!target?.closest('.nokey');\n}\nconst isMouseEvent = event => 'clientX' in event;\nconst getEventPosition = (event, bounds) => {\n  const isMouse = isMouseEvent(event);\n  const evtX = isMouse ? event.clientX : event.touches?.[0].clientX;\n  const evtY = isMouse ? event.clientY : event.touches?.[0].clientY;\n  return {\n    x: evtX - (bounds?.left ?? 0),\n    y: evtY - (bounds?.top ?? 0)\n  };\n};\n// The handle bounds are calculated relative to the node element.\n// We store them in the internals object of the node in order to avoid\n// unnecessary recalculations.\nconst getHandleBounds = (type, nodeElement, nodeBounds, zoom, nodeId) => {\n  const handles = nodeElement.querySelectorAll(`.${type}`);\n  if (!handles || !handles.length) {\n    return null;\n  }\n  return Array.from(handles).map(handle => {\n    const handleBounds = handle.getBoundingClientRect();\n    return {\n      id: handle.getAttribute('data-handleid'),\n      type,\n      nodeId,\n      position: handle.getAttribute('data-handlepos'),\n      x: (handleBounds.left - nodeBounds.left) / zoom,\n      y: (handleBounds.top - nodeBounds.top) / zoom,\n      ...getDimensions(handle)\n    };\n  });\n};\nfunction getBezierEdgeCenter({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourceControlX,\n  sourceControlY,\n  targetControlX,\n  targetControlY\n}) {\n  // cubic bezier t=0.5 mid point, not the actual mid point, but easy to calculate\n  // https://stackoverflow.com/questions/67516101/how-to-find-distance-mid-point-of-bezier-curve\n  const centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;\n  const centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;\n  const offsetX = Math.abs(centerX - sourceX);\n  const offsetY = Math.abs(centerY - sourceY);\n  return [centerX, centerY, offsetX, offsetY];\n}\nfunction calculateControlOffset(distance, curvature) {\n  if (distance >= 0) {\n    return 0.5 * distance;\n  }\n  return curvature * 25 * Math.sqrt(-distance);\n}\nfunction getControlWithCurvature({\n  pos,\n  x1,\n  y1,\n  x2,\n  y2,\n  c\n}) {\n  switch (pos) {\n    case Position.Left:\n      return [x1 - calculateControlOffset(x1 - x2, c), y1];\n    case Position.Right:\n      return [x1 + calculateControlOffset(x2 - x1, c), y1];\n    case Position.Top:\n      return [x1, y1 - calculateControlOffset(y1 - y2, c)];\n    case Position.Bottom:\n      return [x1, y1 + calculateControlOffset(y2 - y1, c)];\n  }\n}\n/**\n * Get a bezier path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\n * @param params.curvature - The curvature of the bezier edge\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getBezierPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n});\n */\nfunction getBezierPath({\n  sourceX,\n  sourceY,\n  sourcePosition = Position.Bottom,\n  targetX,\n  targetY,\n  targetPosition = Position.Top,\n  curvature = 0.25\n}) {\n  const [sourceControlX, sourceControlY] = getControlWithCurvature({\n    pos: sourcePosition,\n    x1: sourceX,\n    y1: sourceY,\n    x2: targetX,\n    y2: targetY,\n    c: curvature\n  });\n  const [targetControlX, targetControlY] = getControlWithCurvature({\n    pos: targetPosition,\n    x1: targetX,\n    y1: targetY,\n    x2: sourceX,\n    y2: sourceY,\n    c: curvature\n  });\n  const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourceControlX,\n    sourceControlY,\n    targetControlX,\n    targetControlY\n  });\n  return [`M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\n\n// this is used for straight edges and simple smoothstep edges (LTR, RTL, BTT, TTB)\nfunction getEdgeCenter({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY\n}) {\n  const xOffset = Math.abs(targetX - sourceX) / 2;\n  const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\n  const yOffset = Math.abs(targetY - sourceY) / 2;\n  const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\n  return [centerX, centerY, xOffset, yOffset];\n}\nfunction getElevatedEdgeZIndex({\n  sourceNode,\n  targetNode,\n  selected = false,\n  zIndex = 0,\n  elevateOnSelect = false\n}) {\n  if (!elevateOnSelect) {\n    return zIndex;\n  }\n  const edgeOrConnectedNodeSelected = selected || targetNode.selected || sourceNode.selected;\n  const selectedZIndex = Math.max(sourceNode.internals.z || 0, targetNode.internals.z || 0, 1000);\n  return zIndex + (edgeOrConnectedNodeSelected ? selectedZIndex : 0);\n}\nfunction isEdgeVisible({\n  sourceNode,\n  targetNode,\n  width,\n  height,\n  transform\n}) {\n  const edgeBox = getBoundsOfBoxes(nodeToBox(sourceNode), nodeToBox(targetNode));\n  if (edgeBox.x === edgeBox.x2) {\n    edgeBox.x2 += 1;\n  }\n  if (edgeBox.y === edgeBox.y2) {\n    edgeBox.y2 += 1;\n  }\n  const viewRect = {\n    x: -transform[0] / transform[2],\n    y: -transform[1] / transform[2],\n    width: width / transform[2],\n    height: height / transform[2]\n  };\n  return getOverlappingArea(viewRect, boxToRect(edgeBox)) > 0;\n}\nconst getEdgeId = ({\n  source,\n  sourceHandle,\n  target,\n  targetHandle\n}) => `xy-edge__${source}${sourceHandle || ''}-${target}${targetHandle || ''}`;\nconst connectionExists = (edge, edges) => {\n  return edges.some(el => el.source === edge.source && el.target === edge.target && (el.sourceHandle === edge.sourceHandle || !el.sourceHandle && !edge.sourceHandle) && (el.targetHandle === edge.targetHandle || !el.targetHandle && !edge.targetHandle));\n};\n/**\n * This util is a convenience function to add a new Edge to an array of edges\n * @remarks It also performs some validation to make sure you don't add an invalid edge or duplicate an existing one.\n * @public\n * @param edgeParams - Either an Edge or a Connection you want to add\n * @param edges -  The array of all current edges\n * @returns A new array of edges with the new edge added\n */\nconst addEdge = (edgeParams, edges) => {\n  if (!edgeParams.source || !edgeParams.target) {\n    devWarn('006', errorMessages['error006']());\n    return edges;\n  }\n  let edge;\n  if (isEdgeBase(edgeParams)) {\n    edge = {\n      ...edgeParams\n    };\n  } else {\n    edge = {\n      ...edgeParams,\n      id: getEdgeId(edgeParams)\n    };\n  }\n  if (connectionExists(edge, edges)) {\n    return edges;\n  }\n  if (edge.sourceHandle === null) {\n    delete edge.sourceHandle;\n  }\n  if (edge.targetHandle === null) {\n    delete edge.targetHandle;\n  }\n  return edges.concat(edge);\n};\n/**\n * A handy utility to reconnect an existing edge with new properties\n * @param oldEdge - The edge you want to update\n * @param newConnection - The new connection you want to update the edge with\n * @param edges - The array of all current edges\n * @param options.shouldReplaceId - should the id of the old edge be replaced with the new connection id\n * @returns the updated edges array\n */\nconst reconnectEdge = (oldEdge, newConnection, edges, options = {\n  shouldReplaceId: true\n}) => {\n  const {\n    id: oldEdgeId,\n    ...rest\n  } = oldEdge;\n  if (!newConnection.source || !newConnection.target) {\n    devWarn('006', errorMessages['error006']());\n    return edges;\n  }\n  const foundEdge = edges.find(e => e.id === oldEdge.id);\n  if (!foundEdge) {\n    devWarn('007', errorMessages['error007'](oldEdgeId));\n    return edges;\n  }\n  // Remove old edge and create the new edge with parameters of old edge.\n  const edge = {\n    ...rest,\n    id: options.shouldReplaceId ? getEdgeId(newConnection) : oldEdgeId,\n    source: newConnection.source,\n    target: newConnection.target,\n    sourceHandle: newConnection.sourceHandle,\n    targetHandle: newConnection.targetHandle\n  };\n  return edges.filter(e => e.id !== oldEdgeId).concat(edge);\n};\n\n/**\n * Get a straight path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getStraightPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n    });\n */\nfunction getStraightPath({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY\n}) {\n  const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY\n  });\n  return [`M ${sourceX},${sourceY}L ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\nconst handleDirections = {\n  [Position.Left]: {\n    x: -1,\n    y: 0\n  },\n  [Position.Right]: {\n    x: 1,\n    y: 0\n  },\n  [Position.Top]: {\n    x: 0,\n    y: -1\n  },\n  [Position.Bottom]: {\n    x: 0,\n    y: 1\n  }\n};\nconst getDirection = ({\n  source,\n  sourcePosition = Position.Bottom,\n  target\n}) => {\n  if (sourcePosition === Position.Left || sourcePosition === Position.Right) {\n    return source.x < target.x ? {\n      x: 1,\n      y: 0\n    } : {\n      x: -1,\n      y: 0\n    };\n  }\n  return source.y < target.y ? {\n    x: 0,\n    y: 1\n  } : {\n    x: 0,\n    y: -1\n  };\n};\nconst distance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n// ith this function we try to mimic a orthogonal edge routing behaviour\n// It's not as good as a real orthogonal edge routing but it's faster and good enough as a default for step and smooth step edges\nfunction getPoints({\n  source,\n  sourcePosition = Position.Bottom,\n  target,\n  targetPosition = Position.Top,\n  center,\n  offset\n}) {\n  const sourceDir = handleDirections[sourcePosition];\n  const targetDir = handleDirections[targetPosition];\n  const sourceGapped = {\n    x: source.x + sourceDir.x * offset,\n    y: source.y + sourceDir.y * offset\n  };\n  const targetGapped = {\n    x: target.x + targetDir.x * offset,\n    y: target.y + targetDir.y * offset\n  };\n  const dir = getDirection({\n    source: sourceGapped,\n    sourcePosition,\n    target: targetGapped\n  });\n  const dirAccessor = dir.x !== 0 ? 'x' : 'y';\n  const currDir = dir[dirAccessor];\n  let points = [];\n  let centerX, centerY;\n  const sourceGapOffset = {\n    x: 0,\n    y: 0\n  };\n  const targetGapOffset = {\n    x: 0,\n    y: 0\n  };\n  const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({\n    sourceX: source.x,\n    sourceY: source.y,\n    targetX: target.x,\n    targetY: target.y\n  });\n  // opposite handle positions, default case\n  if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {\n    centerX = center.x ?? defaultCenterX;\n    centerY = center.y ?? defaultCenterY;\n    //    --->\n    //    |\n    // >---\n    const verticalSplit = [{\n      x: centerX,\n      y: sourceGapped.y\n    }, {\n      x: centerX,\n      y: targetGapped.y\n    }];\n    //    |\n    //  ---\n    //  |\n    const horizontalSplit = [{\n      x: sourceGapped.x,\n      y: centerY\n    }, {\n      x: targetGapped.x,\n      y: centerY\n    }];\n    if (sourceDir[dirAccessor] === currDir) {\n      points = dirAccessor === 'x' ? verticalSplit : horizontalSplit;\n    } else {\n      points = dirAccessor === 'x' ? horizontalSplit : verticalSplit;\n    }\n  } else {\n    // sourceTarget means we take x from source and y from target, targetSource is the opposite\n    const sourceTarget = [{\n      x: sourceGapped.x,\n      y: targetGapped.y\n    }];\n    const targetSource = [{\n      x: targetGapped.x,\n      y: sourceGapped.y\n    }];\n    // this handles edges with same handle positions\n    if (dirAccessor === 'x') {\n      points = sourceDir.x === currDir ? targetSource : sourceTarget;\n    } else {\n      points = sourceDir.y === currDir ? sourceTarget : targetSource;\n    }\n    if (sourcePosition === targetPosition) {\n      const diff = Math.abs(source[dirAccessor] - target[dirAccessor]);\n      // if an edge goes from right to right for example (sourcePosition === targetPosition) and the distance between source.x and target.x is less than the offset, the added point and the gapped source/target will overlap. This leads to a weird edge path. To avoid this we add a gapOffset to the source/target\n      if (diff <= offset) {\n        const gapOffset = Math.min(offset - 1, offset - diff);\n        if (sourceDir[dirAccessor] === currDir) {\n          sourceGapOffset[dirAccessor] = (sourceGapped[dirAccessor] > source[dirAccessor] ? -1 : 1) * gapOffset;\n        } else {\n          targetGapOffset[dirAccessor] = (targetGapped[dirAccessor] > target[dirAccessor] ? -1 : 1) * gapOffset;\n        }\n      }\n    }\n    // these are conditions for handling mixed handle positions like Right -> Bottom for example\n    if (sourcePosition !== targetPosition) {\n      const dirAccessorOpposite = dirAccessor === 'x' ? 'y' : 'x';\n      const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];\n      const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];\n      const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];\n      const flipSourceTarget = sourceDir[dirAccessor] === 1 && (!isSameDir && sourceGtTargetOppo || isSameDir && sourceLtTargetOppo) || sourceDir[dirAccessor] !== 1 && (!isSameDir && sourceLtTargetOppo || isSameDir && sourceGtTargetOppo);\n      if (flipSourceTarget) {\n        points = dirAccessor === 'x' ? sourceTarget : targetSource;\n      }\n    }\n    const sourceGapPoint = {\n      x: sourceGapped.x + sourceGapOffset.x,\n      y: sourceGapped.y + sourceGapOffset.y\n    };\n    const targetGapPoint = {\n      x: targetGapped.x + targetGapOffset.x,\n      y: targetGapped.y + targetGapOffset.y\n    };\n    const maxXDistance = Math.max(Math.abs(sourceGapPoint.x - points[0].x), Math.abs(targetGapPoint.x - points[0].x));\n    const maxYDistance = Math.max(Math.abs(sourceGapPoint.y - points[0].y), Math.abs(targetGapPoint.y - points[0].y));\n    // we want to place the label on the longest segment of the edge\n    if (maxXDistance >= maxYDistance) {\n      centerX = (sourceGapPoint.x + targetGapPoint.x) / 2;\n      centerY = points[0].y;\n    } else {\n      centerX = points[0].x;\n      centerY = (sourceGapPoint.y + targetGapPoint.y) / 2;\n    }\n  }\n  const pathPoints = [source, {\n    x: sourceGapped.x + sourceGapOffset.x,\n    y: sourceGapped.y + sourceGapOffset.y\n  }, ...points, {\n    x: targetGapped.x + targetGapOffset.x,\n    y: targetGapped.y + targetGapOffset.y\n  }, target];\n  return [pathPoints, centerX, centerY, defaultOffsetX, defaultOffsetY];\n}\nfunction getBend(a, b, c, size) {\n  const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);\n  const {\n    x,\n    y\n  } = b;\n  // no bend\n  if (a.x === x && x === c.x || a.y === y && y === c.y) {\n    return `L${x} ${y}`;\n  }\n  // first segment is horizontal\n  if (a.y === y) {\n    const xDir = a.x < c.x ? -1 : 1;\n    const yDir = a.y < c.y ? 1 : -1;\n    return `L ${x + bendSize * xDir},${y}Q ${x},${y} ${x},${y + bendSize * yDir}`;\n  }\n  const xDir = a.x < c.x ? 1 : -1;\n  const yDir = a.y < c.y ? -1 : 1;\n  return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;\n}\n/**\n * Get a smooth step path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getSmoothStepPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n    });\n */\nfunction getSmoothStepPath({\n  sourceX,\n  sourceY,\n  sourcePosition = Position.Bottom,\n  targetX,\n  targetY,\n  targetPosition = Position.Top,\n  borderRadius = 5,\n  centerX,\n  centerY,\n  offset = 20\n}) {\n  const [points, labelX, labelY, offsetX, offsetY] = getPoints({\n    source: {\n      x: sourceX,\n      y: sourceY\n    },\n    sourcePosition,\n    target: {\n      x: targetX,\n      y: targetY\n    },\n    targetPosition,\n    center: {\n      x: centerX,\n      y: centerY\n    },\n    offset\n  });\n  const path = points.reduce((res, p, i) => {\n    let segment = '';\n    if (i > 0 && i < points.length - 1) {\n      segment = getBend(points[i - 1], p, points[i + 1], borderRadius);\n    } else {\n      segment = `${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`;\n    }\n    res += segment;\n    return res;\n  }, '');\n  return [path, labelX, labelY, offsetX, offsetY];\n}\nfunction isNodeInitialized(node) {\n  return node && !!(node.internals.handleBounds || node.handles?.length) && !!(node.measured.width || node.width || node.initialWidth);\n}\nfunction getEdgePosition(params) {\n  const {\n    sourceNode,\n    targetNode\n  } = params;\n  if (!isNodeInitialized(sourceNode) || !isNodeInitialized(targetNode)) {\n    return null;\n  }\n  const sourceHandleBounds = sourceNode.internals.handleBounds || toHandleBounds(sourceNode.handles);\n  const targetHandleBounds = targetNode.internals.handleBounds || toHandleBounds(targetNode.handles);\n  const sourceHandle = getHandle$1(sourceHandleBounds?.source ?? [], params.sourceHandle);\n  const targetHandle = getHandle$1(\n  // when connection type is loose we can define all handles as sources and connect source -> source\n  params.connectionMode === ConnectionMode.Strict ? targetHandleBounds?.target ?? [] : (targetHandleBounds?.target ?? []).concat(targetHandleBounds?.source ?? []), params.targetHandle);\n  if (!sourceHandle || !targetHandle) {\n    params.onError?.('008', errorMessages['error008'](!sourceHandle ? 'source' : 'target', {\n      id: params.id,\n      sourceHandle: params.sourceHandle,\n      targetHandle: params.targetHandle\n    }));\n    return null;\n  }\n  const sourcePosition = sourceHandle?.position || Position.Bottom;\n  const targetPosition = targetHandle?.position || Position.Top;\n  const source = getHandlePosition(sourceNode, sourceHandle, sourcePosition);\n  const target = getHandlePosition(targetNode, targetHandle, targetPosition);\n  return {\n    sourceX: source.x,\n    sourceY: source.y,\n    targetX: target.x,\n    targetY: target.y,\n    sourcePosition,\n    targetPosition\n  };\n}\nfunction toHandleBounds(handles) {\n  if (!handles) {\n    return null;\n  }\n  const source = [];\n  const target = [];\n  for (const handle of handles) {\n    handle.width = handle.width ?? 1;\n    handle.height = handle.height ?? 1;\n    if (handle.type === 'source') {\n      source.push(handle);\n    } else if (handle.type === 'target') {\n      target.push(handle);\n    }\n  }\n  return {\n    source,\n    target\n  };\n}\nfunction getHandlePosition(node, handle, fallbackPosition = Position.Left, center = false) {\n  const x = (handle?.x ?? 0) + node.internals.positionAbsolute.x;\n  const y = (handle?.y ?? 0) + node.internals.positionAbsolute.y;\n  const {\n    width,\n    height\n  } = handle ?? getNodeDimensions(node);\n  if (center) {\n    return {\n      x: x + width / 2,\n      y: y + height / 2\n    };\n  }\n  const position = handle?.position ?? fallbackPosition;\n  switch (position) {\n    case Position.Top:\n      return {\n        x: x + width / 2,\n        y\n      };\n    case Position.Right:\n      return {\n        x: x + width,\n        y: y + height / 2\n      };\n    case Position.Bottom:\n      return {\n        x: x + width / 2,\n        y: y + height\n      };\n    case Position.Left:\n      return {\n        x,\n        y: y + height / 2\n      };\n  }\n}\nfunction getHandle$1(bounds, handleId) {\n  if (!bounds) {\n    return null;\n  }\n  // if no handleId is given, we use the first handle, otherwise we check for the id\n  return (!handleId ? bounds[0] : bounds.find(d => d.id === handleId)) || null;\n}\nfunction getMarkerId(marker, id) {\n  if (!marker) {\n    return '';\n  }\n  if (typeof marker === 'string') {\n    return marker;\n  }\n  const idPrefix = id ? `${id}__` : '';\n  return `${idPrefix}${Object.keys(marker).sort().map(key => `${key}=${marker[key]}`).join('&')}`;\n}\nfunction createMarkerIds(edges, {\n  id,\n  defaultColor,\n  defaultMarkerStart,\n  defaultMarkerEnd\n}) {\n  const ids = new Set();\n  return edges.reduce((markers, edge) => {\n    [edge.markerStart || defaultMarkerStart, edge.markerEnd || defaultMarkerEnd].forEach(marker => {\n      if (marker && typeof marker === 'object') {\n        const markerId = getMarkerId(marker, id);\n        if (!ids.has(markerId)) {\n          markers.push({\n            id: markerId,\n            color: marker.color || defaultColor,\n            ...marker\n          });\n          ids.add(markerId);\n        }\n      }\n    });\n    return markers;\n  }, []).sort((a, b) => a.id.localeCompare(b.id));\n}\nfunction getNodeToolbarTransform(nodeRect, viewport, position, offset, align) {\n  let alignmentOffset = 0.5;\n  if (align === 'start') {\n    alignmentOffset = 0;\n  } else if (align === 'end') {\n    alignmentOffset = 1;\n  }\n  // position === Position.Top\n  // we set the x any y position of the toolbar based on the nodes position\n  let pos = [(nodeRect.x + nodeRect.width * alignmentOffset) * viewport.zoom + viewport.x, nodeRect.y * viewport.zoom + viewport.y - offset];\n  // and than shift it based on the alignment. The shift values are in %.\n  let shift = [-100 * alignmentOffset, -100];\n  switch (position) {\n    case Position.Right:\n      pos = [(nodeRect.x + nodeRect.width) * viewport.zoom + viewport.x + offset, (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y];\n      shift = [0, -100 * alignmentOffset];\n      break;\n    case Position.Bottom:\n      pos[1] = (nodeRect.y + nodeRect.height) * viewport.zoom + viewport.y + offset;\n      shift[1] = 0;\n      break;\n    case Position.Left:\n      pos = [nodeRect.x * viewport.zoom + viewport.x - offset, (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y];\n      shift = [-100, -100 * alignmentOffset];\n      break;\n  }\n  return `translate(${pos[0]}px, ${pos[1]}px) translate(${shift[0]}%, ${shift[1]}%)`;\n}\nconst defaultOptions = {\n  nodeOrigin: [0, 0],\n  nodeExtent: infiniteExtent,\n  elevateNodesOnSelect: true,\n  defaults: {}\n};\nconst adoptUserNodesDefaultOptions = {\n  ...defaultOptions,\n  checkEquality: true\n};\nfunction mergeObjects(base, incoming) {\n  const result = {\n    ...base\n  };\n  for (const key in incoming) {\n    if (incoming[key] !== undefined) {\n      // typecast is safe here, because we check for undefined\n      result[key] = incoming[key];\n    }\n  }\n  return result;\n}\nfunction updateAbsolutePositions(nodeLookup, parentLookup, options) {\n  const _options = mergeObjects(defaultOptions, options);\n  for (const node of nodeLookup.values()) {\n    if (node.parentId) {\n      updateChildNode(node, nodeLookup, parentLookup, _options);\n    } else {\n      const positionWithOrigin = getNodePositionWithOrigin(node, _options.nodeOrigin);\n      const extent = isCoordinateExtent(node.extent) ? node.extent : _options.nodeExtent;\n      const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(node));\n      node.internals.positionAbsolute = clampedPosition;\n    }\n  }\n}\nfunction adoptUserNodes(nodes, nodeLookup, parentLookup, options) {\n  const _options = mergeObjects(adoptUserNodesDefaultOptions, options);\n  const tmpLookup = new Map(nodeLookup);\n  const selectedNodeZ = _options?.elevateNodesOnSelect ? 1000 : 0;\n  nodeLookup.clear();\n  parentLookup.clear();\n  for (const userNode of nodes) {\n    let internalNode = tmpLookup.get(userNode.id);\n    if (_options.checkEquality && userNode === internalNode?.internals.userNode) {\n      nodeLookup.set(userNode.id, internalNode);\n    } else {\n      const positionWithOrigin = getNodePositionWithOrigin(userNode, _options.nodeOrigin);\n      const extent = isCoordinateExtent(userNode.extent) ? userNode.extent : _options.nodeExtent;\n      const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(userNode));\n      internalNode = {\n        ..._options.defaults,\n        ...userNode,\n        measured: {\n          width: userNode.measured?.width,\n          height: userNode.measured?.height\n        },\n        internals: {\n          positionAbsolute: clampedPosition,\n          // if user re-initializes the node or removes `measured` for whatever reason, we reset the handleBounds so that the node gets re-measured\n          handleBounds: !userNode.measured ? undefined : internalNode?.internals.handleBounds,\n          z: calculateZ(userNode, selectedNodeZ),\n          userNode\n        }\n      };\n      nodeLookup.set(userNode.id, internalNode);\n    }\n    if (userNode.parentId) {\n      updateChildNode(internalNode, nodeLookup, parentLookup, options);\n    }\n  }\n}\nfunction updateParentLookup(node, parentLookup) {\n  if (!node.parentId) {\n    return;\n  }\n  const childNodes = parentLookup.get(node.parentId);\n  if (childNodes) {\n    childNodes.set(node.id, node);\n  } else {\n    parentLookup.set(node.parentId, new Map([[node.id, node]]));\n  }\n}\n/**\n * Updates positionAbsolute and zIndex of a child node and the parentLookup.\n */\nfunction updateChildNode(node, nodeLookup, parentLookup, options) {\n  const {\n    elevateNodesOnSelect,\n    nodeOrigin,\n    nodeExtent\n  } = mergeObjects(defaultOptions, options);\n  const parentId = node.parentId;\n  const parentNode = nodeLookup.get(parentId);\n  if (!parentNode) {\n    console.warn(`Parent node ${parentId} not found. Please make sure that parent nodes are in front of their child nodes in the nodes array.`);\n    return;\n  }\n  updateParentLookup(node, parentLookup);\n  const selectedNodeZ = elevateNodesOnSelect ? 1000 : 0;\n  const {\n    x,\n    y,\n    z\n  } = calculateChildXYZ(node, parentNode, nodeOrigin, nodeExtent, selectedNodeZ);\n  const {\n    positionAbsolute\n  } = node.internals;\n  const positionChanged = x !== positionAbsolute.x || y !== positionAbsolute.y;\n  if (positionChanged || z !== node.internals.z) {\n    node.internals = {\n      ...node.internals,\n      positionAbsolute: positionChanged ? {\n        x,\n        y\n      } : positionAbsolute,\n      z\n    };\n  }\n}\nfunction calculateZ(node, selectedNodeZ) {\n  return (isNumeric(node.zIndex) ? node.zIndex : 0) + (node.selected ? selectedNodeZ : 0);\n}\nfunction calculateChildXYZ(childNode, parentNode, nodeOrigin, nodeExtent, selectedNodeZ) {\n  const {\n    x: parentX,\n    y: parentY\n  } = parentNode.internals.positionAbsolute;\n  const childDimensions = getNodeDimensions(childNode);\n  const positionWithOrigin = getNodePositionWithOrigin(childNode, nodeOrigin);\n  const clampedPosition = isCoordinateExtent(childNode.extent) ? clampPosition(positionWithOrigin, childNode.extent, childDimensions) : positionWithOrigin;\n  let absolutePosition = clampPosition({\n    x: parentX + clampedPosition.x,\n    y: parentY + clampedPosition.y\n  }, nodeExtent, childDimensions);\n  if (childNode.extent === 'parent') {\n    absolutePosition = clampPositionToParent(absolutePosition, childDimensions, parentNode);\n  }\n  const childZ = calculateZ(childNode, selectedNodeZ);\n  const parentZ = parentNode.internals.z ?? 0;\n  return {\n    x: absolutePosition.x,\n    y: absolutePosition.y,\n    z: parentZ > childZ ? parentZ : childZ\n  };\n}\nfunction handleExpandParent(children, nodeLookup, parentLookup, nodeOrigin = [0, 0]) {\n  const changes = [];\n  const parentExpansions = new Map();\n  // determine the expanded rectangle the child nodes would take for each parent\n  for (const child of children) {\n    const parent = nodeLookup.get(child.parentId);\n    if (!parent) {\n      continue;\n    }\n    const parentRect = parentExpansions.get(child.parentId)?.expandedRect ?? nodeToRect(parent);\n    const expandedRect = getBoundsOfRects(parentRect, child.rect);\n    parentExpansions.set(child.parentId, {\n      expandedRect,\n      parent\n    });\n  }\n  if (parentExpansions.size > 0) {\n    parentExpansions.forEach(({\n      expandedRect,\n      parent\n    }, parentId) => {\n      // determine the position & dimensions of the parent\n      const positionAbsolute = parent.internals.positionAbsolute;\n      const dimensions = getNodeDimensions(parent);\n      const origin = parent.origin ?? nodeOrigin;\n      // determine how much the parent expands in width and position\n      const xChange = expandedRect.x < positionAbsolute.x ? Math.round(Math.abs(positionAbsolute.x - expandedRect.x)) : 0;\n      const yChange = expandedRect.y < positionAbsolute.y ? Math.round(Math.abs(positionAbsolute.y - expandedRect.y)) : 0;\n      const newWidth = Math.max(dimensions.width, Math.round(expandedRect.width));\n      const newHeight = Math.max(dimensions.height, Math.round(expandedRect.height));\n      const widthChange = (newWidth - dimensions.width) * origin[0];\n      const heightChange = (newHeight - dimensions.height) * origin[1];\n      // We need to correct the position of the parent node if the origin is not [0,0]\n      if (xChange > 0 || yChange > 0 || widthChange || heightChange) {\n        changes.push({\n          id: parentId,\n          type: 'position',\n          position: {\n            x: parent.position.x - xChange + widthChange,\n            y: parent.position.y - yChange + heightChange\n          }\n        });\n        // We move all child nodes in the oppsite direction\n        // so the x,y changes of the parent do not move the children\n        parentLookup.get(parentId)?.forEach(childNode => {\n          if (!children.some(child => child.id === childNode.id)) {\n            changes.push({\n              id: childNode.id,\n              type: 'position',\n              position: {\n                x: childNode.position.x + xChange,\n                y: childNode.position.y + yChange\n              }\n            });\n          }\n        });\n      }\n      // We need to correct the dimensions of the parent node if the origin is not [0,0]\n      if (dimensions.width < expandedRect.width || dimensions.height < expandedRect.height || xChange || yChange) {\n        changes.push({\n          id: parentId,\n          type: 'dimensions',\n          setAttributes: true,\n          dimensions: {\n            width: newWidth + (xChange ? origin[0] * xChange - widthChange : 0),\n            height: newHeight + (yChange ? origin[1] * yChange - heightChange : 0)\n          }\n        });\n      }\n    });\n  }\n  return changes;\n}\nfunction updateNodeInternals(updates, nodeLookup, parentLookup, domNode, nodeOrigin, nodeExtent) {\n  const viewportNode = domNode?.querySelector('.xyflow__viewport');\n  let updatedInternals = false;\n  if (!viewportNode) {\n    return {\n      changes: [],\n      updatedInternals\n    };\n  }\n  const changes = [];\n  const style = window.getComputedStyle(viewportNode);\n  const {\n    m22: zoom\n  } = new window.DOMMatrixReadOnly(style.transform);\n  // in this array we collect nodes, that might trigger changes (like expanding parent)\n  const parentExpandChildren = [];\n  for (const update of updates.values()) {\n    const node = nodeLookup.get(update.id);\n    if (!node) {\n      continue;\n    }\n    if (node.hidden) {\n      node.internals = {\n        ...node.internals,\n        handleBounds: undefined\n      };\n      updatedInternals = true;\n    } else {\n      const dimensions = getDimensions(update.nodeElement);\n      const dimensionChanged = node.measured.width !== dimensions.width || node.measured.height !== dimensions.height;\n      const doUpdate = !!(dimensions.width && dimensions.height && (dimensionChanged || !node.internals.handleBounds || update.force));\n      if (doUpdate) {\n        const nodeBounds = update.nodeElement.getBoundingClientRect();\n        const extent = isCoordinateExtent(node.extent) ? node.extent : nodeExtent;\n        let {\n          positionAbsolute\n        } = node.internals;\n        if (node.parentId && node.extent === 'parent') {\n          positionAbsolute = clampPositionToParent(positionAbsolute, dimensions, nodeLookup.get(node.parentId));\n        } else if (extent) {\n          positionAbsolute = clampPosition(positionAbsolute, extent, dimensions);\n        }\n        node.measured = dimensions;\n        node.internals = {\n          ...node.internals,\n          positionAbsolute,\n          handleBounds: {\n            source: getHandleBounds('source', update.nodeElement, nodeBounds, zoom, node.id),\n            target: getHandleBounds('target', update.nodeElement, nodeBounds, zoom, node.id)\n          }\n        };\n        if (node.parentId) {\n          updateChildNode(node, nodeLookup, parentLookup, {\n            nodeOrigin\n          });\n        }\n        updatedInternals = true;\n        if (dimensionChanged) {\n          changes.push({\n            id: node.id,\n            type: 'dimensions',\n            dimensions\n          });\n          if (node.expandParent && node.parentId) {\n            parentExpandChildren.push({\n              id: node.id,\n              parentId: node.parentId,\n              rect: nodeToRect(node, nodeOrigin)\n            });\n          }\n        }\n      }\n    }\n  }\n  if (parentExpandChildren.length > 0) {\n    const parentExpandChanges = handleExpandParent(parentExpandChildren, nodeLookup, parentLookup, nodeOrigin);\n    changes.push(...parentExpandChanges);\n  }\n  return {\n    changes,\n    updatedInternals\n  };\n}\nasync function panBy({\n  delta,\n  panZoom,\n  transform,\n  translateExtent,\n  width,\n  height\n}) {\n  if (!panZoom || !delta.x && !delta.y) {\n    return Promise.resolve(false);\n  }\n  const nextViewport = await panZoom.setViewportConstrained({\n    x: transform[0] + delta.x,\n    y: transform[1] + delta.y,\n    zoom: transform[2]\n  }, [[0, 0], [width, height]], translateExtent);\n  const transformChanged = !!nextViewport && (nextViewport.x !== transform[0] || nextViewport.y !== transform[1] || nextViewport.k !== transform[2]);\n  return Promise.resolve(transformChanged);\n}\nfunction updateConnectionLookup(connectionLookup, edgeLookup, edges) {\n  connectionLookup.clear();\n  edgeLookup.clear();\n  for (const edge of edges) {\n    const {\n      source,\n      target,\n      sourceHandle = null,\n      targetHandle = null\n    } = edge;\n    const sourceKey = `${source}-source-${sourceHandle}`;\n    const targetKey = `${target}-target-${targetHandle}`;\n    const prevSource = connectionLookup.get(sourceKey) || new Map();\n    const prevTarget = connectionLookup.get(targetKey) || new Map();\n    const connection = {\n      edgeId: edge.id,\n      source,\n      target,\n      sourceHandle,\n      targetHandle\n    };\n    edgeLookup.set(edge.id, edge);\n    connectionLookup.set(sourceKey, prevSource.set(`${target}-${targetHandle}`, connection));\n    connectionLookup.set(targetKey, prevTarget.set(`${source}-${sourceHandle}`, connection));\n  }\n}\nfunction shallowNodeData(a, b) {\n  if (a === null || b === null) {\n    return false;\n  }\n  const _a = Array.isArray(a) ? a : [a];\n  const _b = Array.isArray(b) ? b : [b];\n  if (_a.length !== _b.length) {\n    return false;\n  }\n  for (let i = 0; i < _a.length; i++) {\n    if (_a[i].id !== _b[i].id || _a[i].type !== _b[i].type || !Object.is(_a[i].data, _b[i].data)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isParentSelected(node, nodeLookup) {\n  if (!node.parentId) {\n    return false;\n  }\n  const parentNode = nodeLookup.get(node.parentId);\n  if (!parentNode) {\n    return false;\n  }\n  if (parentNode.selected) {\n    return true;\n  }\n  return isParentSelected(parentNode, nodeLookup);\n}\nfunction hasSelector(target, selector, domNode) {\n  let current = target;\n  do {\n    if (current?.matches(selector)) return true;\n    if (current === domNode) return false;\n    current = current.parentElement;\n  } while (current);\n  return false;\n}\n// looks for all selected nodes and created a NodeDragItem for each of them\nfunction getDragItems(nodeLookup, nodesDraggable, mousePos, nodeId) {\n  const dragItems = new Map();\n  for (const [id, node] of nodeLookup) {\n    if ((node.selected || node.id === nodeId) && (!node.parentId || !isParentSelected(node, nodeLookup)) && (node.draggable || nodesDraggable && typeof node.draggable === 'undefined')) {\n      const internalNode = nodeLookup.get(id);\n      if (internalNode) {\n        dragItems.set(id, {\n          id,\n          position: internalNode.position || {\n            x: 0,\n            y: 0\n          },\n          distance: {\n            x: mousePos.x - internalNode.internals.positionAbsolute.x,\n            y: mousePos.y - internalNode.internals.positionAbsolute.y\n          },\n          extent: internalNode.extent,\n          parentId: internalNode.parentId,\n          origin: internalNode.origin,\n          expandParent: internalNode.expandParent,\n          internals: {\n            positionAbsolute: internalNode.internals.positionAbsolute || {\n              x: 0,\n              y: 0\n            }\n          },\n          measured: {\n            width: internalNode.measured.width ?? 0,\n            height: internalNode.measured.height ?? 0\n          }\n        });\n      }\n    }\n  }\n  return dragItems;\n}\n// returns two params:\n// 1. the dragged node (or the first of the list, if we are dragging a node selection)\n// 2. array of selected nodes (for multi selections)\nfunction getEventHandlerParams({\n  nodeId,\n  dragItems,\n  nodeLookup,\n  dragging = true\n}) {\n  const nodesFromDragItems = [];\n  for (const [id, dragItem] of dragItems) {\n    const node = nodeLookup.get(id)?.internals.userNode;\n    if (node) {\n      nodesFromDragItems.push({\n        ...node,\n        position: dragItem.position,\n        dragging\n      });\n    }\n  }\n  if (!nodeId) {\n    return [nodesFromDragItems[0], nodesFromDragItems];\n  }\n  const node = nodeLookup.get(nodeId).internals.userNode;\n  return [{\n    ...node,\n    position: dragItems.get(nodeId)?.position || node.position,\n    dragging\n  }, nodesFromDragItems];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction XYDrag({\n  onNodeMouseDown,\n  getStoreItems,\n  onDragStart,\n  onDrag,\n  onDragStop\n}) {\n  let lastPos = {\n    x: null,\n    y: null\n  };\n  let autoPanId = 0;\n  let dragItems = new Map();\n  let autoPanStarted = false;\n  let mousePosition = {\n    x: 0,\n    y: 0\n  };\n  let containerBounds = null;\n  let dragStarted = false;\n  let d3Selection = null;\n  let abortDrag = false; // prevents unintentional dragging on multitouch\n  // public functions\n  function update({\n    noDragClassName,\n    handleSelector,\n    domNode,\n    isSelectable,\n    nodeId,\n    nodeClickDistance = 0\n  }) {\n    d3Selection = select(domNode);\n    function updateNodes({\n      x,\n      y\n    }, dragEvent) {\n      const {\n        nodeLookup,\n        nodeExtent,\n        snapGrid,\n        snapToGrid,\n        nodeOrigin,\n        onNodeDrag,\n        onSelectionDrag,\n        onError,\n        updateNodePositions\n      } = getStoreItems();\n      lastPos = {\n        x,\n        y\n      };\n      let hasChange = false;\n      let nodesBox = {\n        x: 0,\n        y: 0,\n        x2: 0,\n        y2: 0\n      };\n      if (dragItems.size > 1 && nodeExtent) {\n        const rect = getInternalNodesBounds(dragItems);\n        nodesBox = rectToBox(rect);\n      }\n      for (const [id, dragItem] of dragItems) {\n        if (!nodeLookup.has(id)) {\n          // if the node is not in the nodeLookup anymore, it was probably deleted while dragging\n          // and we don't need to update it anymore\n          continue;\n        }\n        let nextPosition = {\n          x: x - dragItem.distance.x,\n          y: y - dragItem.distance.y\n        };\n        if (snapToGrid) {\n          nextPosition = snapPosition(nextPosition, snapGrid);\n        }\n        // if there is selection with multiple nodes and a node extent is set, we need to adjust the node extent for each node\n        // based on its position so that the node stays at it's position relative to the selection.\n        let adjustedNodeExtent = [[nodeExtent[0][0], nodeExtent[0][1]], [nodeExtent[1][0], nodeExtent[1][1]]];\n        if (dragItems.size > 1 && nodeExtent && !dragItem.extent) {\n          const {\n            positionAbsolute\n          } = dragItem.internals;\n          const x1 = positionAbsolute.x - nodesBox.x + nodeExtent[0][0];\n          const x2 = positionAbsolute.x + dragItem.measured.width - nodesBox.x2 + nodeExtent[1][0];\n          const y1 = positionAbsolute.y - nodesBox.y + nodeExtent[0][1];\n          const y2 = positionAbsolute.y + dragItem.measured.height - nodesBox.y2 + nodeExtent[1][1];\n          adjustedNodeExtent = [[x1, y1], [x2, y2]];\n        }\n        const {\n          position,\n          positionAbsolute\n        } = calculateNodePosition({\n          nodeId: id,\n          nextPosition,\n          nodeLookup,\n          nodeExtent: adjustedNodeExtent,\n          nodeOrigin,\n          onError\n        });\n        // we want to make sure that we only fire a change event when there is a change\n        hasChange = hasChange || dragItem.position.x !== position.x || dragItem.position.y !== position.y;\n        dragItem.position = position;\n        dragItem.internals.positionAbsolute = positionAbsolute;\n      }\n      if (!hasChange) {\n        return;\n      }\n      updateNodePositions(dragItems, true);\n      if (dragEvent && (onDrag || onNodeDrag || !nodeId && onSelectionDrag)) {\n        const [currentNode, currentNodes] = getEventHandlerParams({\n          nodeId,\n          dragItems,\n          nodeLookup\n        });\n        onDrag?.(dragEvent, dragItems, currentNode, currentNodes);\n        onNodeDrag?.(dragEvent, currentNode, currentNodes);\n        if (!nodeId) {\n          onSelectionDrag?.(dragEvent, currentNodes);\n        }\n      }\n    }\n    async function autoPan() {\n      if (!containerBounds) {\n        return;\n      }\n      const {\n        transform,\n        panBy,\n        autoPanSpeed\n      } = getStoreItems();\n      const [xMovement, yMovement] = calcAutoPan(mousePosition, containerBounds, autoPanSpeed);\n      if (xMovement !== 0 || yMovement !== 0) {\n        lastPos.x = (lastPos.x ?? 0) - xMovement / transform[2];\n        lastPos.y = (lastPos.y ?? 0) - yMovement / transform[2];\n        if (await panBy({\n          x: xMovement,\n          y: yMovement\n        })) {\n          updateNodes(lastPos, null);\n        }\n      }\n      autoPanId = requestAnimationFrame(autoPan);\n    }\n    function startDrag(event) {\n      const {\n        nodeLookup,\n        multiSelectionActive,\n        nodesDraggable,\n        transform,\n        snapGrid,\n        snapToGrid,\n        selectNodesOnDrag,\n        onNodeDragStart,\n        onSelectionDragStart,\n        unselectNodesAndEdges\n      } = getStoreItems();\n      dragStarted = true;\n      if ((!selectNodesOnDrag || !isSelectable) && !multiSelectionActive && nodeId) {\n        if (!nodeLookup.get(nodeId)?.selected) {\n          // we need to reset selected nodes when selectNodesOnDrag=false\n          unselectNodesAndEdges();\n        }\n      }\n      if (isSelectable && selectNodesOnDrag && nodeId) {\n        onNodeMouseDown?.(nodeId);\n      }\n      const pointerPos = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid\n      });\n      lastPos = pointerPos;\n      dragItems = getDragItems(nodeLookup, nodesDraggable, pointerPos, nodeId);\n      if (dragItems.size > 0 && (onDragStart || onNodeDragStart || !nodeId && onSelectionDragStart)) {\n        const [currentNode, currentNodes] = getEventHandlerParams({\n          nodeId,\n          dragItems,\n          nodeLookup\n        });\n        onDragStart?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n        onNodeDragStart?.(event.sourceEvent, currentNode, currentNodes);\n        if (!nodeId) {\n          onSelectionDragStart?.(event.sourceEvent, currentNodes);\n        }\n      }\n    }\n    const d3DragInstance = drag().clickDistance(nodeClickDistance).on('start', event => {\n      const {\n        domNode,\n        nodeDragThreshold,\n        transform,\n        snapGrid,\n        snapToGrid\n      } = getStoreItems();\n      abortDrag = false;\n      if (nodeDragThreshold === 0) {\n        startDrag(event);\n      }\n      const pointerPos = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid\n      });\n      lastPos = pointerPos;\n      containerBounds = domNode?.getBoundingClientRect() || null;\n      mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n    }).on('drag', event => {\n      const {\n        autoPanOnNodeDrag,\n        transform,\n        snapGrid,\n        snapToGrid,\n        nodeDragThreshold,\n        nodeLookup\n      } = getStoreItems();\n      const pointerPos = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid\n      });\n      if (event.sourceEvent.type === 'touchmove' && event.sourceEvent.touches.length > 1 ||\n      // if user deletes a node while dragging, we need to abort the drag to prevent errors\n      nodeId && !nodeLookup.has(nodeId)) {\n        abortDrag = true;\n      }\n      if (abortDrag) {\n        return;\n      }\n      if (!autoPanStarted && autoPanOnNodeDrag && dragStarted) {\n        autoPanStarted = true;\n        autoPan();\n      }\n      if (!dragStarted) {\n        const x = pointerPos.xSnapped - (lastPos.x ?? 0);\n        const y = pointerPos.ySnapped - (lastPos.y ?? 0);\n        const distance = Math.sqrt(x * x + y * y);\n        if (distance > nodeDragThreshold) {\n          startDrag(event);\n        }\n      }\n      // skip events without movement\n      if ((lastPos.x !== pointerPos.xSnapped || lastPos.y !== pointerPos.ySnapped) && dragItems && dragStarted) {\n        // dragEvent = event.sourceEvent as MouseEvent;\n        mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n        updateNodes(pointerPos, event.sourceEvent);\n      }\n    }).on('end', event => {\n      if (!dragStarted || abortDrag) {\n        return;\n      }\n      autoPanStarted = false;\n      dragStarted = false;\n      cancelAnimationFrame(autoPanId);\n      if (dragItems.size > 0) {\n        const {\n          nodeLookup,\n          updateNodePositions,\n          onNodeDragStop,\n          onSelectionDragStop\n        } = getStoreItems();\n        updateNodePositions(dragItems, false);\n        if (onDragStop || onNodeDragStop || !nodeId && onSelectionDragStop) {\n          const [currentNode, currentNodes] = getEventHandlerParams({\n            nodeId,\n            dragItems,\n            nodeLookup,\n            dragging: false\n          });\n          onDragStop?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n          onNodeDragStop?.(event.sourceEvent, currentNode, currentNodes);\n          if (!nodeId) {\n            onSelectionDragStop?.(event.sourceEvent, currentNodes);\n          }\n        }\n      }\n    }).filter(event => {\n      const target = event.target;\n      const isDraggable = !event.button && (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, domNode)) && (!handleSelector || hasSelector(target, handleSelector, domNode));\n      return isDraggable;\n    });\n    d3Selection.call(d3DragInstance);\n  }\n  function destroy() {\n    d3Selection?.on('.drag', null);\n  }\n  return {\n    update,\n    destroy\n  };\n}\nfunction getNodesWithinDistance(position, nodeLookup, distance) {\n  const nodes = [];\n  const rect = {\n    x: position.x - distance,\n    y: position.y - distance,\n    width: distance * 2,\n    height: distance * 2\n  };\n  for (const node of nodeLookup.values()) {\n    if (getOverlappingArea(rect, nodeToRect(node)) > 0) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n// this distance is used for the area around the user pointer\n// while doing a connection for finding the closest nodes\nconst ADDITIONAL_DISTANCE = 250;\nfunction getClosestHandle(position, connectionRadius, nodeLookup, fromHandle) {\n  let closestHandles = [];\n  let minDistance = Infinity;\n  const closeNodes = getNodesWithinDistance(position, nodeLookup, connectionRadius + ADDITIONAL_DISTANCE);\n  for (const node of closeNodes) {\n    const allHandles = [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\n    for (const handle of allHandles) {\n      // if the handle is the same as the fromHandle we skip it\n      if (fromHandle.nodeId === handle.nodeId && fromHandle.type === handle.type && fromHandle.id === handle.id) {\n        continue;\n      }\n      // determine absolute position of the handle\n      const {\n        x,\n        y\n      } = getHandlePosition(node, handle, handle.position, true);\n      const distance = Math.sqrt(Math.pow(x - position.x, 2) + Math.pow(y - position.y, 2));\n      if (distance > connectionRadius) {\n        continue;\n      }\n      if (distance < minDistance) {\n        closestHandles = [{\n          ...handle,\n          x,\n          y\n        }];\n        minDistance = distance;\n      } else if (distance === minDistance) {\n        // when multiple handles are on the same distance we collect all of them\n        closestHandles.push({\n          ...handle,\n          x,\n          y\n        });\n      }\n    }\n  }\n  if (!closestHandles.length) {\n    return null;\n  }\n  // when multiple handles overlay each other we prefer the opposite handle\n  if (closestHandles.length > 1) {\n    const oppositeHandleType = fromHandle.type === 'source' ? 'target' : 'source';\n    return closestHandles.find(handle => handle.type === oppositeHandleType) ?? closestHandles[0];\n  }\n  return closestHandles[0];\n}\nfunction getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode, withAbsolutePosition = false) {\n  const node = nodeLookup.get(nodeId);\n  if (!node) {\n    return null;\n  }\n  const handles = connectionMode === 'strict' ? node.internals.handleBounds?.[handleType] : [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\n  const handle = (handleId ? handles?.find(h => h.id === handleId) : handles?.[0]) ?? null;\n  return handle && withAbsolutePosition ? {\n    ...handle,\n    ...getHandlePosition(node, handle, handle.position, true)\n  } : handle;\n}\nfunction getHandleType(edgeUpdaterType, handleDomNode) {\n  if (edgeUpdaterType) {\n    return edgeUpdaterType;\n  } else if (handleDomNode?.classList.contains('target')) {\n    return 'target';\n  } else if (handleDomNode?.classList.contains('source')) {\n    return 'source';\n  }\n  return null;\n}\nfunction isConnectionValid(isInsideConnectionRadius, isHandleValid) {\n  let isValid = null;\n  if (isHandleValid) {\n    isValid = true;\n  } else if (isInsideConnectionRadius && !isHandleValid) {\n    isValid = false;\n  }\n  return isValid;\n}\nconst alwaysValid = () => true;\nfunction onPointerDown(event, {\n  connectionMode,\n  connectionRadius,\n  handleId,\n  nodeId,\n  edgeUpdaterType,\n  isTarget,\n  domNode,\n  nodeLookup,\n  lib,\n  autoPanOnConnect,\n  flowId,\n  panBy,\n  cancelConnection,\n  onConnectStart,\n  onConnect,\n  onConnectEnd,\n  isValidConnection = alwaysValid,\n  onReconnectEnd,\n  updateConnection,\n  getTransform,\n  getFromHandle,\n  autoPanSpeed\n}) {\n  // when xyflow is used inside a shadow root we can't use document\n  const doc = getHostForElement(event.target);\n  let autoPanId = 0;\n  let closestHandle;\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const clickedHandle = doc?.elementFromPoint(x, y);\n  const handleType = getHandleType(edgeUpdaterType, clickedHandle);\n  const containerBounds = domNode?.getBoundingClientRect();\n  if (!containerBounds || !handleType) {\n    return;\n  }\n  const fromHandleInternal = getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode);\n  if (!fromHandleInternal) {\n    return;\n  }\n  let position = getEventPosition(event, containerBounds);\n  let autoPanStarted = false;\n  let connection = null;\n  let isValid = false;\n  let handleDomNode = null;\n  // when the user is moving the mouse close to the edge of the canvas while connecting we move the canvas\n  function autoPan() {\n    if (!autoPanOnConnect || !containerBounds) {\n      return;\n    }\n    const [x, y] = calcAutoPan(position, containerBounds, autoPanSpeed);\n    panBy({\n      x,\n      y\n    });\n    autoPanId = requestAnimationFrame(autoPan);\n  }\n  // Stays the same for all consecutive pointermove events\n  const fromHandle = {\n    ...fromHandleInternal,\n    nodeId,\n    type: handleType,\n    position: fromHandleInternal.position\n  };\n  const fromNodeInternal = nodeLookup.get(nodeId);\n  const from = getHandlePosition(fromNodeInternal, fromHandle, Position.Left, true);\n  const newConnection = {\n    inProgress: true,\n    isValid: null,\n    from,\n    fromHandle,\n    fromPosition: fromHandle.position,\n    fromNode: fromNodeInternal,\n    to: position,\n    toHandle: null,\n    toPosition: oppositePosition[fromHandle.position],\n    toNode: null\n  };\n  updateConnection(newConnection);\n  let previousConnection = newConnection;\n  onConnectStart?.(event, {\n    nodeId,\n    handleId,\n    handleType\n  });\n  function onPointerMove(event) {\n    if (!getFromHandle() || !fromHandle) {\n      onPointerUp(event);\n      return;\n    }\n    const transform = getTransform();\n    position = getEventPosition(event, containerBounds);\n    closestHandle = getClosestHandle(pointToRendererPoint(position, transform, false, [1, 1]), connectionRadius, nodeLookup, fromHandle);\n    if (!autoPanStarted) {\n      autoPan();\n      autoPanStarted = true;\n    }\n    const result = isValidHandle(event, {\n      handle: closestHandle,\n      connectionMode,\n      fromNodeId: nodeId,\n      fromHandleId: handleId,\n      fromType: isTarget ? 'target' : 'source',\n      isValidConnection,\n      doc,\n      lib,\n      flowId,\n      nodeLookup\n    });\n    handleDomNode = result.handleDomNode;\n    connection = result.connection;\n    isValid = isConnectionValid(!!closestHandle, result.isValid);\n    const newConnection = {\n      // from stays the same\n      ...previousConnection,\n      isValid,\n      to: closestHandle && isValid ? rendererPointToPoint({\n        x: closestHandle.x,\n        y: closestHandle.y\n      }, transform) : position,\n      toHandle: result.toHandle,\n      toPosition: isValid && result.toHandle ? result.toHandle.position : oppositePosition[fromHandle.position],\n      toNode: result.toHandle ? nodeLookup.get(result.toHandle.nodeId) : null\n    };\n    // we don't want to trigger an update when the connection\n    // is snapped to the same handle as before\n    if (isValid && closestHandle && previousConnection.toHandle && newConnection.toHandle && previousConnection.toHandle.type === newConnection.toHandle.type && previousConnection.toHandle.nodeId === newConnection.toHandle.nodeId && previousConnection.toHandle.id === newConnection.toHandle.id && previousConnection.to.x === newConnection.to.x && previousConnection.to.y === newConnection.to.y) {\n      return;\n    }\n    updateConnection(newConnection);\n    previousConnection = newConnection;\n  }\n  function onPointerUp(event) {\n    if ((closestHandle || handleDomNode) && connection && isValid) {\n      onConnect?.(connection);\n    }\n    // it's important to get a fresh reference from the store here\n    // in order to get the latest state of onConnectEnd\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      inProgress,\n      ...connectionState\n    } = previousConnection;\n    const finalConnectionState = {\n      ...connectionState,\n      toPosition: previousConnection.toHandle ? previousConnection.toPosition : null\n    };\n    onConnectEnd?.(event, finalConnectionState);\n    if (edgeUpdaterType) {\n      onReconnectEnd?.(event, finalConnectionState);\n    }\n    cancelConnection();\n    cancelAnimationFrame(autoPanId);\n    autoPanStarted = false;\n    isValid = false;\n    connection = null;\n    handleDomNode = null;\n    doc.removeEventListener('mousemove', onPointerMove);\n    doc.removeEventListener('mouseup', onPointerUp);\n    doc.removeEventListener('touchmove', onPointerMove);\n    doc.removeEventListener('touchend', onPointerUp);\n  }\n  doc.addEventListener('mousemove', onPointerMove);\n  doc.addEventListener('mouseup', onPointerUp);\n  doc.addEventListener('touchmove', onPointerMove);\n  doc.addEventListener('touchend', onPointerUp);\n}\n// checks if  and returns connection in fom of an object { source: 123, target: 312 }\nfunction isValidHandle(event, {\n  handle,\n  connectionMode,\n  fromNodeId,\n  fromHandleId,\n  fromType,\n  doc,\n  lib,\n  flowId,\n  isValidConnection = alwaysValid,\n  nodeLookup\n}) {\n  const isTarget = fromType === 'target';\n  const handleDomNode = handle ? doc.querySelector(`.${lib}-flow__handle[data-id=\"${flowId}-${handle?.nodeId}-${handle?.id}-${handle?.type}\"]`) : null;\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const handleBelow = doc.elementFromPoint(x, y);\n  // we always want to prioritize the handle below the mouse cursor over the closest distance handle,\n  // because it could be that the center of another handle is closer to the mouse pointer than the handle below the cursor\n  const handleToCheck = handleBelow?.classList.contains(`${lib}-flow__handle`) ? handleBelow : handleDomNode;\n  const result = {\n    handleDomNode: handleToCheck,\n    isValid: false,\n    connection: null,\n    toHandle: null\n  };\n  if (handleToCheck) {\n    const handleType = getHandleType(undefined, handleToCheck);\n    const handleNodeId = handleToCheck.getAttribute('data-nodeid');\n    const handleId = handleToCheck.getAttribute('data-handleid');\n    const connectable = handleToCheck.classList.contains('connectable');\n    const connectableEnd = handleToCheck.classList.contains('connectableend');\n    if (!handleNodeId || !handleType) {\n      return result;\n    }\n    const connection = {\n      source: isTarget ? handleNodeId : fromNodeId,\n      sourceHandle: isTarget ? handleId : fromHandleId,\n      target: isTarget ? fromNodeId : handleNodeId,\n      targetHandle: isTarget ? fromHandleId : handleId\n    };\n    result.connection = connection;\n    const isConnectable = connectable && connectableEnd;\n    // in strict mode we don't allow target to target or source to source connections\n    const isValid = isConnectable && (connectionMode === ConnectionMode.Strict ? isTarget && handleType === 'source' || !isTarget && handleType === 'target' : handleNodeId !== fromNodeId || handleId !== fromHandleId);\n    result.isValid = isValid && isValidConnection(connection);\n    result.toHandle = getHandle(handleNodeId, handleType, handleId, nodeLookup, connectionMode, false);\n  }\n  return result;\n}\nconst XYHandle = {\n  onPointerDown,\n  isValid: isValidHandle\n};\nfunction XYMinimap({\n  domNode,\n  panZoom,\n  getTransform,\n  getViewScale\n}) {\n  const selection = select(domNode);\n  function update({\n    translateExtent,\n    width,\n    height,\n    zoomStep = 10,\n    pannable = true,\n    zoomable = true,\n    inversePan = false\n  }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const zoomHandler = event => {\n      const transform = getTransform();\n      if (event.sourceEvent.type !== 'wheel' || !panZoom) {\n        return;\n      }\n      const pinchDelta = -event.sourceEvent.deltaY * (event.sourceEvent.deltaMode === 1 ? 0.05 : event.sourceEvent.deltaMode ? 1 : 0.002) * zoomStep;\n      const nextZoom = transform[2] * Math.pow(2, pinchDelta);\n      panZoom.scaleTo(nextZoom);\n    };\n    let panStart = [0, 0];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const panStartHandler = event => {\n      if (event.sourceEvent.type === 'mousedown' || event.sourceEvent.type === 'touchstart') {\n        panStart = [event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX, event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY];\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const panHandler = event => {\n      const transform = getTransform();\n      if (event.sourceEvent.type !== 'mousemove' && event.sourceEvent.type !== 'touchmove' || !panZoom) {\n        return;\n      }\n      const panCurrent = [event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX, event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY];\n      const panDelta = [panCurrent[0] - panStart[0], panCurrent[1] - panStart[1]];\n      panStart = panCurrent;\n      const moveScale = getViewScale() * Math.max(transform[2], Math.log(transform[2])) * (inversePan ? -1 : 1);\n      const position = {\n        x: transform[0] - panDelta[0] * moveScale,\n        y: transform[1] - panDelta[1] * moveScale\n      };\n      const extent = [[0, 0], [width, height]];\n      panZoom.setViewportConstrained({\n        x: position.x,\n        y: position.y,\n        zoom: transform[2]\n      }, extent, translateExtent);\n    };\n    const zoomAndPanHandler = zoom().on('start', panStartHandler)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    .on('zoom', pannable ? panHandler : null)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    .on('zoom.wheel', zoomable ? zoomHandler : null);\n    selection.call(zoomAndPanHandler, {});\n  }\n  function destroy() {\n    selection.on('zoom', null);\n  }\n  return {\n    update,\n    destroy,\n    pointer\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst viewChanged = (prevViewport, eventViewport) => prevViewport.x !== eventViewport.x || prevViewport.y !== eventViewport.y || prevViewport.zoom !== eventViewport.k;\nconst transformToViewport = transform => ({\n  x: transform.x,\n  y: transform.y,\n  zoom: transform.k\n});\nconst viewportToTransform = ({\n  x,\n  y,\n  zoom\n}) => zoomIdentity.translate(x, y).scale(zoom);\nconst isWrappedWithClass = (event, className) => event.target.closest(`.${className}`);\nconst isRightClickPan = (panOnDrag, usedButton) => usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);\nconst getD3Transition = (selection, duration = 0, onEnd = () => {}) => {\n  const hasDuration = typeof duration === 'number' && duration > 0;\n  if (!hasDuration) {\n    onEnd();\n  }\n  return hasDuration ? selection.transition().duration(duration).on('end', onEnd) : selection;\n};\nconst wheelDelta = event => {\n  const factor = event.ctrlKey && isMacOs() ? 10 : 1;\n  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * factor;\n};\nfunction createPanOnScrollHandler({\n  zoomPanValues,\n  noWheelClassName,\n  d3Selection,\n  d3Zoom,\n  panOnScrollMode,\n  panOnScrollSpeed,\n  zoomOnPinch,\n  onPanZoomStart,\n  onPanZoom,\n  onPanZoomEnd\n}) {\n  return event => {\n    if (isWrappedWithClass(event, noWheelClassName)) {\n      return false;\n    }\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    const currentZoom = d3Selection.property('__zoom').k || 1;\n    // macos sets ctrlKey=true for pinch gesture on a trackpad\n    if (event.ctrlKey && zoomOnPinch) {\n      const point = pointer(event);\n      const pinchDelta = wheelDelta(event);\n      const zoom = currentZoom * Math.pow(2, pinchDelta);\n      // @ts-ignore\n      d3Zoom.scaleTo(d3Selection, zoom, point, event);\n      return;\n    }\n    // increase scroll speed in firefox\n    // firefox: deltaMode === 1; chrome: deltaMode === 0\n    const deltaNormalize = event.deltaMode === 1 ? 20 : 1;\n    let deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;\n    let deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;\n    // this enables vertical scrolling with shift + scroll on windows\n    if (!isMacOs() && event.shiftKey && panOnScrollMode !== PanOnScrollMode.Vertical) {\n      deltaX = event.deltaY * deltaNormalize;\n      deltaY = 0;\n    }\n    d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed,\n    // @ts-ignore\n    {\n      internal: true\n    });\n    const nextViewport = transformToViewport(d3Selection.property('__zoom'));\n    clearTimeout(zoomPanValues.panScrollTimeout);\n    // for pan on scroll we need to handle the event calls on our own\n    // we can't use the start, zoom and end events from d3-zoom\n    // because start and move gets called on every scroll event and not once at the beginning\n    if (!zoomPanValues.isPanScrolling) {\n      zoomPanValues.isPanScrolling = true;\n      onPanZoomStart?.(event, nextViewport);\n    }\n    if (zoomPanValues.isPanScrolling) {\n      onPanZoom?.(event, nextViewport);\n      zoomPanValues.panScrollTimeout = setTimeout(() => {\n        onPanZoomEnd?.(event, nextViewport);\n        zoomPanValues.isPanScrolling = false;\n      }, 150);\n    }\n  };\n}\nfunction createZoomOnScrollHandler({\n  noWheelClassName,\n  preventScrolling,\n  d3ZoomHandler\n}) {\n  return function (event, d) {\n    // we still want to enable pinch zooming even if preventScrolling is set to false\n    const preventZoom = !preventScrolling && event.type === 'wheel' && !event.ctrlKey;\n    if (preventZoom || isWrappedWithClass(event, noWheelClassName)) {\n      return null;\n    }\n    event.preventDefault();\n    d3ZoomHandler.call(this, event, d);\n  };\n}\nfunction createPanZoomStartHandler({\n  zoomPanValues,\n  onDraggingChange,\n  onPanZoomStart\n}) {\n  return event => {\n    if (event.sourceEvent?.internal) {\n      return;\n    }\n    const viewport = transformToViewport(event.transform);\n    // we need to remember it here, because it's always 0 in the \"zoom\" event\n    zoomPanValues.mouseButton = event.sourceEvent?.button || 0;\n    zoomPanValues.isZoomingOrPanning = true;\n    zoomPanValues.prevViewport = viewport;\n    if (event.sourceEvent?.type === 'mousedown') {\n      onDraggingChange(true);\n    }\n    if (onPanZoomStart) {\n      onPanZoomStart?.(event.sourceEvent, viewport);\n    }\n  };\n}\nfunction createPanZoomHandler({\n  zoomPanValues,\n  panOnDrag,\n  onPaneContextMenu,\n  onTransformChange,\n  onPanZoom\n}) {\n  return event => {\n    zoomPanValues.usedRightMouseButton = !!(onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0));\n    if (!event.sourceEvent?.sync) {\n      onTransformChange([event.transform.x, event.transform.y, event.transform.k]);\n    }\n    if (onPanZoom && !event.sourceEvent?.internal) {\n      onPanZoom?.(event.sourceEvent, transformToViewport(event.transform));\n    }\n  };\n}\nfunction createPanZoomEndHandler({\n  zoomPanValues,\n  panOnDrag,\n  panOnScroll,\n  onDraggingChange,\n  onPanZoomEnd,\n  onPaneContextMenu\n}) {\n  return event => {\n    if (event.sourceEvent?.internal) {\n      return;\n    }\n    zoomPanValues.isZoomingOrPanning = false;\n    if (onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0) && !zoomPanValues.usedRightMouseButton && event.sourceEvent) {\n      onPaneContextMenu(event.sourceEvent);\n    }\n    zoomPanValues.usedRightMouseButton = false;\n    onDraggingChange(false);\n    if (onPanZoomEnd && viewChanged(zoomPanValues.prevViewport, event.transform)) {\n      const viewport = transformToViewport(event.transform);\n      zoomPanValues.prevViewport = viewport;\n      clearTimeout(zoomPanValues.timerId);\n      zoomPanValues.timerId = setTimeout(() => {\n        onPanZoomEnd?.(event.sourceEvent, viewport);\n      },\n      // we need a setTimeout for panOnScroll to supress multiple end events fired during scroll\n      panOnScroll ? 150 : 0);\n    }\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction createFilter({\n  zoomActivationKeyPressed,\n  zoomOnScroll,\n  zoomOnPinch,\n  panOnDrag,\n  panOnScroll,\n  zoomOnDoubleClick,\n  userSelectionActive,\n  noWheelClassName,\n  noPanClassName,\n  lib\n}) {\n  return event => {\n    const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;\n    const pinchZoom = zoomOnPinch && event.ctrlKey;\n    if (event.button === 1 && event.type === 'mousedown' && (isWrappedWithClass(event, `${lib}-flow__node`) || isWrappedWithClass(event, `${lib}-flow__edge`))) {\n      return true;\n    }\n    // if all interactions are disabled, we prevent all zoom events\n    if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {\n      return false;\n    }\n    // during a selection we prevent all other interactions\n    if (userSelectionActive) {\n      return false;\n    }\n    // if the target element is inside an element with the nowheel class, we prevent zooming\n    if (isWrappedWithClass(event, noWheelClassName) && event.type === 'wheel') {\n      return false;\n    }\n    // if the target element is inside an element with the nopan class, we prevent panning\n    if (isWrappedWithClass(event, noPanClassName) && (event.type !== 'wheel' || panOnScroll && event.type === 'wheel' && !zoomActivationKeyPressed)) {\n      return false;\n    }\n    if (!zoomOnPinch && event.ctrlKey && event.type === 'wheel') {\n      return false;\n    }\n    if (!zoomOnPinch && event.type === 'touchstart' && event.touches?.length > 1) {\n      event.preventDefault(); // if you manage to start with 2 touches, we prevent native zoom\n      return false;\n    }\n    // when there is no scroll handling enabled, we prevent all wheel events\n    if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === 'wheel') {\n      return false;\n    }\n    // if the pane is not movable, we prevent dragging it with mousestart or touchstart\n    if (!panOnDrag && (event.type === 'mousedown' || event.type === 'touchstart')) {\n      return false;\n    }\n    // if the pane is only movable using allowed clicks\n    if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && event.type === 'mousedown') {\n      return false;\n    }\n    // We only allow right clicks if pan on drag is set to right click\n    const buttonAllowed = Array.isArray(panOnDrag) && panOnDrag.includes(event.button) || !event.button || event.button <= 1;\n    // default filter for d3-zoom\n    return (!event.ctrlKey || event.type === 'wheel') && buttonAllowed;\n  };\n}\nfunction XYPanZoom({\n  domNode,\n  minZoom,\n  maxZoom,\n  paneClickDistance,\n  translateExtent,\n  viewport,\n  onPanZoom,\n  onPanZoomStart,\n  onPanZoomEnd,\n  onDraggingChange\n}) {\n  const zoomPanValues = {\n    isZoomingOrPanning: false,\n    usedRightMouseButton: false,\n    prevViewport: {\n      x: 0,\n      y: 0,\n      zoom: 0\n    },\n    mouseButton: 0,\n    timerId: undefined,\n    panScrollTimeout: undefined,\n    isPanScrolling: false\n  };\n  const bbox = domNode.getBoundingClientRect();\n  const d3ZoomInstance = zoom().clickDistance(!isNumeric(paneClickDistance) || paneClickDistance < 0 ? 0 : paneClickDistance).scaleExtent([minZoom, maxZoom]).translateExtent(translateExtent);\n  const d3Selection = select(domNode).call(d3ZoomInstance);\n  setViewportConstrained({\n    x: viewport.x,\n    y: viewport.y,\n    zoom: clamp(viewport.zoom, minZoom, maxZoom)\n  }, [[0, 0], [bbox.width, bbox.height]], translateExtent);\n  const d3ZoomHandler = d3Selection.on('wheel.zoom');\n  const d3DblClickZoomHandler = d3Selection.on('dblclick.zoom');\n  d3ZoomInstance.wheelDelta(wheelDelta);\n  function setTransform(transform, options) {\n    if (d3Selection) {\n      return new Promise(resolve => {\n        d3ZoomInstance?.transform(getD3Transition(d3Selection, options?.duration, () => resolve(true)), transform);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  // public functions\n  function update({\n    noWheelClassName,\n    noPanClassName,\n    onPaneContextMenu,\n    userSelectionActive,\n    panOnScroll,\n    panOnDrag,\n    panOnScrollMode,\n    panOnScrollSpeed,\n    preventScrolling,\n    zoomOnPinch,\n    zoomOnScroll,\n    zoomOnDoubleClick,\n    zoomActivationKeyPressed,\n    lib,\n    onTransformChange\n  }) {\n    if (userSelectionActive && !zoomPanValues.isZoomingOrPanning) {\n      destroy();\n    }\n    const isPanOnScroll = panOnScroll && !zoomActivationKeyPressed && !userSelectionActive;\n    const wheelHandler = isPanOnScroll ? createPanOnScrollHandler({\n      zoomPanValues,\n      noWheelClassName,\n      d3Selection,\n      d3Zoom: d3ZoomInstance,\n      panOnScrollMode,\n      panOnScrollSpeed,\n      zoomOnPinch,\n      onPanZoomStart,\n      onPanZoom,\n      onPanZoomEnd\n    }) : createZoomOnScrollHandler({\n      noWheelClassName,\n      preventScrolling,\n      d3ZoomHandler\n    });\n    d3Selection.on('wheel.zoom', wheelHandler, {\n      passive: false\n    });\n    if (!userSelectionActive) {\n      // pan zoom start\n      const startHandler = createPanZoomStartHandler({\n        zoomPanValues,\n        onDraggingChange,\n        onPanZoomStart\n      });\n      d3ZoomInstance.on('start', startHandler);\n      // pan zoom\n      const panZoomHandler = createPanZoomHandler({\n        zoomPanValues,\n        panOnDrag,\n        onPaneContextMenu: !!onPaneContextMenu,\n        onPanZoom,\n        onTransformChange\n      });\n      d3ZoomInstance.on('zoom', panZoomHandler);\n      // pan zoom end\n      const panZoomEndHandler = createPanZoomEndHandler({\n        zoomPanValues,\n        panOnDrag,\n        panOnScroll,\n        onPaneContextMenu,\n        onPanZoomEnd,\n        onDraggingChange\n      });\n      d3ZoomInstance.on('end', panZoomEndHandler);\n    }\n    const filter = createFilter({\n      zoomActivationKeyPressed,\n      panOnDrag,\n      zoomOnScroll,\n      panOnScroll,\n      zoomOnDoubleClick,\n      zoomOnPinch,\n      userSelectionActive,\n      noPanClassName,\n      noWheelClassName,\n      lib\n    });\n    d3ZoomInstance.filter(filter);\n    // We cannot add zoomOnDoubleClick to the filter above because\n    // double tapping on touch screens circumvents the filter and\n    // dblclick.zoom is fired on the selection directly\n    if (zoomOnDoubleClick) {\n      d3Selection.on('dblclick.zoom', d3DblClickZoomHandler);\n    } else {\n      d3Selection.on('dblclick.zoom', null);\n    }\n  }\n  function destroy() {\n    d3ZoomInstance.on('zoom', null);\n  }\n  async function setViewportConstrained(viewport, extent, translateExtent) {\n    const nextTransform = viewportToTransform(viewport);\n    const contrainedTransform = d3ZoomInstance?.constrain()(nextTransform, extent, translateExtent);\n    if (contrainedTransform) {\n      await setTransform(contrainedTransform);\n    }\n    return new Promise(resolve => resolve(contrainedTransform));\n  }\n  async function setViewport(viewport, options) {\n    const nextTransform = viewportToTransform(viewport);\n    await setTransform(nextTransform, options);\n    return new Promise(resolve => resolve(nextTransform));\n  }\n  function syncViewport(viewport) {\n    if (d3Selection) {\n      const nextTransform = viewportToTransform(viewport);\n      const currentTransform = d3Selection.property('__zoom');\n      if (currentTransform.k !== viewport.zoom || currentTransform.x !== viewport.x || currentTransform.y !== viewport.y) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        d3ZoomInstance?.transform(d3Selection, nextTransform, null, {\n          sync: true\n        });\n      }\n    }\n  }\n  function getViewport() {\n    const transform = d3Selection ? zoomTransform(d3Selection.node()) : {\n      x: 0,\n      y: 0,\n      k: 1\n    };\n    return {\n      x: transform.x,\n      y: transform.y,\n      zoom: transform.k\n    };\n  }\n  function scaleTo(zoom, options) {\n    if (d3Selection) {\n      return new Promise(resolve => {\n        d3ZoomInstance?.scaleTo(getD3Transition(d3Selection, options?.duration, () => resolve(true)), zoom);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  function scaleBy(factor, options) {\n    if (d3Selection) {\n      return new Promise(resolve => {\n        d3ZoomInstance?.scaleBy(getD3Transition(d3Selection, options?.duration, () => resolve(true)), factor);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  function setScaleExtent(scaleExtent) {\n    d3ZoomInstance?.scaleExtent(scaleExtent);\n  }\n  function setTranslateExtent(translateExtent) {\n    d3ZoomInstance?.translateExtent(translateExtent);\n  }\n  function setClickDistance(distance) {\n    const validDistance = !isNumeric(distance) || distance < 0 ? 0 : distance;\n    d3ZoomInstance?.clickDistance(validDistance);\n  }\n  return {\n    update,\n    destroy,\n    setViewport,\n    setViewportConstrained,\n    getViewport,\n    scaleTo,\n    scaleBy,\n    setScaleExtent,\n    setTranslateExtent,\n    syncViewport,\n    setClickDistance\n  };\n}\nvar ResizeControlVariant;\n(function (ResizeControlVariant) {\n  ResizeControlVariant[\"Line\"] = \"line\";\n  ResizeControlVariant[\"Handle\"] = \"handle\";\n})(ResizeControlVariant || (ResizeControlVariant = {}));\nconst XY_RESIZER_HANDLE_POSITIONS = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\nconst XY_RESIZER_LINE_POSITIONS = ['top', 'right', 'bottom', 'left'];\n\n/**\n * Get all connecting edges for a given set of nodes\n * @param width - new width of the node\n * @param prevWidth - previous width of the node\n * @param height - new height of the node\n * @param prevHeight - previous height of the node\n * @param affectsX - whether to invert the resize direction for the x axis\n * @param affectsY - whether to invert the resize direction for the y axis\n * @returns array of two numbers representing the direction of the resize for each axis, 0 = no change, 1 = increase, -1 = decrease\n */\nfunction getResizeDirection({\n  width,\n  prevWidth,\n  height,\n  prevHeight,\n  affectsX,\n  affectsY\n}) {\n  const deltaWidth = width - prevWidth;\n  const deltaHeight = height - prevHeight;\n  const direction = [deltaWidth > 0 ? 1 : deltaWidth < 0 ? -1 : 0, deltaHeight > 0 ? 1 : deltaHeight < 0 ? -1 : 0];\n  if (deltaWidth && affectsX) {\n    direction[0] = direction[0] * -1;\n  }\n  if (deltaHeight && affectsY) {\n    direction[1] = direction[1] * -1;\n  }\n  return direction;\n}\n/**\n * Parses the control position that is being dragged to dimensions that are being resized\n * @param controlPosition - position of the control that is being dragged\n * @returns isHorizontal, isVertical, affectsX, affectsY,\n */\nfunction getControlDirection(controlPosition) {\n  const isHorizontal = controlPosition.includes('right') || controlPosition.includes('left');\n  const isVertical = controlPosition.includes('bottom') || controlPosition.includes('top');\n  const affectsX = controlPosition.includes('left');\n  const affectsY = controlPosition.includes('top');\n  return {\n    isHorizontal,\n    isVertical,\n    affectsX,\n    affectsY\n  };\n}\nfunction getLowerExtentClamp(lowerExtent, lowerBound) {\n  return Math.max(0, lowerBound - lowerExtent);\n}\nfunction getUpperExtentClamp(upperExtent, upperBound) {\n  return Math.max(0, upperExtent - upperBound);\n}\nfunction getSizeClamp(size, minSize, maxSize) {\n  return Math.max(0, minSize - size, size - maxSize);\n}\nfunction xor(a, b) {\n  return a ? !b : b;\n}\n/**\n * Calculates new width & height and x & y of node after resize based on pointer position\n * @description - Buckle up, this is a chunky one... If you want to determine the new dimensions of a node after a resize,\n * you have to account for all possible restrictions: min/max width/height of the node, the maximum extent the node is allowed\n * to move in (in this case: resize into) determined by the parent node, the minimal extent determined by child nodes\n * with expandParent or extent: 'parent' set and oh yeah, these things also have to work with keepAspectRatio!\n * The way this is done is by determining how much each of these restricting actually restricts the resize and then applying the\n * strongest restriction. Because the resize affects x, y and width, height and width, height of a opposing side with keepAspectRatio,\n * the resize amount is always kept in distX & distY amount (the distance in mouse movement)\n * Instead of clamping each value, we first calculate the biggest 'clamp' (for the lack of a better name) and then apply it to all values.\n * To complicate things nodeOrigin has to be taken into account as well. This is done by offsetting the nodes as if their origin is [0, 0],\n * then calculating the restrictions as usual\n * @param startValues - starting values of resize\n * @param controlDirection - dimensions affected by the resize\n * @param pointerPosition - the current pointer position corrected for snapping\n * @param boundaries - minimum and maximum dimensions of the node\n * @param keepAspectRatio - prevent changes of asprect ratio\n * @returns x, y, width and height of the node after resize\n */\nfunction getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, extent, childExtent) {\n  let {\n    affectsX,\n    affectsY\n  } = controlDirection;\n  const {\n    isHorizontal,\n    isVertical\n  } = controlDirection;\n  const isDiagonal = isHorizontal && isVertical;\n  const {\n    xSnapped,\n    ySnapped\n  } = pointerPosition;\n  const {\n    minWidth,\n    maxWidth,\n    minHeight,\n    maxHeight\n  } = boundaries;\n  const {\n    x: startX,\n    y: startY,\n    width: startWidth,\n    height: startHeight,\n    aspectRatio\n  } = startValues;\n  let distX = Math.floor(isHorizontal ? xSnapped - startValues.pointerX : 0);\n  let distY = Math.floor(isVertical ? ySnapped - startValues.pointerY : 0);\n  const newWidth = startWidth + (affectsX ? -distX : distX);\n  const newHeight = startHeight + (affectsY ? -distY : distY);\n  const originOffsetX = -nodeOrigin[0] * startWidth;\n  const originOffsetY = -nodeOrigin[1] * startHeight;\n  // Check if maxWidth, minWWidth, maxHeight, minHeight are restricting the resize\n  let clampX = getSizeClamp(newWidth, minWidth, maxWidth);\n  let clampY = getSizeClamp(newHeight, minHeight, maxHeight);\n  // Check if extent is restricting the resize\n  if (extent) {\n    let xExtentClamp = 0;\n    let yExtentClamp = 0;\n    if (affectsX && distX < 0) {\n      xExtentClamp = getLowerExtentClamp(startX + distX + originOffsetX, extent[0][0]);\n    } else if (!affectsX && distX > 0) {\n      xExtentClamp = getUpperExtentClamp(startX + newWidth + originOffsetX, extent[1][0]);\n    }\n    if (affectsY && distY < 0) {\n      yExtentClamp = getLowerExtentClamp(startY + distY + originOffsetY, extent[0][1]);\n    } else if (!affectsY && distY > 0) {\n      yExtentClamp = getUpperExtentClamp(startY + newHeight + originOffsetY, extent[1][1]);\n    }\n    clampX = Math.max(clampX, xExtentClamp);\n    clampY = Math.max(clampY, yExtentClamp);\n  }\n  // Check if the child extent is restricting the resize\n  if (childExtent) {\n    let xExtentClamp = 0;\n    let yExtentClamp = 0;\n    if (affectsX && distX > 0) {\n      xExtentClamp = getUpperExtentClamp(startX + distX, childExtent[0][0]);\n    } else if (!affectsX && distX < 0) {\n      xExtentClamp = getLowerExtentClamp(startX + newWidth, childExtent[1][0]);\n    }\n    if (affectsY && distY > 0) {\n      yExtentClamp = getUpperExtentClamp(startY + distY, childExtent[0][1]);\n    } else if (!affectsY && distY < 0) {\n      yExtentClamp = getLowerExtentClamp(startY + newHeight, childExtent[1][1]);\n    }\n    clampX = Math.max(clampX, xExtentClamp);\n    clampY = Math.max(clampY, yExtentClamp);\n  }\n  // Check if the aspect ratio resizing of the other side is restricting the resize\n  if (keepAspectRatio) {\n    if (isHorizontal) {\n      // Check if the max dimensions might be restricting the resize\n      const aspectHeightClamp = getSizeClamp(newWidth / aspectRatio, minHeight, maxHeight) * aspectRatio;\n      clampX = Math.max(clampX, aspectHeightClamp);\n      // Check if the extent is restricting the resize\n      if (extent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsX && !affectsY && isDiagonal) {\n          aspectExtentClamp = getUpperExtentClamp(startY + originOffsetY + newWidth / aspectRatio, extent[1][1]) * aspectRatio;\n        } else {\n          aspectExtentClamp = getLowerExtentClamp(startY + originOffsetY + (affectsX ? distX : -distX) / aspectRatio, extent[0][1]) * aspectRatio;\n        }\n        clampX = Math.max(clampX, aspectExtentClamp);\n      }\n      // Check if the child extent is restricting the resize\n      if (childExtent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsX && !affectsY && isDiagonal) {\n          aspectExtentClamp = getLowerExtentClamp(startY + newWidth / aspectRatio, childExtent[1][1]) * aspectRatio;\n        } else {\n          aspectExtentClamp = getUpperExtentClamp(startY + (affectsX ? distX : -distX) / aspectRatio, childExtent[0][1]) * aspectRatio;\n        }\n        clampX = Math.max(clampX, aspectExtentClamp);\n      }\n    }\n    // Do the same thing for vertical resizing\n    if (isVertical) {\n      const aspectWidthClamp = getSizeClamp(newHeight * aspectRatio, minWidth, maxWidth) / aspectRatio;\n      clampY = Math.max(clampY, aspectWidthClamp);\n      if (extent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsY && !affectsX && isDiagonal) {\n          aspectExtentClamp = getUpperExtentClamp(startX + newHeight * aspectRatio + originOffsetX, extent[1][0]) / aspectRatio;\n        } else {\n          aspectExtentClamp = getLowerExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio + originOffsetX, extent[0][0]) / aspectRatio;\n        }\n        clampY = Math.max(clampY, aspectExtentClamp);\n      }\n      if (childExtent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsY && !affectsX && isDiagonal) {\n          aspectExtentClamp = getLowerExtentClamp(startX + newHeight * aspectRatio, childExtent[1][0]) / aspectRatio;\n        } else {\n          aspectExtentClamp = getUpperExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio, childExtent[0][0]) / aspectRatio;\n        }\n        clampY = Math.max(clampY, aspectExtentClamp);\n      }\n    }\n  }\n  distY = distY + (distY < 0 ? clampY : -clampY);\n  distX = distX + (distX < 0 ? clampX : -clampX);\n  if (keepAspectRatio) {\n    if (isDiagonal) {\n      if (newWidth > newHeight * aspectRatio) {\n        distY = (xor(affectsX, affectsY) ? -distX : distX) / aspectRatio;\n      } else {\n        distX = (xor(affectsX, affectsY) ? -distY : distY) * aspectRatio;\n      }\n    } else {\n      if (isHorizontal) {\n        distY = distX / aspectRatio;\n        affectsY = affectsX;\n      } else {\n        distX = distY * aspectRatio;\n        affectsX = affectsY;\n      }\n    }\n  }\n  const x = affectsX ? startX + distX : startX;\n  const y = affectsY ? startY + distY : startY;\n  return {\n    width: startWidth + (affectsX ? -distX : distX),\n    height: startHeight + (affectsY ? -distY : distY),\n    x: nodeOrigin[0] * distX * (!affectsX ? 1 : -1) + x,\n    y: nodeOrigin[1] * distY * (!affectsY ? 1 : -1) + y\n  };\n}\nconst initPrevValues = {\n  width: 0,\n  height: 0,\n  x: 0,\n  y: 0\n};\nconst initStartValues = {\n  ...initPrevValues,\n  pointerX: 0,\n  pointerY: 0,\n  aspectRatio: 1\n};\nfunction nodeToParentExtent(node) {\n  return [[0, 0], [node.measured.width, node.measured.height]];\n}\nfunction nodeToChildExtent(child, parent, nodeOrigin) {\n  const x = parent.position.x + child.position.x;\n  const y = parent.position.y + child.position.y;\n  const width = child.measured.width ?? 0;\n  const height = child.measured.height ?? 0;\n  const originOffsetX = nodeOrigin[0] * width;\n  const originOffsetY = nodeOrigin[1] * height;\n  return [[x - originOffsetX, y - originOffsetY], [x + width - originOffsetX, y + height - originOffsetY]];\n}\nfunction XYResizer({\n  domNode,\n  nodeId,\n  getStoreItems,\n  onChange,\n  onEnd\n}) {\n  const selection = select(domNode);\n  function update({\n    controlPosition,\n    boundaries,\n    keepAspectRatio,\n    onResizeStart,\n    onResize,\n    onResizeEnd,\n    shouldResize\n  }) {\n    let prevValues = {\n      ...initPrevValues\n    };\n    let startValues = {\n      ...initStartValues\n    };\n    const controlDirection = getControlDirection(controlPosition);\n    let node = undefined;\n    let childNodes = [];\n    let parentNode = undefined; // Needed to fix expandParent\n    let parentExtent = undefined;\n    let childExtent = undefined;\n    const dragHandler = drag().on('start', event => {\n      const {\n        nodeLookup,\n        transform,\n        snapGrid,\n        snapToGrid,\n        nodeOrigin\n      } = getStoreItems();\n      node = nodeLookup.get(nodeId);\n      if (!node) {\n        return;\n      }\n      const {\n        xSnapped,\n        ySnapped\n      } = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid\n      });\n      prevValues = {\n        width: node.measured.width ?? 0,\n        height: node.measured.height ?? 0,\n        x: node.position.x ?? 0,\n        y: node.position.y ?? 0\n      };\n      startValues = {\n        ...prevValues,\n        pointerX: xSnapped,\n        pointerY: ySnapped,\n        aspectRatio: prevValues.width / prevValues.height\n      };\n      parentNode = undefined;\n      if (node.parentId && (node.extent === 'parent' || node.expandParent)) {\n        parentNode = nodeLookup.get(node.parentId);\n        parentExtent = parentNode && node.extent === 'parent' ? nodeToParentExtent(parentNode) : undefined;\n      }\n      // Collect all child nodes to correct their relative positions when top/left changes\n      // Determine largest minimal extent the parent node is allowed to resize to\n      childNodes = [];\n      childExtent = undefined;\n      for (const [childId, child] of nodeLookup) {\n        if (child.parentId === nodeId) {\n          childNodes.push({\n            id: childId,\n            position: {\n              ...child.position\n            },\n            extent: child.extent\n          });\n          if (child.extent === 'parent' || child.expandParent) {\n            const extent = nodeToChildExtent(child, node, child.origin ?? nodeOrigin);\n            if (childExtent) {\n              childExtent = [[Math.min(extent[0][0], childExtent[0][0]), Math.min(extent[0][1], childExtent[0][1])], [Math.max(extent[1][0], childExtent[1][0]), Math.max(extent[1][1], childExtent[1][1])]];\n            } else {\n              childExtent = extent;\n            }\n          }\n        }\n      }\n      onResizeStart?.(event, {\n        ...prevValues\n      });\n    }).on('drag', event => {\n      const {\n        transform,\n        snapGrid,\n        snapToGrid,\n        nodeOrigin: storeNodeOrigin\n      } = getStoreItems();\n      const pointerPosition = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid\n      });\n      const childChanges = [];\n      if (!node) {\n        return;\n      }\n      const {\n        x: prevX,\n        y: prevY,\n        width: prevWidth,\n        height: prevHeight\n      } = prevValues;\n      const change = {};\n      const nodeOrigin = node.origin ?? storeNodeOrigin;\n      const {\n        width,\n        height,\n        x,\n        y\n      } = getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, parentExtent, childExtent);\n      const isWidthChange = width !== prevWidth;\n      const isHeightChange = height !== prevHeight;\n      const isXPosChange = x !== prevX && isWidthChange;\n      const isYPosChange = y !== prevY && isHeightChange;\n      if (!isXPosChange && !isYPosChange && !isWidthChange && !isHeightChange) {\n        return;\n      }\n      if (isXPosChange || isYPosChange || nodeOrigin[0] === 1 || nodeOrigin[1] === 1) {\n        change.x = isXPosChange ? x : prevValues.x;\n        change.y = isYPosChange ? y : prevValues.y;\n        prevValues.x = change.x;\n        prevValues.y = change.y;\n        // when top/left changes, correct the relative positions of child nodes\n        // so that they stay in the same position\n        if (childNodes.length > 0) {\n          const xChange = x - prevX;\n          const yChange = y - prevY;\n          for (const childNode of childNodes) {\n            childNode.position = {\n              x: childNode.position.x - xChange + nodeOrigin[0] * (width - prevWidth),\n              y: childNode.position.y - yChange + nodeOrigin[1] * (height - prevHeight)\n            };\n            childChanges.push(childNode);\n          }\n        }\n      }\n      if (isWidthChange || isHeightChange) {\n        change.width = isWidthChange ? width : prevValues.width;\n        change.height = isHeightChange ? height : prevValues.height;\n        prevValues.width = change.width;\n        prevValues.height = change.height;\n      }\n      // Fix expandParent when resizing from top/left\n      if (parentNode && node.expandParent) {\n        const xLimit = nodeOrigin[0] * (change.width ?? 0);\n        if (change.x && change.x < xLimit) {\n          prevValues.x = xLimit;\n          startValues.x = startValues.x - (change.x - xLimit);\n        }\n        const yLimit = nodeOrigin[1] * (change.height ?? 0);\n        if (change.y && change.y < yLimit) {\n          prevValues.y = yLimit;\n          startValues.y = startValues.y - (change.y - yLimit);\n        }\n      }\n      const direction = getResizeDirection({\n        width: prevValues.width,\n        prevWidth,\n        height: prevValues.height,\n        prevHeight,\n        affectsX: controlDirection.affectsX,\n        affectsY: controlDirection.affectsY\n      });\n      const nextValues = {\n        ...prevValues,\n        direction\n      };\n      const callResize = shouldResize?.(event, nextValues);\n      if (callResize === false) {\n        return;\n      }\n      onResize?.(event, nextValues);\n      onChange(change, childChanges);\n    }).on('end', event => {\n      onResizeEnd?.(event, {\n        ...prevValues\n      });\n      onEnd?.();\n    });\n    selection.call(dragHandler);\n  }\n  function destroy() {\n    selection.on('.drag', null);\n  }\n  return {\n    update,\n    destroy\n  };\n}\nexport { ConnectionLineType, ConnectionMode, MarkerType, PanOnScrollMode, Position, ResizeControlVariant, SelectionMode, XYDrag, XYHandle, XYMinimap, XYPanZoom, XYResizer, XY_RESIZER_HANDLE_POSITIONS, XY_RESIZER_LINE_POSITIONS, addEdge, adoptUserNodes, areConnectionMapsEqual, boxToRect, calcAutoPan, calculateNodePosition, clamp, clampPosition, clampPositionToParent, createMarkerIds, devWarn, elementSelectionKeys, errorMessages, evaluateAbsolutePosition, fitView, getBezierEdgeCenter, getBezierPath, getBoundsOfBoxes, getBoundsOfRects, getConnectedEdges, getConnectionStatus, getDimensions, getEdgeCenter, getEdgePosition, getElementsToRemove, getElevatedEdgeZIndex, getEventPosition, getFitViewNodes, getHandleBounds, getHandlePosition, getHostForElement, getIncomers, getInternalNodesBounds, getMarkerId, getNodeDimensions, getNodePositionWithOrigin, getNodeToolbarTransform, getNodesBounds, getNodesInside, getOutgoers, getOverlappingArea, getPointerPosition, getSmoothStepPath, getStraightPath, getViewportForBounds, handleConnectionChange, handleExpandParent, infiniteExtent, initialConnection, isCoordinateExtent, isEdgeBase, isEdgeVisible, isInputDOMNode, isInternalNodeBase, isMacOs, isMouseEvent, isNodeBase, isNumeric, isRectObject, nodeHasDimensions, nodeToBox, nodeToRect, oppositePosition, panBy, pointToRendererPoint, reconnectEdge, rectToBox, rendererPointToPoint, shallowNodeData, snapPosition, updateAbsolutePositions, updateConnectionLookup, updateNodeInternals };","map":{"version":3,"names":["drag","select","pointer","zoom","zoomIdentity","zoomTransform","errorMessages","error001","error002","error003","nodeType","error004","error005","error006","error007","id","error009","type","error008","handleType","sourceHandle","targetHandle","error010","error011","edgeType","error012","error013","lib","infiniteExtent","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","elementSelectionKeys","ConnectionMode","PanOnScrollMode","SelectionMode","initialConnection","inProgress","isValid","from","fromHandle","fromPosition","fromNode","to","toHandle","toPosition","toNode","ConnectionLineType","MarkerType","Position","oppositePosition","Left","Right","Top","Bottom","areConnectionMapsEqual","a","b","size","key","keys","has","handleConnectionChange","cb","diff","forEach","connection","push","length","getConnectionStatus","isEdgeBase","element","isNodeBase","isInternalNodeBase","getOutgoers","node","nodes","edges","outgoerIds","Set","edge","source","add","target","filter","n","getIncomers","incomersIds","getNodePositionWithOrigin","nodeOrigin","width","height","getNodeDimensions","origin","offsetX","offsetY","x","position","y","getNodesBounds","params","nodeLookup","undefined","process","env","NODE_ENV","console","warn","box","reduce","currBox","nodeOrId","isId","currentNode","get","nodeBox","nodeToBox","x2","y2","getBoundsOfBoxes","Infinity","boxToRect","getInternalNodesBounds","getNodesInside","rect","tx","ty","tScale","partially","excludeNonSelectableNodes","paneRect","pointToRendererPoint","visibleNodes","values","measured","selectable","hidden","initialWidth","initialHeight","overlappingArea","getOverlappingArea","nodeToRect","area","partiallyVisible","forceInitialRender","internals","handleBounds","isVisible","dragging","getConnectedEdges","nodeIds","getFitViewNodes","options","fitViewNodes","Map","optionNodeIds","map","includeHiddenNodes","set","fitView","panZoom","minZoom","maxZoom","Promise","resolve","bounds","viewport","getViewportForBounds","padding","setViewport","duration","calculateNodePosition","nodeId","nextPosition","nodeExtent","onError","parentNode","parentId","parentX","parentY","positionAbsolute","extent","expandParent","parentWidth","parentHeight","isCoordinateExtent","clampPosition","getElementsToRemove","nodesToRemove","edgesToRemove","onBeforeDelete","matchingNodes","deletable","isIncluded","parentHit","find","edgeIds","deletableEdges","connectedEdges","matchingEdges","e","onBeforeDeleteResult","clamp","val","min","max","Math","dimensions","clampPositionToParent","childPosition","childDimensions","parent","calcAutoPanVelocity","value","abs","calcAutoPan","pos","speed","distance","xMovement","yMovement","box1","box2","rectToBox","getBoundsOfRects","rect1","rect2","rectA","rectB","xOverlap","yOverlap","ceil","isRectObject","obj","isNumeric","isNaN","isFinite","devWarn","message","snapPosition","snapGrid","round","snapToGrid","rendererPointToPoint","xZoom","yZoom","clampedZoom","boundsCenterX","boundsCenterY","isMacOs","navigator","userAgent","indexOf","nodeHasDimensions","evaluateAbsolutePosition","nextParentId","getPointerPosition","event","transform","getEventPosition","pointerPos","xSnapped","ySnapped","getDimensions","offsetWidth","offsetHeight","getHostForElement","getRootNode","window","document","inputTags","isInputDOMNode","composedPath","isInput","includes","nodeName","hasAttribute","closest","isMouseEvent","isMouse","evtX","clientX","touches","evtY","clientY","left","top","getHandleBounds","nodeElement","nodeBounds","handles","querySelectorAll","Array","handle","getBoundingClientRect","getAttribute","getBezierEdgeCenter","sourceX","sourceY","targetX","targetY","sourceControlX","sourceControlY","targetControlX","targetControlY","centerX","centerY","calculateControlOffset","curvature","sqrt","getControlWithCurvature","x1","y1","c","getBezierPath","sourcePosition","targetPosition","labelX","labelY","getEdgeCenter","xOffset","yOffset","getElevatedEdgeZIndex","sourceNode","targetNode","selected","zIndex","elevateOnSelect","edgeOrConnectedNodeSelected","selectedZIndex","z","isEdgeVisible","edgeBox","viewRect","getEdgeId","connectionExists","some","el","addEdge","edgeParams","concat","reconnectEdge","oldEdge","newConnection","shouldReplaceId","oldEdgeId","rest","foundEdge","getStraightPath","handleDirections","getDirection","pow","getPoints","center","offset","sourceDir","targetDir","sourceGapped","targetGapped","dir","dirAccessor","currDir","points","sourceGapOffset","targetGapOffset","defaultCenterX","defaultCenterY","defaultOffsetX","defaultOffsetY","verticalSplit","horizontalSplit","sourceTarget","targetSource","gapOffset","dirAccessorOpposite","isSameDir","sourceGtTargetOppo","sourceLtTargetOppo","flipSourceTarget","sourceGapPoint","targetGapPoint","maxXDistance","maxYDistance","pathPoints","getBend","bendSize","xDir","yDir","getSmoothStepPath","borderRadius","path","res","p","i","segment","isNodeInitialized","getEdgePosition","sourceHandleBounds","toHandleBounds","targetHandleBounds","getHandle$1","connectionMode","Strict","getHandlePosition","fallbackPosition","handleId","d","getMarkerId","marker","idPrefix","Object","sort","join","createMarkerIds","defaultColor","defaultMarkerStart","defaultMarkerEnd","ids","markers","markerStart","markerEnd","markerId","color","localeCompare","getNodeToolbarTransform","nodeRect","align","alignmentOffset","shift","defaultOptions","elevateNodesOnSelect","defaults","adoptUserNodesDefaultOptions","checkEquality","mergeObjects","base","incoming","result","updateAbsolutePositions","parentLookup","_options","updateChildNode","positionWithOrigin","clampedPosition","adoptUserNodes","tmpLookup","selectedNodeZ","clear","userNode","internalNode","calculateZ","updateParentLookup","childNodes","calculateChildXYZ","positionChanged","childNode","absolutePosition","childZ","parentZ","handleExpandParent","children","changes","parentExpansions","child","parentRect","expandedRect","xChange","yChange","newWidth","newHeight","widthChange","heightChange","setAttributes","updateNodeInternals","updates","domNode","viewportNode","querySelector","updatedInternals","style","getComputedStyle","m22","DOMMatrixReadOnly","parentExpandChildren","update","dimensionChanged","doUpdate","force","parentExpandChanges","panBy","delta","translateExtent","nextViewport","setViewportConstrained","transformChanged","k","updateConnectionLookup","connectionLookup","edgeLookup","sourceKey","targetKey","prevSource","prevTarget","edgeId","shallowNodeData","_a","isArray","_b","is","data","isParentSelected","hasSelector","selector","current","matches","parentElement","getDragItems","nodesDraggable","mousePos","dragItems","draggable","getEventHandlerParams","nodesFromDragItems","dragItem","XYDrag","onNodeMouseDown","getStoreItems","onDragStart","onDrag","onDragStop","lastPos","autoPanId","autoPanStarted","mousePosition","containerBounds","dragStarted","d3Selection","abortDrag","noDragClassName","handleSelector","isSelectable","nodeClickDistance","updateNodes","dragEvent","onNodeDrag","onSelectionDrag","updateNodePositions","hasChange","nodesBox","adjustedNodeExtent","currentNodes","autoPan","autoPanSpeed","requestAnimationFrame","startDrag","multiSelectionActive","selectNodesOnDrag","onNodeDragStart","onSelectionDragStart","unselectNodesAndEdges","sourceEvent","d3DragInstance","clickDistance","on","nodeDragThreshold","autoPanOnNodeDrag","cancelAnimationFrame","onNodeDragStop","onSelectionDragStop","isDraggable","button","call","destroy","getNodesWithinDistance","ADDITIONAL_DISTANCE","getClosestHandle","connectionRadius","closestHandles","minDistance","closeNodes","allHandles","oppositeHandleType","getHandle","withAbsolutePosition","h","getHandleType","edgeUpdaterType","handleDomNode","classList","contains","isConnectionValid","isInsideConnectionRadius","isHandleValid","alwaysValid","onPointerDown","isTarget","autoPanOnConnect","flowId","cancelConnection","onConnectStart","onConnect","onConnectEnd","isValidConnection","onReconnectEnd","updateConnection","getTransform","getFromHandle","doc","closestHandle","clickedHandle","elementFromPoint","fromHandleInternal","fromNodeInternal","previousConnection","onPointerMove","onPointerUp","isValidHandle","fromNodeId","fromHandleId","fromType","connectionState","finalConnectionState","removeEventListener","addEventListener","handleBelow","handleToCheck","handleNodeId","connectable","connectableEnd","isConnectable","XYHandle","XYMinimap","getViewScale","selection","zoomStep","pannable","zoomable","inversePan","zoomHandler","pinchDelta","deltaY","deltaMode","nextZoom","scaleTo","panStart","panStartHandler","panHandler","panCurrent","panDelta","moveScale","log","zoomAndPanHandler","viewChanged","prevViewport","eventViewport","transformToViewport","viewportToTransform","translate","scale","isWrappedWithClass","className","isRightClickPan","panOnDrag","usedButton","getD3Transition","onEnd","hasDuration","transition","wheelDelta","factor","ctrlKey","createPanOnScrollHandler","zoomPanValues","noWheelClassName","d3Zoom","panOnScrollMode","panOnScrollSpeed","zoomOnPinch","onPanZoomStart","onPanZoom","onPanZoomEnd","preventDefault","stopImmediatePropagation","currentZoom","property","point","deltaNormalize","deltaX","Vertical","Horizontal","shiftKey","translateBy","internal","clearTimeout","panScrollTimeout","isPanScrolling","setTimeout","createZoomOnScrollHandler","preventScrolling","d3ZoomHandler","preventZoom","createPanZoomStartHandler","onDraggingChange","mouseButton","isZoomingOrPanning","createPanZoomHandler","onPaneContextMenu","onTransformChange","usedRightMouseButton","sync","createPanZoomEndHandler","panOnScroll","timerId","createFilter","zoomActivationKeyPressed","zoomOnScroll","zoomOnDoubleClick","userSelectionActive","noPanClassName","zoomScroll","pinchZoom","buttonAllowed","XYPanZoom","paneClickDistance","bbox","d3ZoomInstance","scaleExtent","d3DblClickZoomHandler","setTransform","isPanOnScroll","wheelHandler","passive","startHandler","panZoomHandler","panZoomEndHandler","nextTransform","contrainedTransform","constrain","syncViewport","currentTransform","getViewport","scaleBy","setScaleExtent","setTranslateExtent","setClickDistance","validDistance","ResizeControlVariant","XY_RESIZER_HANDLE_POSITIONS","XY_RESIZER_LINE_POSITIONS","getResizeDirection","prevWidth","prevHeight","affectsX","affectsY","deltaWidth","deltaHeight","direction","getControlDirection","controlPosition","isHorizontal","isVertical","getLowerExtentClamp","lowerExtent","lowerBound","getUpperExtentClamp","upperExtent","upperBound","getSizeClamp","minSize","maxSize","xor","getDimensionsAfterResize","startValues","controlDirection","pointerPosition","boundaries","keepAspectRatio","childExtent","isDiagonal","minWidth","maxWidth","minHeight","maxHeight","startX","startY","startWidth","startHeight","aspectRatio","distX","floor","pointerX","distY","pointerY","originOffsetX","originOffsetY","clampX","clampY","xExtentClamp","yExtentClamp","aspectHeightClamp","aspectExtentClamp","aspectWidthClamp","initPrevValues","initStartValues","nodeToParentExtent","nodeToChildExtent","XYResizer","onChange","onResizeStart","onResize","onResizeEnd","shouldResize","prevValues","parentExtent","dragHandler","childId","storeNodeOrigin","childChanges","prevX","prevY","change","isWidthChange","isHeightChange","isXPosChange","isYPosChange","xLimit","yLimit","nextValues","callResize"],"sources":["/Users/rhenzong/Documents/GitHub/pvc-webdashboard/node_modules/@xyflow/system/dist/esm/index.mjs"],"sourcesContent":["import { drag } from 'd3-drag';\nimport { select, pointer } from 'd3-selection';\nimport { zoom, zoomIdentity, zoomTransform } from 'd3-zoom';\n\nconst errorMessages = {\n    error001: () => '[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001',\n    error002: () => \"It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.\",\n    error003: (nodeType) => `Node type \"${nodeType}\" not found. Using fallback type \"default\".`,\n    error004: () => 'The React Flow parent container needs a width and a height to render the graph.',\n    error005: () => 'Only child nodes can use a parent extent.',\n    error006: () => \"Can't create edge. An edge needs a source and a target.\",\n    error007: (id) => `The old edge with id=${id} does not exist.`,\n    error009: (type) => `Marker type \"${type}\" doesn't exist.`,\n    error008: (handleType, { id, sourceHandle, targetHandle }) => `Couldn't create edge for ${handleType} handle id: \"${handleType === 'source' ? sourceHandle : targetHandle}\", edge id: ${id}.`,\n    error010: () => 'Handle: No node id found. Make sure to only use a Handle inside a custom Node.',\n    error011: (edgeType) => `Edge type \"${edgeType}\" not found. Using fallback type \"default\".`,\n    error012: (id) => `Node with id \"${id}\" does not exist, it may have been removed. This can happen when a node is deleted before the \"onNodeClick\" handler is called.`,\n    error013: (lib = 'react') => `It seems that you haven't loaded the styles. Please import '@xyflow/${lib}/dist/style.css' or base.css to make sure everything is working properly.`,\n};\nconst infiniteExtent = [\n    [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY],\n    [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY],\n];\nconst elementSelectionKeys = ['Enter', ' ', 'Escape'];\n\nvar ConnectionMode;\n(function (ConnectionMode) {\n    ConnectionMode[\"Strict\"] = \"strict\";\n    ConnectionMode[\"Loose\"] = \"loose\";\n})(ConnectionMode || (ConnectionMode = {}));\nvar PanOnScrollMode;\n(function (PanOnScrollMode) {\n    PanOnScrollMode[\"Free\"] = \"free\";\n    PanOnScrollMode[\"Vertical\"] = \"vertical\";\n    PanOnScrollMode[\"Horizontal\"] = \"horizontal\";\n})(PanOnScrollMode || (PanOnScrollMode = {}));\nvar SelectionMode;\n(function (SelectionMode) {\n    SelectionMode[\"Partial\"] = \"partial\";\n    SelectionMode[\"Full\"] = \"full\";\n})(SelectionMode || (SelectionMode = {}));\nconst initialConnection = {\n    inProgress: false,\n    isValid: null,\n    from: null,\n    fromHandle: null,\n    fromPosition: null,\n    fromNode: null,\n    to: null,\n    toHandle: null,\n    toPosition: null,\n    toNode: null,\n};\n\nvar ConnectionLineType;\n(function (ConnectionLineType) {\n    ConnectionLineType[\"Bezier\"] = \"default\";\n    ConnectionLineType[\"Straight\"] = \"straight\";\n    ConnectionLineType[\"Step\"] = \"step\";\n    ConnectionLineType[\"SmoothStep\"] = \"smoothstep\";\n    ConnectionLineType[\"SimpleBezier\"] = \"simplebezier\";\n})(ConnectionLineType || (ConnectionLineType = {}));\nvar MarkerType;\n(function (MarkerType) {\n    MarkerType[\"Arrow\"] = \"arrow\";\n    MarkerType[\"ArrowClosed\"] = \"arrowclosed\";\n})(MarkerType || (MarkerType = {}));\n\nvar Position;\n(function (Position) {\n    Position[\"Left\"] = \"left\";\n    Position[\"Top\"] = \"top\";\n    Position[\"Right\"] = \"right\";\n    Position[\"Bottom\"] = \"bottom\";\n})(Position || (Position = {}));\nconst oppositePosition = {\n    [Position.Left]: Position.Right,\n    [Position.Right]: Position.Left,\n    [Position.Top]: Position.Bottom,\n    [Position.Bottom]: Position.Top,\n};\n\n/**\n * @internal\n */\nfunction areConnectionMapsEqual(a, b) {\n    if (!a && !b) {\n        return true;\n    }\n    if (!a || !b || a.size !== b.size) {\n        return false;\n    }\n    if (!a.size && !b.size) {\n        return true;\n    }\n    for (const key of a.keys()) {\n        if (!b.has(key)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * We call the callback for all connections in a that are not in b\n *\n * @internal\n */\nfunction handleConnectionChange(a, b, cb) {\n    if (!cb) {\n        return;\n    }\n    const diff = [];\n    a.forEach((connection, key) => {\n        if (!b?.has(key)) {\n            diff.push(connection);\n        }\n    });\n    if (diff.length) {\n        cb(diff);\n    }\n}\nfunction getConnectionStatus(isValid) {\n    return isValid === null ? null : isValid ? 'valid' : 'invalid';\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Test whether an object is useable as an Edge\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Edge if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Edge\n */\nconst isEdgeBase = (element) => 'id' in element && 'source' in element && 'target' in element;\n/**\n * Test whether an object is useable as a Node\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Node if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Node\n */\nconst isNodeBase = (element) => 'id' in element && 'position' in element && !('source' in element) && !('target' in element);\nconst isInternalNodeBase = (element) => 'id' in element && 'internals' in element && !('source' in element) && !('target' in element);\n/**\n * Pass in a node, and get connected nodes where edge.source === node.id\n * @public\n * @param node - The node to get the connected nodes from\n * @param nodes - The array of all nodes\n * @param edges - The array of all edges\n * @returns An array of nodes that are connected over eges where the source is the given node\n */\nconst getOutgoers = (node, nodes, edges) => {\n    if (!node.id) {\n        return [];\n    }\n    const outgoerIds = new Set();\n    edges.forEach((edge) => {\n        if (edge.source === node.id) {\n            outgoerIds.add(edge.target);\n        }\n    });\n    return nodes.filter((n) => outgoerIds.has(n.id));\n};\n/**\n * Pass in a node, and get connected nodes where edge.target === node.id\n * @public\n * @param node - The node to get the connected nodes from\n * @param nodes - The array of all nodes\n * @param edges - The array of all edges\n * @returns An array of nodes that are connected over eges where the target is the given node\n */\nconst getIncomers = (node, nodes, edges) => {\n    if (!node.id) {\n        return [];\n    }\n    const incomersIds = new Set();\n    edges.forEach((edge) => {\n        if (edge.target === node.id) {\n            incomersIds.add(edge.source);\n        }\n    });\n    return nodes.filter((n) => incomersIds.has(n.id));\n};\nconst getNodePositionWithOrigin = (node, nodeOrigin = [0, 0]) => {\n    const { width, height } = getNodeDimensions(node);\n    const origin = node.origin ?? nodeOrigin;\n    const offsetX = width * origin[0];\n    const offsetY = height * origin[1];\n    return {\n        x: node.position.x - offsetX,\n        y: node.position.y - offsetY,\n    };\n};\n/**\n * Internal function for determining a bounding box that contains all given nodes in an array.\n * @public\n * @remarks Useful when combined with {@link getViewportForBounds} to calculate the correct transform to fit the given nodes in a viewport.\n * @param nodes - Nodes to calculate the bounds for\n * @param params.nodeOrigin - Origin of the nodes: [0, 0] - top left, [0.5, 0.5] - center\n * @returns Bounding box enclosing all nodes\n */\nconst getNodesBounds = (nodes, params = { nodeOrigin: [0, 0], nodeLookup: undefined }) => {\n    if (process.env.NODE_ENV === 'development' && !params.nodeLookup) {\n        console.warn('Please use `getNodesBounds` from `useReactFlow`/`useSvelteFlow` hook to ensure correct values for sub flows. If not possible, you have to provide a nodeLookup to support sub flows.');\n    }\n    if (nodes.length === 0) {\n        return { x: 0, y: 0, width: 0, height: 0 };\n    }\n    const box = nodes.reduce((currBox, nodeOrId) => {\n        const isId = typeof nodeOrId === 'string';\n        let currentNode = !params.nodeLookup && !isId ? nodeOrId : undefined;\n        if (params.nodeLookup) {\n            currentNode = isId\n                ? params.nodeLookup.get(nodeOrId)\n                : !isInternalNodeBase(nodeOrId)\n                    ? params.nodeLookup.get(nodeOrId.id)\n                    : nodeOrId;\n        }\n        const nodeBox = currentNode ? nodeToBox(currentNode, params.nodeOrigin) : { x: 0, y: 0, x2: 0, y2: 0 };\n        return getBoundsOfBoxes(currBox, nodeBox);\n    }, { x: Infinity, y: Infinity, x2: -Infinity, y2: -Infinity });\n    return boxToRect(box);\n};\n/**\n * Determines a bounding box that contains all given nodes in an array\n * @internal\n */\nconst getInternalNodesBounds = (nodeLookup, params = {}) => {\n    if (nodeLookup.size === 0) {\n        return { x: 0, y: 0, width: 0, height: 0 };\n    }\n    let box = { x: Infinity, y: Infinity, x2: -Infinity, y2: -Infinity };\n    nodeLookup.forEach((node) => {\n        if (params.filter === undefined || params.filter(node)) {\n            const nodeBox = nodeToBox(node);\n            box = getBoundsOfBoxes(box, nodeBox);\n        }\n    });\n    return boxToRect(box);\n};\nconst getNodesInside = (nodes, rect, [tx, ty, tScale] = [0, 0, 1], partially = false, \n// set excludeNonSelectableNodes if you want to pay attention to the nodes \"selectable\" attribute\nexcludeNonSelectableNodes = false) => {\n    const paneRect = {\n        ...pointToRendererPoint(rect, [tx, ty, tScale]),\n        width: rect.width / tScale,\n        height: rect.height / tScale,\n    };\n    const visibleNodes = [];\n    for (const node of nodes.values()) {\n        const { measured, selectable = true, hidden = false } = node;\n        if ((excludeNonSelectableNodes && !selectable) || hidden) {\n            continue;\n        }\n        const width = measured.width ?? node.width ?? node.initialWidth ?? null;\n        const height = measured.height ?? node.height ?? node.initialHeight ?? null;\n        const overlappingArea = getOverlappingArea(paneRect, nodeToRect(node));\n        const area = (width ?? 0) * (height ?? 0);\n        const partiallyVisible = partially && overlappingArea > 0;\n        const forceInitialRender = !node.internals.handleBounds;\n        const isVisible = forceInitialRender || partiallyVisible || overlappingArea >= area;\n        if (isVisible || node.dragging) {\n            visibleNodes.push(node);\n        }\n    }\n    return visibleNodes;\n};\n/**\n * Get all connecting edges for a given set of nodes\n * @param nodes - Nodes you want to get the connected edges for\n * @param edges - All edges\n * @returns Array of edges that connect any of the given nodes with each other\n */\nconst getConnectedEdges = (nodes, edges) => {\n    const nodeIds = new Set();\n    nodes.forEach((node) => {\n        nodeIds.add(node.id);\n    });\n    return edges.filter((edge) => nodeIds.has(edge.source) || nodeIds.has(edge.target));\n};\nfunction getFitViewNodes(nodeLookup, options) {\n    const fitViewNodes = new Map();\n    const optionNodeIds = options?.nodes ? new Set(options.nodes.map((node) => node.id)) : null;\n    nodeLookup.forEach((n) => {\n        const isVisible = n.measured.width && n.measured.height && (options?.includeHiddenNodes || !n.hidden);\n        if (isVisible && (!optionNodeIds || optionNodeIds.has(n.id))) {\n            fitViewNodes.set(n.id, n);\n        }\n    });\n    return fitViewNodes;\n}\nasync function fitView({ nodes, width, height, panZoom, minZoom, maxZoom }, options) {\n    if (nodes.size === 0) {\n        return Promise.resolve(false);\n    }\n    const bounds = getInternalNodesBounds(nodes);\n    const viewport = getViewportForBounds(bounds, width, height, options?.minZoom ?? minZoom, options?.maxZoom ?? maxZoom, options?.padding ?? 0.1);\n    await panZoom.setViewport(viewport, { duration: options?.duration });\n    return Promise.resolve(true);\n}\n/**\n * This function calculates the next position of a node, taking into account the node's extent, parent node, and origin.\n *\n * @internal\n * @returns position, positionAbsolute\n */\nfunction calculateNodePosition({ nodeId, nextPosition, nodeLookup, nodeOrigin = [0, 0], nodeExtent, onError, }) {\n    const node = nodeLookup.get(nodeId);\n    const parentNode = node.parentId ? nodeLookup.get(node.parentId) : undefined;\n    const { x: parentX, y: parentY } = parentNode ? parentNode.internals.positionAbsolute : { x: 0, y: 0 };\n    const origin = node.origin ?? nodeOrigin;\n    let extent = nodeExtent;\n    if (node.extent === 'parent' && !node.expandParent) {\n        if (!parentNode) {\n            onError?.('005', errorMessages['error005']());\n        }\n        else {\n            const parentWidth = parentNode.measured.width;\n            const parentHeight = parentNode.measured.height;\n            if (parentWidth && parentHeight) {\n                extent = [\n                    [parentX, parentY],\n                    [parentX + parentWidth, parentY + parentHeight],\n                ];\n            }\n        }\n    }\n    else if (parentNode && isCoordinateExtent(node.extent)) {\n        extent = [\n            [node.extent[0][0] + parentX, node.extent[0][1] + parentY],\n            [node.extent[1][0] + parentX, node.extent[1][1] + parentY],\n        ];\n    }\n    const positionAbsolute = isCoordinateExtent(extent)\n        ? clampPosition(nextPosition, extent, node.measured)\n        : nextPosition;\n    return {\n        position: {\n            x: positionAbsolute.x - parentX + node.measured.width * origin[0],\n            y: positionAbsolute.y - parentY + node.measured.height * origin[1],\n        },\n        positionAbsolute,\n    };\n}\n/**\n * Pass in nodes & edges to delete, get arrays of nodes and edges that actually can be deleted\n * @internal\n * @param param.nodesToRemove - The nodes to remove\n * @param param.edgesToRemove - The edges to remove\n * @param param.nodes - All nodes\n * @param param.edges - All edges\n * @param param.onBeforeDelete - Callback to check which nodes and edges can be deleted\n * @returns nodes: nodes that can be deleted, edges: edges that can be deleted\n */\nasync function getElementsToRemove({ nodesToRemove = [], edgesToRemove = [], nodes, edges, onBeforeDelete, }) {\n    const nodeIds = new Set(nodesToRemove.map((node) => node.id));\n    const matchingNodes = [];\n    for (const node of nodes) {\n        if (node.deletable === false) {\n            continue;\n        }\n        const isIncluded = nodeIds.has(node.id);\n        const parentHit = !isIncluded && node.parentId && matchingNodes.find((n) => n.id === node.parentId);\n        if (isIncluded || parentHit) {\n            matchingNodes.push(node);\n        }\n    }\n    const edgeIds = new Set(edgesToRemove.map((edge) => edge.id));\n    const deletableEdges = edges.filter((edge) => edge.deletable !== false);\n    const connectedEdges = getConnectedEdges(matchingNodes, deletableEdges);\n    const matchingEdges = connectedEdges;\n    for (const edge of deletableEdges) {\n        const isIncluded = edgeIds.has(edge.id);\n        if (isIncluded && !matchingEdges.find((e) => e.id === edge.id)) {\n            matchingEdges.push(edge);\n        }\n    }\n    if (!onBeforeDelete) {\n        return {\n            edges: matchingEdges,\n            nodes: matchingNodes,\n        };\n    }\n    const onBeforeDeleteResult = await onBeforeDelete({\n        nodes: matchingNodes,\n        edges: matchingEdges,\n    });\n    if (typeof onBeforeDeleteResult === 'boolean') {\n        return onBeforeDeleteResult ? { edges: matchingEdges, nodes: matchingNodes } : { edges: [], nodes: [] };\n    }\n    return onBeforeDeleteResult;\n}\n\nconst clamp = (val, min = 0, max = 1) => Math.min(Math.max(val, min), max);\nconst clampPosition = (position = { x: 0, y: 0 }, extent, dimensions) => ({\n    x: clamp(position.x, extent[0][0], extent[1][0] - (dimensions?.width ?? 0)),\n    y: clamp(position.y, extent[0][1], extent[1][1] - (dimensions?.height ?? 0)),\n});\nfunction clampPositionToParent(childPosition, childDimensions, parent) {\n    const { width: parentWidth, height: parentHeight } = getNodeDimensions(parent);\n    const { x: parentX, y: parentY } = parent.internals.positionAbsolute;\n    return clampPosition(childPosition, [\n        [parentX, parentY],\n        [parentX + parentWidth, parentY + parentHeight],\n    ], childDimensions);\n}\n/**\n * Calculates the velocity of panning when the mouse is close to the edge of the canvas\n * @internal\n * @param value - One dimensional poition of the mouse (x or y)\n * @param min - Minimal position on canvas before panning starts\n * @param max - Maximal position on canvas before panning starts\n * @returns - A number between 0 and 1 that represents the velocity of panning\n */\nconst calcAutoPanVelocity = (value, min, max) => {\n    if (value < min) {\n        return clamp(Math.abs(value - min), 1, min) / min;\n    }\n    else if (value > max) {\n        return -clamp(Math.abs(value - max), 1, min) / min;\n    }\n    return 0;\n};\nconst calcAutoPan = (pos, bounds, speed = 15, distance = 40) => {\n    const xMovement = calcAutoPanVelocity(pos.x, distance, bounds.width - distance) * speed;\n    const yMovement = calcAutoPanVelocity(pos.y, distance, bounds.height - distance) * speed;\n    return [xMovement, yMovement];\n};\nconst getBoundsOfBoxes = (box1, box2) => ({\n    x: Math.min(box1.x, box2.x),\n    y: Math.min(box1.y, box2.y),\n    x2: Math.max(box1.x2, box2.x2),\n    y2: Math.max(box1.y2, box2.y2),\n});\nconst rectToBox = ({ x, y, width, height }) => ({\n    x,\n    y,\n    x2: x + width,\n    y2: y + height,\n});\nconst boxToRect = ({ x, y, x2, y2 }) => ({\n    x,\n    y,\n    width: x2 - x,\n    height: y2 - y,\n});\nconst nodeToRect = (node, nodeOrigin = [0, 0]) => {\n    const { x, y } = isInternalNodeBase(node)\n        ? node.internals.positionAbsolute\n        : getNodePositionWithOrigin(node, nodeOrigin);\n    return {\n        x,\n        y,\n        width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n        height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0,\n    };\n};\nconst nodeToBox = (node, nodeOrigin = [0, 0]) => {\n    const { x, y } = isInternalNodeBase(node)\n        ? node.internals.positionAbsolute\n        : getNodePositionWithOrigin(node, nodeOrigin);\n    return {\n        x,\n        y,\n        x2: x + (node.measured?.width ?? node.width ?? node.initialWidth ?? 0),\n        y2: y + (node.measured?.height ?? node.height ?? node.initialHeight ?? 0),\n    };\n};\nconst getBoundsOfRects = (rect1, rect2) => boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\nconst getOverlappingArea = (rectA, rectB) => {\n    const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));\n    const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));\n    return Math.ceil(xOverlap * yOverlap);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isRectObject = (obj) => isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nconst isNumeric = (n) => !isNaN(n) && isFinite(n);\n// used for a11y key board controls for nodes and edges\nconst devWarn = (id, message) => {\n    if (process.env.NODE_ENV === 'development') {\n        console.warn(`[React Flow]: ${message} Help: https://reactflow.dev/error#${id}`);\n    }\n};\nconst snapPosition = (position, snapGrid = [1, 1]) => {\n    return {\n        x: snapGrid[0] * Math.round(position.x / snapGrid[0]),\n        y: snapGrid[1] * Math.round(position.y / snapGrid[1]),\n    };\n};\nconst pointToRendererPoint = ({ x, y }, [tx, ty, tScale], snapToGrid = false, snapGrid = [1, 1]) => {\n    const position = {\n        x: (x - tx) / tScale,\n        y: (y - ty) / tScale,\n    };\n    return snapToGrid ? snapPosition(position, snapGrid) : position;\n};\nconst rendererPointToPoint = ({ x, y }, [tx, ty, tScale]) => {\n    return {\n        x: x * tScale + tx,\n        y: y * tScale + ty,\n    };\n};\n/**\n * Returns a viewport that encloses the given bounds with optional padding.\n * @public\n * @remarks You can determine bounds of nodes with {@link getNodesBounds} and {@link getBoundsOfRects}\n * @param bounds - Bounds to fit inside viewport\n * @param width - Width of the viewport\n * @param height  - Height of the viewport\n * @param minZoom - Minimum zoom level of the resulting viewport\n * @param maxZoom - Maximum zoom level of the resulting viewport\n * @param padding - Optional padding around the bounds\n * @returns A transforned {@link Viewport} that encloses the given bounds which you can pass to e.g. {@link setViewport}\n * @example\n * const { x, y, zoom } = getViewportForBounds(\n  { x: 0, y: 0, width: 100, height: 100},\n  1200, 800, 0.5, 2);\n */\nconst getViewportForBounds = (bounds, width, height, minZoom, maxZoom, padding) => {\n    const xZoom = width / (bounds.width * (1 + padding));\n    const yZoom = height / (bounds.height * (1 + padding));\n    const zoom = Math.min(xZoom, yZoom);\n    const clampedZoom = clamp(zoom, minZoom, maxZoom);\n    const boundsCenterX = bounds.x + bounds.width / 2;\n    const boundsCenterY = bounds.y + bounds.height / 2;\n    const x = width / 2 - boundsCenterX * clampedZoom;\n    const y = height / 2 - boundsCenterY * clampedZoom;\n    return { x, y, zoom: clampedZoom };\n};\nconst isMacOs = () => typeof navigator !== 'undefined' && navigator?.userAgent?.indexOf('Mac') >= 0;\nfunction isCoordinateExtent(extent) {\n    return extent !== undefined && extent !== 'parent';\n}\nfunction getNodeDimensions(node) {\n    return {\n        width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n        height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0,\n    };\n}\nfunction nodeHasDimensions(node) {\n    return ((node.measured?.width ?? node.width ?? node.initialWidth) !== undefined &&\n        (node.measured?.height ?? node.height ?? node.initialHeight) !== undefined);\n}\n/**\n * Convert child position to aboslute position\n *\n * @internal\n * @param position\n * @param parentId\n * @param nodeLookup\n * @param nodeOrigin\n * @returns an internal node with an absolute position\n */\nfunction evaluateAbsolutePosition(position, dimensions = { width: 0, height: 0 }, parentId, nodeLookup, nodeOrigin) {\n    let nextParentId = parentId;\n    const positionAbsolute = { ...position };\n    while (nextParentId) {\n        const parent = nodeLookup.get(nextParentId);\n        nextParentId = parent?.parentId;\n        if (parent) {\n            const origin = parent.origin || nodeOrigin;\n            positionAbsolute.x += parent.internals.positionAbsolute.x - (dimensions.width ?? 0) * origin[0];\n            positionAbsolute.y += parent.internals.positionAbsolute.y - (dimensions.height ?? 0) * origin[1];\n        }\n    }\n    return positionAbsolute;\n}\n\nfunction getPointerPosition(event, { snapGrid = [0, 0], snapToGrid = false, transform }) {\n    const { x, y } = getEventPosition(event);\n    const pointerPos = pointToRendererPoint({ x, y }, transform);\n    const { x: xSnapped, y: ySnapped } = snapToGrid ? snapPosition(pointerPos, snapGrid) : pointerPos;\n    // we need the snapped position in order to be able to skip unnecessary drag events\n    return {\n        xSnapped,\n        ySnapped,\n        ...pointerPos,\n    };\n}\nconst getDimensions = (node) => ({\n    width: node.offsetWidth,\n    height: node.offsetHeight,\n});\nconst getHostForElement = (element) => element.getRootNode?.() || window?.document;\nconst inputTags = ['INPUT', 'SELECT', 'TEXTAREA'];\nfunction isInputDOMNode(event) {\n    // using composed path for handling shadow dom\n    const target = (event.composedPath?.()?.[0] || event.target);\n    const isInput = inputTags.includes(target?.nodeName) || target?.hasAttribute('contenteditable');\n    // when an input field is focused we don't want to trigger deletion or movement of nodes\n    return isInput || !!target?.closest('.nokey');\n}\nconst isMouseEvent = (event) => 'clientX' in event;\nconst getEventPosition = (event, bounds) => {\n    const isMouse = isMouseEvent(event);\n    const evtX = isMouse ? event.clientX : event.touches?.[0].clientX;\n    const evtY = isMouse ? event.clientY : event.touches?.[0].clientY;\n    return {\n        x: evtX - (bounds?.left ?? 0),\n        y: evtY - (bounds?.top ?? 0),\n    };\n};\n// The handle bounds are calculated relative to the node element.\n// We store them in the internals object of the node in order to avoid\n// unnecessary recalculations.\nconst getHandleBounds = (type, nodeElement, nodeBounds, zoom, nodeId) => {\n    const handles = nodeElement.querySelectorAll(`.${type}`);\n    if (!handles || !handles.length) {\n        return null;\n    }\n    return Array.from(handles).map((handle) => {\n        const handleBounds = handle.getBoundingClientRect();\n        return {\n            id: handle.getAttribute('data-handleid'),\n            type,\n            nodeId,\n            position: handle.getAttribute('data-handlepos'),\n            x: (handleBounds.left - nodeBounds.left) / zoom,\n            y: (handleBounds.top - nodeBounds.top) / zoom,\n            ...getDimensions(handle),\n        };\n    });\n};\n\nfunction getBezierEdgeCenter({ sourceX, sourceY, targetX, targetY, sourceControlX, sourceControlY, targetControlX, targetControlY, }) {\n    // cubic bezier t=0.5 mid point, not the actual mid point, but easy to calculate\n    // https://stackoverflow.com/questions/67516101/how-to-find-distance-mid-point-of-bezier-curve\n    const centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;\n    const centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;\n    const offsetX = Math.abs(centerX - sourceX);\n    const offsetY = Math.abs(centerY - sourceY);\n    return [centerX, centerY, offsetX, offsetY];\n}\nfunction calculateControlOffset(distance, curvature) {\n    if (distance >= 0) {\n        return 0.5 * distance;\n    }\n    return curvature * 25 * Math.sqrt(-distance);\n}\nfunction getControlWithCurvature({ pos, x1, y1, x2, y2, c }) {\n    switch (pos) {\n        case Position.Left:\n            return [x1 - calculateControlOffset(x1 - x2, c), y1];\n        case Position.Right:\n            return [x1 + calculateControlOffset(x2 - x1, c), y1];\n        case Position.Top:\n            return [x1, y1 - calculateControlOffset(y1 - y2, c)];\n        case Position.Bottom:\n            return [x1, y1 + calculateControlOffset(y2 - y1, c)];\n    }\n}\n/**\n * Get a bezier path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\n * @param params.curvature - The curvature of the bezier edge\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getBezierPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n});\n */\nfunction getBezierPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, curvature = 0.25, }) {\n    const [sourceControlX, sourceControlY] = getControlWithCurvature({\n        pos: sourcePosition,\n        x1: sourceX,\n        y1: sourceY,\n        x2: targetX,\n        y2: targetY,\n        c: curvature,\n    });\n    const [targetControlX, targetControlY] = getControlWithCurvature({\n        pos: targetPosition,\n        x1: targetX,\n        y1: targetY,\n        x2: sourceX,\n        y2: sourceY,\n        c: curvature,\n    });\n    const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n        sourceX,\n        sourceY,\n        targetX,\n        targetY,\n        sourceControlX,\n        sourceControlY,\n        targetControlX,\n        targetControlY,\n    });\n    return [\n        `M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`,\n        labelX,\n        labelY,\n        offsetX,\n        offsetY,\n    ];\n}\n\n// this is used for straight edges and simple smoothstep edges (LTR, RTL, BTT, TTB)\nfunction getEdgeCenter({ sourceX, sourceY, targetX, targetY, }) {\n    const xOffset = Math.abs(targetX - sourceX) / 2;\n    const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\n    const yOffset = Math.abs(targetY - sourceY) / 2;\n    const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\n    return [centerX, centerY, xOffset, yOffset];\n}\nfunction getElevatedEdgeZIndex({ sourceNode, targetNode, selected = false, zIndex = 0, elevateOnSelect = false, }) {\n    if (!elevateOnSelect) {\n        return zIndex;\n    }\n    const edgeOrConnectedNodeSelected = selected || targetNode.selected || sourceNode.selected;\n    const selectedZIndex = Math.max(sourceNode.internals.z || 0, targetNode.internals.z || 0, 1000);\n    return zIndex + (edgeOrConnectedNodeSelected ? selectedZIndex : 0);\n}\nfunction isEdgeVisible({ sourceNode, targetNode, width, height, transform }) {\n    const edgeBox = getBoundsOfBoxes(nodeToBox(sourceNode), nodeToBox(targetNode));\n    if (edgeBox.x === edgeBox.x2) {\n        edgeBox.x2 += 1;\n    }\n    if (edgeBox.y === edgeBox.y2) {\n        edgeBox.y2 += 1;\n    }\n    const viewRect = {\n        x: -transform[0] / transform[2],\n        y: -transform[1] / transform[2],\n        width: width / transform[2],\n        height: height / transform[2],\n    };\n    return getOverlappingArea(viewRect, boxToRect(edgeBox)) > 0;\n}\nconst getEdgeId = ({ source, sourceHandle, target, targetHandle }) => `xy-edge__${source}${sourceHandle || ''}-${target}${targetHandle || ''}`;\nconst connectionExists = (edge, edges) => {\n    return edges.some((el) => el.source === edge.source &&\n        el.target === edge.target &&\n        (el.sourceHandle === edge.sourceHandle || (!el.sourceHandle && !edge.sourceHandle)) &&\n        (el.targetHandle === edge.targetHandle || (!el.targetHandle && !edge.targetHandle)));\n};\n/**\n * This util is a convenience function to add a new Edge to an array of edges\n * @remarks It also performs some validation to make sure you don't add an invalid edge or duplicate an existing one.\n * @public\n * @param edgeParams - Either an Edge or a Connection you want to add\n * @param edges -  The array of all current edges\n * @returns A new array of edges with the new edge added\n */\nconst addEdge = (edgeParams, edges) => {\n    if (!edgeParams.source || !edgeParams.target) {\n        devWarn('006', errorMessages['error006']());\n        return edges;\n    }\n    let edge;\n    if (isEdgeBase(edgeParams)) {\n        edge = { ...edgeParams };\n    }\n    else {\n        edge = {\n            ...edgeParams,\n            id: getEdgeId(edgeParams),\n        };\n    }\n    if (connectionExists(edge, edges)) {\n        return edges;\n    }\n    if (edge.sourceHandle === null) {\n        delete edge.sourceHandle;\n    }\n    if (edge.targetHandle === null) {\n        delete edge.targetHandle;\n    }\n    return edges.concat(edge);\n};\n/**\n * A handy utility to reconnect an existing edge with new properties\n * @param oldEdge - The edge you want to update\n * @param newConnection - The new connection you want to update the edge with\n * @param edges - The array of all current edges\n * @param options.shouldReplaceId - should the id of the old edge be replaced with the new connection id\n * @returns the updated edges array\n */\nconst reconnectEdge = (oldEdge, newConnection, edges, options = { shouldReplaceId: true }) => {\n    const { id: oldEdgeId, ...rest } = oldEdge;\n    if (!newConnection.source || !newConnection.target) {\n        devWarn('006', errorMessages['error006']());\n        return edges;\n    }\n    const foundEdge = edges.find((e) => e.id === oldEdge.id);\n    if (!foundEdge) {\n        devWarn('007', errorMessages['error007'](oldEdgeId));\n        return edges;\n    }\n    // Remove old edge and create the new edge with parameters of old edge.\n    const edge = {\n        ...rest,\n        id: options.shouldReplaceId ? getEdgeId(newConnection) : oldEdgeId,\n        source: newConnection.source,\n        target: newConnection.target,\n        sourceHandle: newConnection.sourceHandle,\n        targetHandle: newConnection.targetHandle,\n    };\n    return edges.filter((e) => e.id !== oldEdgeId).concat(edge);\n};\n\n/**\n * Get a straight path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getStraightPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n    });\n */\nfunction getStraightPath({ sourceX, sourceY, targetX, targetY, }) {\n    const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({\n        sourceX,\n        sourceY,\n        targetX,\n        targetY,\n    });\n    return [`M ${sourceX},${sourceY}L ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\n\nconst handleDirections = {\n    [Position.Left]: { x: -1, y: 0 },\n    [Position.Right]: { x: 1, y: 0 },\n    [Position.Top]: { x: 0, y: -1 },\n    [Position.Bottom]: { x: 0, y: 1 },\n};\nconst getDirection = ({ source, sourcePosition = Position.Bottom, target, }) => {\n    if (sourcePosition === Position.Left || sourcePosition === Position.Right) {\n        return source.x < target.x ? { x: 1, y: 0 } : { x: -1, y: 0 };\n    }\n    return source.y < target.y ? { x: 0, y: 1 } : { x: 0, y: -1 };\n};\nconst distance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n// ith this function we try to mimic a orthogonal edge routing behaviour\n// It's not as good as a real orthogonal edge routing but it's faster and good enough as a default for step and smooth step edges\nfunction getPoints({ source, sourcePosition = Position.Bottom, target, targetPosition = Position.Top, center, offset, }) {\n    const sourceDir = handleDirections[sourcePosition];\n    const targetDir = handleDirections[targetPosition];\n    const sourceGapped = { x: source.x + sourceDir.x * offset, y: source.y + sourceDir.y * offset };\n    const targetGapped = { x: target.x + targetDir.x * offset, y: target.y + targetDir.y * offset };\n    const dir = getDirection({\n        source: sourceGapped,\n        sourcePosition,\n        target: targetGapped,\n    });\n    const dirAccessor = dir.x !== 0 ? 'x' : 'y';\n    const currDir = dir[dirAccessor];\n    let points = [];\n    let centerX, centerY;\n    const sourceGapOffset = { x: 0, y: 0 };\n    const targetGapOffset = { x: 0, y: 0 };\n    const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({\n        sourceX: source.x,\n        sourceY: source.y,\n        targetX: target.x,\n        targetY: target.y,\n    });\n    // opposite handle positions, default case\n    if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {\n        centerX = center.x ?? defaultCenterX;\n        centerY = center.y ?? defaultCenterY;\n        //    --->\n        //    |\n        // >---\n        const verticalSplit = [\n            { x: centerX, y: sourceGapped.y },\n            { x: centerX, y: targetGapped.y },\n        ];\n        //    |\n        //  ---\n        //  |\n        const horizontalSplit = [\n            { x: sourceGapped.x, y: centerY },\n            { x: targetGapped.x, y: centerY },\n        ];\n        if (sourceDir[dirAccessor] === currDir) {\n            points = dirAccessor === 'x' ? verticalSplit : horizontalSplit;\n        }\n        else {\n            points = dirAccessor === 'x' ? horizontalSplit : verticalSplit;\n        }\n    }\n    else {\n        // sourceTarget means we take x from source and y from target, targetSource is the opposite\n        const sourceTarget = [{ x: sourceGapped.x, y: targetGapped.y }];\n        const targetSource = [{ x: targetGapped.x, y: sourceGapped.y }];\n        // this handles edges with same handle positions\n        if (dirAccessor === 'x') {\n            points = sourceDir.x === currDir ? targetSource : sourceTarget;\n        }\n        else {\n            points = sourceDir.y === currDir ? sourceTarget : targetSource;\n        }\n        if (sourcePosition === targetPosition) {\n            const diff = Math.abs(source[dirAccessor] - target[dirAccessor]);\n            // if an edge goes from right to right for example (sourcePosition === targetPosition) and the distance between source.x and target.x is less than the offset, the added point and the gapped source/target will overlap. This leads to a weird edge path. To avoid this we add a gapOffset to the source/target\n            if (diff <= offset) {\n                const gapOffset = Math.min(offset - 1, offset - diff);\n                if (sourceDir[dirAccessor] === currDir) {\n                    sourceGapOffset[dirAccessor] = (sourceGapped[dirAccessor] > source[dirAccessor] ? -1 : 1) * gapOffset;\n                }\n                else {\n                    targetGapOffset[dirAccessor] = (targetGapped[dirAccessor] > target[dirAccessor] ? -1 : 1) * gapOffset;\n                }\n            }\n        }\n        // these are conditions for handling mixed handle positions like Right -> Bottom for example\n        if (sourcePosition !== targetPosition) {\n            const dirAccessorOpposite = dirAccessor === 'x' ? 'y' : 'x';\n            const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];\n            const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];\n            const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];\n            const flipSourceTarget = (sourceDir[dirAccessor] === 1 && ((!isSameDir && sourceGtTargetOppo) || (isSameDir && sourceLtTargetOppo))) ||\n                (sourceDir[dirAccessor] !== 1 && ((!isSameDir && sourceLtTargetOppo) || (isSameDir && sourceGtTargetOppo)));\n            if (flipSourceTarget) {\n                points = dirAccessor === 'x' ? sourceTarget : targetSource;\n            }\n        }\n        const sourceGapPoint = { x: sourceGapped.x + sourceGapOffset.x, y: sourceGapped.y + sourceGapOffset.y };\n        const targetGapPoint = { x: targetGapped.x + targetGapOffset.x, y: targetGapped.y + targetGapOffset.y };\n        const maxXDistance = Math.max(Math.abs(sourceGapPoint.x - points[0].x), Math.abs(targetGapPoint.x - points[0].x));\n        const maxYDistance = Math.max(Math.abs(sourceGapPoint.y - points[0].y), Math.abs(targetGapPoint.y - points[0].y));\n        // we want to place the label on the longest segment of the edge\n        if (maxXDistance >= maxYDistance) {\n            centerX = (sourceGapPoint.x + targetGapPoint.x) / 2;\n            centerY = points[0].y;\n        }\n        else {\n            centerX = points[0].x;\n            centerY = (sourceGapPoint.y + targetGapPoint.y) / 2;\n        }\n    }\n    const pathPoints = [\n        source,\n        { x: sourceGapped.x + sourceGapOffset.x, y: sourceGapped.y + sourceGapOffset.y },\n        ...points,\n        { x: targetGapped.x + targetGapOffset.x, y: targetGapped.y + targetGapOffset.y },\n        target,\n    ];\n    return [pathPoints, centerX, centerY, defaultOffsetX, defaultOffsetY];\n}\nfunction getBend(a, b, c, size) {\n    const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);\n    const { x, y } = b;\n    // no bend\n    if ((a.x === x && x === c.x) || (a.y === y && y === c.y)) {\n        return `L${x} ${y}`;\n    }\n    // first segment is horizontal\n    if (a.y === y) {\n        const xDir = a.x < c.x ? -1 : 1;\n        const yDir = a.y < c.y ? 1 : -1;\n        return `L ${x + bendSize * xDir},${y}Q ${x},${y} ${x},${y + bendSize * yDir}`;\n    }\n    const xDir = a.x < c.x ? 1 : -1;\n    const yDir = a.y < c.y ? -1 : 1;\n    return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;\n}\n/**\n * Get a smooth step path from source to target handle\n * @param params.sourceX - The x position of the source handle\n * @param params.sourceY - The y position of the source handle\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\n * @param params.targetX - The x position of the target handle\n * @param params.targetY - The y position of the target handle\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\n * @example\n *  const source = { x: 0, y: 20 };\n    const target = { x: 150, y: 100 };\n    \n    const [path, labelX, labelY, offsetX, offsetY] = getSmoothStepPath({\n      sourceX: source.x,\n      sourceY: source.y,\n      sourcePosition: Position.Right,\n      targetX: target.x,\n      targetY: target.y,\n      targetPosition: Position.Left,\n    });\n */\nfunction getSmoothStepPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, borderRadius = 5, centerX, centerY, offset = 20, }) {\n    const [points, labelX, labelY, offsetX, offsetY] = getPoints({\n        source: { x: sourceX, y: sourceY },\n        sourcePosition,\n        target: { x: targetX, y: targetY },\n        targetPosition,\n        center: { x: centerX, y: centerY },\n        offset,\n    });\n    const path = points.reduce((res, p, i) => {\n        let segment = '';\n        if (i > 0 && i < points.length - 1) {\n            segment = getBend(points[i - 1], p, points[i + 1], borderRadius);\n        }\n        else {\n            segment = `${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`;\n        }\n        res += segment;\n        return res;\n    }, '');\n    return [path, labelX, labelY, offsetX, offsetY];\n}\n\nfunction isNodeInitialized(node) {\n    return (node &&\n        !!(node.internals.handleBounds || node.handles?.length) &&\n        !!(node.measured.width || node.width || node.initialWidth));\n}\nfunction getEdgePosition(params) {\n    const { sourceNode, targetNode } = params;\n    if (!isNodeInitialized(sourceNode) || !isNodeInitialized(targetNode)) {\n        return null;\n    }\n    const sourceHandleBounds = sourceNode.internals.handleBounds || toHandleBounds(sourceNode.handles);\n    const targetHandleBounds = targetNode.internals.handleBounds || toHandleBounds(targetNode.handles);\n    const sourceHandle = getHandle$1(sourceHandleBounds?.source ?? [], params.sourceHandle);\n    const targetHandle = getHandle$1(\n    // when connection type is loose we can define all handles as sources and connect source -> source\n    params.connectionMode === ConnectionMode.Strict\n        ? targetHandleBounds?.target ?? []\n        : (targetHandleBounds?.target ?? []).concat(targetHandleBounds?.source ?? []), params.targetHandle);\n    if (!sourceHandle || !targetHandle) {\n        params.onError?.('008', errorMessages['error008'](!sourceHandle ? 'source' : 'target', {\n            id: params.id,\n            sourceHandle: params.sourceHandle,\n            targetHandle: params.targetHandle,\n        }));\n        return null;\n    }\n    const sourcePosition = sourceHandle?.position || Position.Bottom;\n    const targetPosition = targetHandle?.position || Position.Top;\n    const source = getHandlePosition(sourceNode, sourceHandle, sourcePosition);\n    const target = getHandlePosition(targetNode, targetHandle, targetPosition);\n    return {\n        sourceX: source.x,\n        sourceY: source.y,\n        targetX: target.x,\n        targetY: target.y,\n        sourcePosition,\n        targetPosition,\n    };\n}\nfunction toHandleBounds(handles) {\n    if (!handles) {\n        return null;\n    }\n    const source = [];\n    const target = [];\n    for (const handle of handles) {\n        handle.width = handle.width ?? 1;\n        handle.height = handle.height ?? 1;\n        if (handle.type === 'source') {\n            source.push(handle);\n        }\n        else if (handle.type === 'target') {\n            target.push(handle);\n        }\n    }\n    return {\n        source,\n        target,\n    };\n}\nfunction getHandlePosition(node, handle, fallbackPosition = Position.Left, center = false) {\n    const x = (handle?.x ?? 0) + node.internals.positionAbsolute.x;\n    const y = (handle?.y ?? 0) + node.internals.positionAbsolute.y;\n    const { width, height } = handle ?? getNodeDimensions(node);\n    if (center) {\n        return { x: x + width / 2, y: y + height / 2 };\n    }\n    const position = handle?.position ?? fallbackPosition;\n    switch (position) {\n        case Position.Top:\n            return { x: x + width / 2, y };\n        case Position.Right:\n            return { x: x + width, y: y + height / 2 };\n        case Position.Bottom:\n            return { x: x + width / 2, y: y + height };\n        case Position.Left:\n            return { x, y: y + height / 2 };\n    }\n}\nfunction getHandle$1(bounds, handleId) {\n    if (!bounds) {\n        return null;\n    }\n    // if no handleId is given, we use the first handle, otherwise we check for the id\n    return (!handleId ? bounds[0] : bounds.find((d) => d.id === handleId)) || null;\n}\n\nfunction getMarkerId(marker, id) {\n    if (!marker) {\n        return '';\n    }\n    if (typeof marker === 'string') {\n        return marker;\n    }\n    const idPrefix = id ? `${id}__` : '';\n    return `${idPrefix}${Object.keys(marker)\n        .sort()\n        .map((key) => `${key}=${marker[key]}`)\n        .join('&')}`;\n}\nfunction createMarkerIds(edges, { id, defaultColor, defaultMarkerStart, defaultMarkerEnd, }) {\n    const ids = new Set();\n    return edges\n        .reduce((markers, edge) => {\n        [edge.markerStart || defaultMarkerStart, edge.markerEnd || defaultMarkerEnd].forEach((marker) => {\n            if (marker && typeof marker === 'object') {\n                const markerId = getMarkerId(marker, id);\n                if (!ids.has(markerId)) {\n                    markers.push({ id: markerId, color: marker.color || defaultColor, ...marker });\n                    ids.add(markerId);\n                }\n            }\n        });\n        return markers;\n    }, [])\n        .sort((a, b) => a.id.localeCompare(b.id));\n}\n\nfunction getNodeToolbarTransform(nodeRect, viewport, position, offset, align) {\n    let alignmentOffset = 0.5;\n    if (align === 'start') {\n        alignmentOffset = 0;\n    }\n    else if (align === 'end') {\n        alignmentOffset = 1;\n    }\n    // position === Position.Top\n    // we set the x any y position of the toolbar based on the nodes position\n    let pos = [\n        (nodeRect.x + nodeRect.width * alignmentOffset) * viewport.zoom + viewport.x,\n        nodeRect.y * viewport.zoom + viewport.y - offset,\n    ];\n    // and than shift it based on the alignment. The shift values are in %.\n    let shift = [-100 * alignmentOffset, -100];\n    switch (position) {\n        case Position.Right:\n            pos = [\n                (nodeRect.x + nodeRect.width) * viewport.zoom + viewport.x + offset,\n                (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y,\n            ];\n            shift = [0, -100 * alignmentOffset];\n            break;\n        case Position.Bottom:\n            pos[1] = (nodeRect.y + nodeRect.height) * viewport.zoom + viewport.y + offset;\n            shift[1] = 0;\n            break;\n        case Position.Left:\n            pos = [\n                nodeRect.x * viewport.zoom + viewport.x - offset,\n                (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y,\n            ];\n            shift = [-100, -100 * alignmentOffset];\n            break;\n    }\n    return `translate(${pos[0]}px, ${pos[1]}px) translate(${shift[0]}%, ${shift[1]}%)`;\n}\n\nconst defaultOptions = {\n    nodeOrigin: [0, 0],\n    nodeExtent: infiniteExtent,\n    elevateNodesOnSelect: true,\n    defaults: {},\n};\nconst adoptUserNodesDefaultOptions = {\n    ...defaultOptions,\n    checkEquality: true,\n};\nfunction mergeObjects(base, incoming) {\n    const result = { ...base };\n    for (const key in incoming) {\n        if (incoming[key] !== undefined) {\n            // typecast is safe here, because we check for undefined\n            result[key] = incoming[key];\n        }\n    }\n    return result;\n}\nfunction updateAbsolutePositions(nodeLookup, parentLookup, options) {\n    const _options = mergeObjects(defaultOptions, options);\n    for (const node of nodeLookup.values()) {\n        if (node.parentId) {\n            updateChildNode(node, nodeLookup, parentLookup, _options);\n        }\n        else {\n            const positionWithOrigin = getNodePositionWithOrigin(node, _options.nodeOrigin);\n            const extent = isCoordinateExtent(node.extent) ? node.extent : _options.nodeExtent;\n            const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(node));\n            node.internals.positionAbsolute = clampedPosition;\n        }\n    }\n}\nfunction adoptUserNodes(nodes, nodeLookup, parentLookup, options) {\n    const _options = mergeObjects(adoptUserNodesDefaultOptions, options);\n    const tmpLookup = new Map(nodeLookup);\n    const selectedNodeZ = _options?.elevateNodesOnSelect ? 1000 : 0;\n    nodeLookup.clear();\n    parentLookup.clear();\n    for (const userNode of nodes) {\n        let internalNode = tmpLookup.get(userNode.id);\n        if (_options.checkEquality && userNode === internalNode?.internals.userNode) {\n            nodeLookup.set(userNode.id, internalNode);\n        }\n        else {\n            const positionWithOrigin = getNodePositionWithOrigin(userNode, _options.nodeOrigin);\n            const extent = isCoordinateExtent(userNode.extent) ? userNode.extent : _options.nodeExtent;\n            const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(userNode));\n            internalNode = {\n                ..._options.defaults,\n                ...userNode,\n                measured: {\n                    width: userNode.measured?.width,\n                    height: userNode.measured?.height,\n                },\n                internals: {\n                    positionAbsolute: clampedPosition,\n                    // if user re-initializes the node or removes `measured` for whatever reason, we reset the handleBounds so that the node gets re-measured\n                    handleBounds: !userNode.measured ? undefined : internalNode?.internals.handleBounds,\n                    z: calculateZ(userNode, selectedNodeZ),\n                    userNode,\n                },\n            };\n            nodeLookup.set(userNode.id, internalNode);\n        }\n        if (userNode.parentId) {\n            updateChildNode(internalNode, nodeLookup, parentLookup, options);\n        }\n    }\n}\nfunction updateParentLookup(node, parentLookup) {\n    if (!node.parentId) {\n        return;\n    }\n    const childNodes = parentLookup.get(node.parentId);\n    if (childNodes) {\n        childNodes.set(node.id, node);\n    }\n    else {\n        parentLookup.set(node.parentId, new Map([[node.id, node]]));\n    }\n}\n/**\n * Updates positionAbsolute and zIndex of a child node and the parentLookup.\n */\nfunction updateChildNode(node, nodeLookup, parentLookup, options) {\n    const { elevateNodesOnSelect, nodeOrigin, nodeExtent } = mergeObjects(defaultOptions, options);\n    const parentId = node.parentId;\n    const parentNode = nodeLookup.get(parentId);\n    if (!parentNode) {\n        console.warn(`Parent node ${parentId} not found. Please make sure that parent nodes are in front of their child nodes in the nodes array.`);\n        return;\n    }\n    updateParentLookup(node, parentLookup);\n    const selectedNodeZ = elevateNodesOnSelect ? 1000 : 0;\n    const { x, y, z } = calculateChildXYZ(node, parentNode, nodeOrigin, nodeExtent, selectedNodeZ);\n    const { positionAbsolute } = node.internals;\n    const positionChanged = x !== positionAbsolute.x || y !== positionAbsolute.y;\n    if (positionChanged || z !== node.internals.z) {\n        node.internals = {\n            ...node.internals,\n            positionAbsolute: positionChanged ? { x, y } : positionAbsolute,\n            z,\n        };\n    }\n}\nfunction calculateZ(node, selectedNodeZ) {\n    return (isNumeric(node.zIndex) ? node.zIndex : 0) + (node.selected ? selectedNodeZ : 0);\n}\nfunction calculateChildXYZ(childNode, parentNode, nodeOrigin, nodeExtent, selectedNodeZ) {\n    const { x: parentX, y: parentY } = parentNode.internals.positionAbsolute;\n    const childDimensions = getNodeDimensions(childNode);\n    const positionWithOrigin = getNodePositionWithOrigin(childNode, nodeOrigin);\n    const clampedPosition = isCoordinateExtent(childNode.extent)\n        ? clampPosition(positionWithOrigin, childNode.extent, childDimensions)\n        : positionWithOrigin;\n    let absolutePosition = clampPosition({ x: parentX + clampedPosition.x, y: parentY + clampedPosition.y }, nodeExtent, childDimensions);\n    if (childNode.extent === 'parent') {\n        absolutePosition = clampPositionToParent(absolutePosition, childDimensions, parentNode);\n    }\n    const childZ = calculateZ(childNode, selectedNodeZ);\n    const parentZ = parentNode.internals.z ?? 0;\n    return {\n        x: absolutePosition.x,\n        y: absolutePosition.y,\n        z: parentZ > childZ ? parentZ : childZ,\n    };\n}\nfunction handleExpandParent(children, nodeLookup, parentLookup, nodeOrigin = [0, 0]) {\n    const changes = [];\n    const parentExpansions = new Map();\n    // determine the expanded rectangle the child nodes would take for each parent\n    for (const child of children) {\n        const parent = nodeLookup.get(child.parentId);\n        if (!parent) {\n            continue;\n        }\n        const parentRect = parentExpansions.get(child.parentId)?.expandedRect ?? nodeToRect(parent);\n        const expandedRect = getBoundsOfRects(parentRect, child.rect);\n        parentExpansions.set(child.parentId, { expandedRect, parent });\n    }\n    if (parentExpansions.size > 0) {\n        parentExpansions.forEach(({ expandedRect, parent }, parentId) => {\n            // determine the position & dimensions of the parent\n            const positionAbsolute = parent.internals.positionAbsolute;\n            const dimensions = getNodeDimensions(parent);\n            const origin = parent.origin ?? nodeOrigin;\n            // determine how much the parent expands in width and position\n            const xChange = expandedRect.x < positionAbsolute.x ? Math.round(Math.abs(positionAbsolute.x - expandedRect.x)) : 0;\n            const yChange = expandedRect.y < positionAbsolute.y ? Math.round(Math.abs(positionAbsolute.y - expandedRect.y)) : 0;\n            const newWidth = Math.max(dimensions.width, Math.round(expandedRect.width));\n            const newHeight = Math.max(dimensions.height, Math.round(expandedRect.height));\n            const widthChange = (newWidth - dimensions.width) * origin[0];\n            const heightChange = (newHeight - dimensions.height) * origin[1];\n            // We need to correct the position of the parent node if the origin is not [0,0]\n            if (xChange > 0 || yChange > 0 || widthChange || heightChange) {\n                changes.push({\n                    id: parentId,\n                    type: 'position',\n                    position: {\n                        x: parent.position.x - xChange + widthChange,\n                        y: parent.position.y - yChange + heightChange,\n                    },\n                });\n                // We move all child nodes in the oppsite direction\n                // so the x,y changes of the parent do not move the children\n                parentLookup.get(parentId)?.forEach((childNode) => {\n                    if (!children.some((child) => child.id === childNode.id)) {\n                        changes.push({\n                            id: childNode.id,\n                            type: 'position',\n                            position: {\n                                x: childNode.position.x + xChange,\n                                y: childNode.position.y + yChange,\n                            },\n                        });\n                    }\n                });\n            }\n            // We need to correct the dimensions of the parent node if the origin is not [0,0]\n            if (dimensions.width < expandedRect.width || dimensions.height < expandedRect.height || xChange || yChange) {\n                changes.push({\n                    id: parentId,\n                    type: 'dimensions',\n                    setAttributes: true,\n                    dimensions: {\n                        width: newWidth + (xChange ? origin[0] * xChange - widthChange : 0),\n                        height: newHeight + (yChange ? origin[1] * yChange - heightChange : 0),\n                    },\n                });\n            }\n        });\n    }\n    return changes;\n}\nfunction updateNodeInternals(updates, nodeLookup, parentLookup, domNode, nodeOrigin, nodeExtent) {\n    const viewportNode = domNode?.querySelector('.xyflow__viewport');\n    let updatedInternals = false;\n    if (!viewportNode) {\n        return { changes: [], updatedInternals };\n    }\n    const changes = [];\n    const style = window.getComputedStyle(viewportNode);\n    const { m22: zoom } = new window.DOMMatrixReadOnly(style.transform);\n    // in this array we collect nodes, that might trigger changes (like expanding parent)\n    const parentExpandChildren = [];\n    for (const update of updates.values()) {\n        const node = nodeLookup.get(update.id);\n        if (!node) {\n            continue;\n        }\n        if (node.hidden) {\n            node.internals = {\n                ...node.internals,\n                handleBounds: undefined,\n            };\n            updatedInternals = true;\n        }\n        else {\n            const dimensions = getDimensions(update.nodeElement);\n            const dimensionChanged = node.measured.width !== dimensions.width || node.measured.height !== dimensions.height;\n            const doUpdate = !!(dimensions.width &&\n                dimensions.height &&\n                (dimensionChanged || !node.internals.handleBounds || update.force));\n            if (doUpdate) {\n                const nodeBounds = update.nodeElement.getBoundingClientRect();\n                const extent = isCoordinateExtent(node.extent) ? node.extent : nodeExtent;\n                let { positionAbsolute } = node.internals;\n                if (node.parentId && node.extent === 'parent') {\n                    positionAbsolute = clampPositionToParent(positionAbsolute, dimensions, nodeLookup.get(node.parentId));\n                }\n                else if (extent) {\n                    positionAbsolute = clampPosition(positionAbsolute, extent, dimensions);\n                }\n                node.measured = dimensions;\n                node.internals = {\n                    ...node.internals,\n                    positionAbsolute,\n                    handleBounds: {\n                        source: getHandleBounds('source', update.nodeElement, nodeBounds, zoom, node.id),\n                        target: getHandleBounds('target', update.nodeElement, nodeBounds, zoom, node.id),\n                    },\n                };\n                if (node.parentId) {\n                    updateChildNode(node, nodeLookup, parentLookup, { nodeOrigin });\n                }\n                updatedInternals = true;\n                if (dimensionChanged) {\n                    changes.push({\n                        id: node.id,\n                        type: 'dimensions',\n                        dimensions,\n                    });\n                    if (node.expandParent && node.parentId) {\n                        parentExpandChildren.push({\n                            id: node.id,\n                            parentId: node.parentId,\n                            rect: nodeToRect(node, nodeOrigin),\n                        });\n                    }\n                }\n            }\n        }\n    }\n    if (parentExpandChildren.length > 0) {\n        const parentExpandChanges = handleExpandParent(parentExpandChildren, nodeLookup, parentLookup, nodeOrigin);\n        changes.push(...parentExpandChanges);\n    }\n    return { changes, updatedInternals };\n}\nasync function panBy({ delta, panZoom, transform, translateExtent, width, height, }) {\n    if (!panZoom || (!delta.x && !delta.y)) {\n        return Promise.resolve(false);\n    }\n    const nextViewport = await panZoom.setViewportConstrained({\n        x: transform[0] + delta.x,\n        y: transform[1] + delta.y,\n        zoom: transform[2],\n    }, [\n        [0, 0],\n        [width, height],\n    ], translateExtent);\n    const transformChanged = !!nextViewport &&\n        (nextViewport.x !== transform[0] || nextViewport.y !== transform[1] || nextViewport.k !== transform[2]);\n    return Promise.resolve(transformChanged);\n}\nfunction updateConnectionLookup(connectionLookup, edgeLookup, edges) {\n    connectionLookup.clear();\n    edgeLookup.clear();\n    for (const edge of edges) {\n        const { source, target, sourceHandle = null, targetHandle = null } = edge;\n        const sourceKey = `${source}-source-${sourceHandle}`;\n        const targetKey = `${target}-target-${targetHandle}`;\n        const prevSource = connectionLookup.get(sourceKey) || new Map();\n        const prevTarget = connectionLookup.get(targetKey) || new Map();\n        const connection = { edgeId: edge.id, source, target, sourceHandle, targetHandle };\n        edgeLookup.set(edge.id, edge);\n        connectionLookup.set(sourceKey, prevSource.set(`${target}-${targetHandle}`, connection));\n        connectionLookup.set(targetKey, prevTarget.set(`${source}-${sourceHandle}`, connection));\n    }\n}\n\nfunction shallowNodeData(a, b) {\n    if (a === null || b === null) {\n        return false;\n    }\n    const _a = Array.isArray(a) ? a : [a];\n    const _b = Array.isArray(b) ? b : [b];\n    if (_a.length !== _b.length) {\n        return false;\n    }\n    for (let i = 0; i < _a.length; i++) {\n        if (_a[i].id !== _b[i].id || _a[i].type !== _b[i].type || !Object.is(_a[i].data, _b[i].data)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction isParentSelected(node, nodeLookup) {\n    if (!node.parentId) {\n        return false;\n    }\n    const parentNode = nodeLookup.get(node.parentId);\n    if (!parentNode) {\n        return false;\n    }\n    if (parentNode.selected) {\n        return true;\n    }\n    return isParentSelected(parentNode, nodeLookup);\n}\nfunction hasSelector(target, selector, domNode) {\n    let current = target;\n    do {\n        if (current?.matches(selector))\n            return true;\n        if (current === domNode)\n            return false;\n        current = current.parentElement;\n    } while (current);\n    return false;\n}\n// looks for all selected nodes and created a NodeDragItem for each of them\nfunction getDragItems(nodeLookup, nodesDraggable, mousePos, nodeId) {\n    const dragItems = new Map();\n    for (const [id, node] of nodeLookup) {\n        if ((node.selected || node.id === nodeId) &&\n            (!node.parentId || !isParentSelected(node, nodeLookup)) &&\n            (node.draggable || (nodesDraggable && typeof node.draggable === 'undefined'))) {\n            const internalNode = nodeLookup.get(id);\n            if (internalNode) {\n                dragItems.set(id, {\n                    id,\n                    position: internalNode.position || { x: 0, y: 0 },\n                    distance: {\n                        x: mousePos.x - internalNode.internals.positionAbsolute.x,\n                        y: mousePos.y - internalNode.internals.positionAbsolute.y,\n                    },\n                    extent: internalNode.extent,\n                    parentId: internalNode.parentId,\n                    origin: internalNode.origin,\n                    expandParent: internalNode.expandParent,\n                    internals: {\n                        positionAbsolute: internalNode.internals.positionAbsolute || { x: 0, y: 0 },\n                    },\n                    measured: {\n                        width: internalNode.measured.width ?? 0,\n                        height: internalNode.measured.height ?? 0,\n                    },\n                });\n            }\n        }\n    }\n    return dragItems;\n}\n// returns two params:\n// 1. the dragged node (or the first of the list, if we are dragging a node selection)\n// 2. array of selected nodes (for multi selections)\nfunction getEventHandlerParams({ nodeId, dragItems, nodeLookup, dragging = true, }) {\n    const nodesFromDragItems = [];\n    for (const [id, dragItem] of dragItems) {\n        const node = nodeLookup.get(id)?.internals.userNode;\n        if (node) {\n            nodesFromDragItems.push({\n                ...node,\n                position: dragItem.position,\n                dragging,\n            });\n        }\n    }\n    if (!nodeId) {\n        return [nodesFromDragItems[0], nodesFromDragItems];\n    }\n    const node = nodeLookup.get(nodeId).internals.userNode;\n    return [\n        {\n            ...node,\n            position: dragItems.get(nodeId)?.position || node.position,\n            dragging,\n        },\n        nodesFromDragItems,\n    ];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction XYDrag({ onNodeMouseDown, getStoreItems, onDragStart, onDrag, onDragStop, }) {\n    let lastPos = { x: null, y: null };\n    let autoPanId = 0;\n    let dragItems = new Map();\n    let autoPanStarted = false;\n    let mousePosition = { x: 0, y: 0 };\n    let containerBounds = null;\n    let dragStarted = false;\n    let d3Selection = null;\n    let abortDrag = false; // prevents unintentional dragging on multitouch\n    // public functions\n    function update({ noDragClassName, handleSelector, domNode, isSelectable, nodeId, nodeClickDistance = 0, }) {\n        d3Selection = select(domNode);\n        function updateNodes({ x, y }, dragEvent) {\n            const { nodeLookup, nodeExtent, snapGrid, snapToGrid, nodeOrigin, onNodeDrag, onSelectionDrag, onError, updateNodePositions, } = getStoreItems();\n            lastPos = { x, y };\n            let hasChange = false;\n            let nodesBox = { x: 0, y: 0, x2: 0, y2: 0 };\n            if (dragItems.size > 1 && nodeExtent) {\n                const rect = getInternalNodesBounds(dragItems);\n                nodesBox = rectToBox(rect);\n            }\n            for (const [id, dragItem] of dragItems) {\n                if (!nodeLookup.has(id)) {\n                    // if the node is not in the nodeLookup anymore, it was probably deleted while dragging\n                    // and we don't need to update it anymore\n                    continue;\n                }\n                let nextPosition = { x: x - dragItem.distance.x, y: y - dragItem.distance.y };\n                if (snapToGrid) {\n                    nextPosition = snapPosition(nextPosition, snapGrid);\n                }\n                // if there is selection with multiple nodes and a node extent is set, we need to adjust the node extent for each node\n                // based on its position so that the node stays at it's position relative to the selection.\n                let adjustedNodeExtent = [\n                    [nodeExtent[0][0], nodeExtent[0][1]],\n                    [nodeExtent[1][0], nodeExtent[1][1]],\n                ];\n                if (dragItems.size > 1 && nodeExtent && !dragItem.extent) {\n                    const { positionAbsolute } = dragItem.internals;\n                    const x1 = positionAbsolute.x - nodesBox.x + nodeExtent[0][0];\n                    const x2 = positionAbsolute.x + dragItem.measured.width - nodesBox.x2 + nodeExtent[1][0];\n                    const y1 = positionAbsolute.y - nodesBox.y + nodeExtent[0][1];\n                    const y2 = positionAbsolute.y + dragItem.measured.height - nodesBox.y2 + nodeExtent[1][1];\n                    adjustedNodeExtent = [\n                        [x1, y1],\n                        [x2, y2],\n                    ];\n                }\n                const { position, positionAbsolute } = calculateNodePosition({\n                    nodeId: id,\n                    nextPosition,\n                    nodeLookup,\n                    nodeExtent: adjustedNodeExtent,\n                    nodeOrigin,\n                    onError,\n                });\n                // we want to make sure that we only fire a change event when there is a change\n                hasChange = hasChange || dragItem.position.x !== position.x || dragItem.position.y !== position.y;\n                dragItem.position = position;\n                dragItem.internals.positionAbsolute = positionAbsolute;\n            }\n            if (!hasChange) {\n                return;\n            }\n            updateNodePositions(dragItems, true);\n            if (dragEvent && (onDrag || onNodeDrag || (!nodeId && onSelectionDrag))) {\n                const [currentNode, currentNodes] = getEventHandlerParams({\n                    nodeId,\n                    dragItems,\n                    nodeLookup,\n                });\n                onDrag?.(dragEvent, dragItems, currentNode, currentNodes);\n                onNodeDrag?.(dragEvent, currentNode, currentNodes);\n                if (!nodeId) {\n                    onSelectionDrag?.(dragEvent, currentNodes);\n                }\n            }\n        }\n        async function autoPan() {\n            if (!containerBounds) {\n                return;\n            }\n            const { transform, panBy, autoPanSpeed } = getStoreItems();\n            const [xMovement, yMovement] = calcAutoPan(mousePosition, containerBounds, autoPanSpeed);\n            if (xMovement !== 0 || yMovement !== 0) {\n                lastPos.x = (lastPos.x ?? 0) - xMovement / transform[2];\n                lastPos.y = (lastPos.y ?? 0) - yMovement / transform[2];\n                if (await panBy({ x: xMovement, y: yMovement })) {\n                    updateNodes(lastPos, null);\n                }\n            }\n            autoPanId = requestAnimationFrame(autoPan);\n        }\n        function startDrag(event) {\n            const { nodeLookup, multiSelectionActive, nodesDraggable, transform, snapGrid, snapToGrid, selectNodesOnDrag, onNodeDragStart, onSelectionDragStart, unselectNodesAndEdges, } = getStoreItems();\n            dragStarted = true;\n            if ((!selectNodesOnDrag || !isSelectable) && !multiSelectionActive && nodeId) {\n                if (!nodeLookup.get(nodeId)?.selected) {\n                    // we need to reset selected nodes when selectNodesOnDrag=false\n                    unselectNodesAndEdges();\n                }\n            }\n            if (isSelectable && selectNodesOnDrag && nodeId) {\n                onNodeMouseDown?.(nodeId);\n            }\n            const pointerPos = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid });\n            lastPos = pointerPos;\n            dragItems = getDragItems(nodeLookup, nodesDraggable, pointerPos, nodeId);\n            if (dragItems.size > 0 && (onDragStart || onNodeDragStart || (!nodeId && onSelectionDragStart))) {\n                const [currentNode, currentNodes] = getEventHandlerParams({\n                    nodeId,\n                    dragItems,\n                    nodeLookup,\n                });\n                onDragStart?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n                onNodeDragStart?.(event.sourceEvent, currentNode, currentNodes);\n                if (!nodeId) {\n                    onSelectionDragStart?.(event.sourceEvent, currentNodes);\n                }\n            }\n        }\n        const d3DragInstance = drag()\n            .clickDistance(nodeClickDistance)\n            .on('start', (event) => {\n            const { domNode, nodeDragThreshold, transform, snapGrid, snapToGrid } = getStoreItems();\n            abortDrag = false;\n            if (nodeDragThreshold === 0) {\n                startDrag(event);\n            }\n            const pointerPos = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid });\n            lastPos = pointerPos;\n            containerBounds = domNode?.getBoundingClientRect() || null;\n            mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n        })\n            .on('drag', (event) => {\n            const { autoPanOnNodeDrag, transform, snapGrid, snapToGrid, nodeDragThreshold, nodeLookup } = getStoreItems();\n            const pointerPos = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid });\n            if ((event.sourceEvent.type === 'touchmove' && event.sourceEvent.touches.length > 1) ||\n                // if user deletes a node while dragging, we need to abort the drag to prevent errors\n                (nodeId && !nodeLookup.has(nodeId))) {\n                abortDrag = true;\n            }\n            if (abortDrag) {\n                return;\n            }\n            if (!autoPanStarted && autoPanOnNodeDrag && dragStarted) {\n                autoPanStarted = true;\n                autoPan();\n            }\n            if (!dragStarted) {\n                const x = pointerPos.xSnapped - (lastPos.x ?? 0);\n                const y = pointerPos.ySnapped - (lastPos.y ?? 0);\n                const distance = Math.sqrt(x * x + y * y);\n                if (distance > nodeDragThreshold) {\n                    startDrag(event);\n                }\n            }\n            // skip events without movement\n            if ((lastPos.x !== pointerPos.xSnapped || lastPos.y !== pointerPos.ySnapped) && dragItems && dragStarted) {\n                // dragEvent = event.sourceEvent as MouseEvent;\n                mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n                updateNodes(pointerPos, event.sourceEvent);\n            }\n        })\n            .on('end', (event) => {\n            if (!dragStarted || abortDrag) {\n                return;\n            }\n            autoPanStarted = false;\n            dragStarted = false;\n            cancelAnimationFrame(autoPanId);\n            if (dragItems.size > 0) {\n                const { nodeLookup, updateNodePositions, onNodeDragStop, onSelectionDragStop } = getStoreItems();\n                updateNodePositions(dragItems, false);\n                if (onDragStop || onNodeDragStop || (!nodeId && onSelectionDragStop)) {\n                    const [currentNode, currentNodes] = getEventHandlerParams({\n                        nodeId,\n                        dragItems,\n                        nodeLookup,\n                        dragging: false,\n                    });\n                    onDragStop?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n                    onNodeDragStop?.(event.sourceEvent, currentNode, currentNodes);\n                    if (!nodeId) {\n                        onSelectionDragStop?.(event.sourceEvent, currentNodes);\n                    }\n                }\n            }\n        })\n            .filter((event) => {\n            const target = event.target;\n            const isDraggable = !event.button &&\n                (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, domNode)) &&\n                (!handleSelector || hasSelector(target, handleSelector, domNode));\n            return isDraggable;\n        });\n        d3Selection.call(d3DragInstance);\n    }\n    function destroy() {\n        d3Selection?.on('.drag', null);\n    }\n    return {\n        update,\n        destroy,\n    };\n}\n\nfunction getNodesWithinDistance(position, nodeLookup, distance) {\n    const nodes = [];\n    const rect = {\n        x: position.x - distance,\n        y: position.y - distance,\n        width: distance * 2,\n        height: distance * 2,\n    };\n    for (const node of nodeLookup.values()) {\n        if (getOverlappingArea(rect, nodeToRect(node)) > 0) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n// this distance is used for the area around the user pointer\n// while doing a connection for finding the closest nodes\nconst ADDITIONAL_DISTANCE = 250;\nfunction getClosestHandle(position, connectionRadius, nodeLookup, fromHandle) {\n    let closestHandles = [];\n    let minDistance = Infinity;\n    const closeNodes = getNodesWithinDistance(position, nodeLookup, connectionRadius + ADDITIONAL_DISTANCE);\n    for (const node of closeNodes) {\n        const allHandles = [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\n        for (const handle of allHandles) {\n            // if the handle is the same as the fromHandle we skip it\n            if (fromHandle.nodeId === handle.nodeId && fromHandle.type === handle.type && fromHandle.id === handle.id) {\n                continue;\n            }\n            // determine absolute position of the handle\n            const { x, y } = getHandlePosition(node, handle, handle.position, true);\n            const distance = Math.sqrt(Math.pow(x - position.x, 2) + Math.pow(y - position.y, 2));\n            if (distance > connectionRadius) {\n                continue;\n            }\n            if (distance < minDistance) {\n                closestHandles = [{ ...handle, x, y }];\n                minDistance = distance;\n            }\n            else if (distance === minDistance) {\n                // when multiple handles are on the same distance we collect all of them\n                closestHandles.push({ ...handle, x, y });\n            }\n        }\n    }\n    if (!closestHandles.length) {\n        return null;\n    }\n    // when multiple handles overlay each other we prefer the opposite handle\n    if (closestHandles.length > 1) {\n        const oppositeHandleType = fromHandle.type === 'source' ? 'target' : 'source';\n        return closestHandles.find((handle) => handle.type === oppositeHandleType) ?? closestHandles[0];\n    }\n    return closestHandles[0];\n}\nfunction getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode, withAbsolutePosition = false) {\n    const node = nodeLookup.get(nodeId);\n    if (!node) {\n        return null;\n    }\n    const handles = connectionMode === 'strict'\n        ? node.internals.handleBounds?.[handleType]\n        : [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\n    const handle = (handleId ? handles?.find((h) => h.id === handleId) : handles?.[0]) ?? null;\n    return handle && withAbsolutePosition\n        ? { ...handle, ...getHandlePosition(node, handle, handle.position, true) }\n        : handle;\n}\nfunction getHandleType(edgeUpdaterType, handleDomNode) {\n    if (edgeUpdaterType) {\n        return edgeUpdaterType;\n    }\n    else if (handleDomNode?.classList.contains('target')) {\n        return 'target';\n    }\n    else if (handleDomNode?.classList.contains('source')) {\n        return 'source';\n    }\n    return null;\n}\nfunction isConnectionValid(isInsideConnectionRadius, isHandleValid) {\n    let isValid = null;\n    if (isHandleValid) {\n        isValid = true;\n    }\n    else if (isInsideConnectionRadius && !isHandleValid) {\n        isValid = false;\n    }\n    return isValid;\n}\n\nconst alwaysValid = () => true;\nfunction onPointerDown(event, { connectionMode, connectionRadius, handleId, nodeId, edgeUpdaterType, isTarget, domNode, nodeLookup, lib, autoPanOnConnect, flowId, panBy, cancelConnection, onConnectStart, onConnect, onConnectEnd, isValidConnection = alwaysValid, onReconnectEnd, updateConnection, getTransform, getFromHandle, autoPanSpeed, }) {\n    // when xyflow is used inside a shadow root we can't use document\n    const doc = getHostForElement(event.target);\n    let autoPanId = 0;\n    let closestHandle;\n    const { x, y } = getEventPosition(event);\n    const clickedHandle = doc?.elementFromPoint(x, y);\n    const handleType = getHandleType(edgeUpdaterType, clickedHandle);\n    const containerBounds = domNode?.getBoundingClientRect();\n    if (!containerBounds || !handleType) {\n        return;\n    }\n    const fromHandleInternal = getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode);\n    if (!fromHandleInternal) {\n        return;\n    }\n    let position = getEventPosition(event, containerBounds);\n    let autoPanStarted = false;\n    let connection = null;\n    let isValid = false;\n    let handleDomNode = null;\n    // when the user is moving the mouse close to the edge of the canvas while connecting we move the canvas\n    function autoPan() {\n        if (!autoPanOnConnect || !containerBounds) {\n            return;\n        }\n        const [x, y] = calcAutoPan(position, containerBounds, autoPanSpeed);\n        panBy({ x, y });\n        autoPanId = requestAnimationFrame(autoPan);\n    }\n    // Stays the same for all consecutive pointermove events\n    const fromHandle = {\n        ...fromHandleInternal,\n        nodeId,\n        type: handleType,\n        position: fromHandleInternal.position,\n    };\n    const fromNodeInternal = nodeLookup.get(nodeId);\n    const from = getHandlePosition(fromNodeInternal, fromHandle, Position.Left, true);\n    const newConnection = {\n        inProgress: true,\n        isValid: null,\n        from,\n        fromHandle,\n        fromPosition: fromHandle.position,\n        fromNode: fromNodeInternal,\n        to: position,\n        toHandle: null,\n        toPosition: oppositePosition[fromHandle.position],\n        toNode: null,\n    };\n    updateConnection(newConnection);\n    let previousConnection = newConnection;\n    onConnectStart?.(event, { nodeId, handleId, handleType });\n    function onPointerMove(event) {\n        if (!getFromHandle() || !fromHandle) {\n            onPointerUp(event);\n            return;\n        }\n        const transform = getTransform();\n        position = getEventPosition(event, containerBounds);\n        closestHandle = getClosestHandle(pointToRendererPoint(position, transform, false, [1, 1]), connectionRadius, nodeLookup, fromHandle);\n        if (!autoPanStarted) {\n            autoPan();\n            autoPanStarted = true;\n        }\n        const result = isValidHandle(event, {\n            handle: closestHandle,\n            connectionMode,\n            fromNodeId: nodeId,\n            fromHandleId: handleId,\n            fromType: isTarget ? 'target' : 'source',\n            isValidConnection,\n            doc,\n            lib,\n            flowId,\n            nodeLookup,\n        });\n        handleDomNode = result.handleDomNode;\n        connection = result.connection;\n        isValid = isConnectionValid(!!closestHandle, result.isValid);\n        const newConnection = {\n            // from stays the same\n            ...previousConnection,\n            isValid,\n            to: closestHandle && isValid\n                ? rendererPointToPoint({ x: closestHandle.x, y: closestHandle.y }, transform)\n                : position,\n            toHandle: result.toHandle,\n            toPosition: isValid && result.toHandle ? result.toHandle.position : oppositePosition[fromHandle.position],\n            toNode: result.toHandle ? nodeLookup.get(result.toHandle.nodeId) : null,\n        };\n        // we don't want to trigger an update when the connection\n        // is snapped to the same handle as before\n        if (isValid &&\n            closestHandle &&\n            previousConnection.toHandle &&\n            newConnection.toHandle &&\n            previousConnection.toHandle.type === newConnection.toHandle.type &&\n            previousConnection.toHandle.nodeId === newConnection.toHandle.nodeId &&\n            previousConnection.toHandle.id === newConnection.toHandle.id &&\n            previousConnection.to.x === newConnection.to.x &&\n            previousConnection.to.y === newConnection.to.y) {\n            return;\n        }\n        updateConnection(newConnection);\n        previousConnection = newConnection;\n    }\n    function onPointerUp(event) {\n        if ((closestHandle || handleDomNode) && connection && isValid) {\n            onConnect?.(connection);\n        }\n        // it's important to get a fresh reference from the store here\n        // in order to get the latest state of onConnectEnd\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { inProgress, ...connectionState } = previousConnection;\n        const finalConnectionState = {\n            ...connectionState,\n            toPosition: previousConnection.toHandle ? previousConnection.toPosition : null,\n        };\n        onConnectEnd?.(event, finalConnectionState);\n        if (edgeUpdaterType) {\n            onReconnectEnd?.(event, finalConnectionState);\n        }\n        cancelConnection();\n        cancelAnimationFrame(autoPanId);\n        autoPanStarted = false;\n        isValid = false;\n        connection = null;\n        handleDomNode = null;\n        doc.removeEventListener('mousemove', onPointerMove);\n        doc.removeEventListener('mouseup', onPointerUp);\n        doc.removeEventListener('touchmove', onPointerMove);\n        doc.removeEventListener('touchend', onPointerUp);\n    }\n    doc.addEventListener('mousemove', onPointerMove);\n    doc.addEventListener('mouseup', onPointerUp);\n    doc.addEventListener('touchmove', onPointerMove);\n    doc.addEventListener('touchend', onPointerUp);\n}\n// checks if  and returns connection in fom of an object { source: 123, target: 312 }\nfunction isValidHandle(event, { handle, connectionMode, fromNodeId, fromHandleId, fromType, doc, lib, flowId, isValidConnection = alwaysValid, nodeLookup, }) {\n    const isTarget = fromType === 'target';\n    const handleDomNode = handle\n        ? doc.querySelector(`.${lib}-flow__handle[data-id=\"${flowId}-${handle?.nodeId}-${handle?.id}-${handle?.type}\"]`)\n        : null;\n    const { x, y } = getEventPosition(event);\n    const handleBelow = doc.elementFromPoint(x, y);\n    // we always want to prioritize the handle below the mouse cursor over the closest distance handle,\n    // because it could be that the center of another handle is closer to the mouse pointer than the handle below the cursor\n    const handleToCheck = handleBelow?.classList.contains(`${lib}-flow__handle`) ? handleBelow : handleDomNode;\n    const result = {\n        handleDomNode: handleToCheck,\n        isValid: false,\n        connection: null,\n        toHandle: null,\n    };\n    if (handleToCheck) {\n        const handleType = getHandleType(undefined, handleToCheck);\n        const handleNodeId = handleToCheck.getAttribute('data-nodeid');\n        const handleId = handleToCheck.getAttribute('data-handleid');\n        const connectable = handleToCheck.classList.contains('connectable');\n        const connectableEnd = handleToCheck.classList.contains('connectableend');\n        if (!handleNodeId || !handleType) {\n            return result;\n        }\n        const connection = {\n            source: isTarget ? handleNodeId : fromNodeId,\n            sourceHandle: isTarget ? handleId : fromHandleId,\n            target: isTarget ? fromNodeId : handleNodeId,\n            targetHandle: isTarget ? fromHandleId : handleId,\n        };\n        result.connection = connection;\n        const isConnectable = connectable && connectableEnd;\n        // in strict mode we don't allow target to target or source to source connections\n        const isValid = isConnectable &&\n            (connectionMode === ConnectionMode.Strict\n                ? (isTarget && handleType === 'source') || (!isTarget && handleType === 'target')\n                : handleNodeId !== fromNodeId || handleId !== fromHandleId);\n        result.isValid = isValid && isValidConnection(connection);\n        result.toHandle = getHandle(handleNodeId, handleType, handleId, nodeLookup, connectionMode, false);\n    }\n    return result;\n}\nconst XYHandle = {\n    onPointerDown,\n    isValid: isValidHandle,\n};\n\nfunction XYMinimap({ domNode, panZoom, getTransform, getViewScale }) {\n    const selection = select(domNode);\n    function update({ translateExtent, width, height, zoomStep = 10, pannable = true, zoomable = true, inversePan = false, }) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const zoomHandler = (event) => {\n            const transform = getTransform();\n            if (event.sourceEvent.type !== 'wheel' || !panZoom) {\n                return;\n            }\n            const pinchDelta = -event.sourceEvent.deltaY *\n                (event.sourceEvent.deltaMode === 1 ? 0.05 : event.sourceEvent.deltaMode ? 1 : 0.002) *\n                zoomStep;\n            const nextZoom = transform[2] * Math.pow(2, pinchDelta);\n            panZoom.scaleTo(nextZoom);\n        };\n        let panStart = [0, 0];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const panStartHandler = (event) => {\n            if (event.sourceEvent.type === 'mousedown' || event.sourceEvent.type === 'touchstart') {\n                panStart = [\n                    event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX,\n                    event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY,\n                ];\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const panHandler = (event) => {\n            const transform = getTransform();\n            if ((event.sourceEvent.type !== 'mousemove' && event.sourceEvent.type !== 'touchmove') || !panZoom) {\n                return;\n            }\n            const panCurrent = [\n                event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX,\n                event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY,\n            ];\n            const panDelta = [panCurrent[0] - panStart[0], panCurrent[1] - panStart[1]];\n            panStart = panCurrent;\n            const moveScale = getViewScale() * Math.max(transform[2], Math.log(transform[2])) * (inversePan ? -1 : 1);\n            const position = {\n                x: transform[0] - panDelta[0] * moveScale,\n                y: transform[1] - panDelta[1] * moveScale,\n            };\n            const extent = [\n                [0, 0],\n                [width, height],\n            ];\n            panZoom.setViewportConstrained({\n                x: position.x,\n                y: position.y,\n                zoom: transform[2],\n            }, extent, translateExtent);\n        };\n        const zoomAndPanHandler = zoom()\n            .on('start', panStartHandler)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            .on('zoom', pannable ? panHandler : null)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            .on('zoom.wheel', zoomable ? zoomHandler : null);\n        selection.call(zoomAndPanHandler, {});\n    }\n    function destroy() {\n        selection.on('zoom', null);\n    }\n    return {\n        update,\n        destroy,\n        pointer,\n    };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst viewChanged = (prevViewport, eventViewport) => prevViewport.x !== eventViewport.x || prevViewport.y !== eventViewport.y || prevViewport.zoom !== eventViewport.k;\nconst transformToViewport = (transform) => ({\n    x: transform.x,\n    y: transform.y,\n    zoom: transform.k,\n});\nconst viewportToTransform = ({ x, y, zoom }) => zoomIdentity.translate(x, y).scale(zoom);\nconst isWrappedWithClass = (event, className) => event.target.closest(`.${className}`);\nconst isRightClickPan = (panOnDrag, usedButton) => usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);\nconst getD3Transition = (selection, duration = 0, onEnd = () => { }) => {\n    const hasDuration = typeof duration === 'number' && duration > 0;\n    if (!hasDuration) {\n        onEnd();\n    }\n    return hasDuration ? selection.transition().duration(duration).on('end', onEnd) : selection;\n};\nconst wheelDelta = (event) => {\n    const factor = event.ctrlKey && isMacOs() ? 10 : 1;\n    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * factor;\n};\n\nfunction createPanOnScrollHandler({ zoomPanValues, noWheelClassName, d3Selection, d3Zoom, panOnScrollMode, panOnScrollSpeed, zoomOnPinch, onPanZoomStart, onPanZoom, onPanZoomEnd, }) {\n    return (event) => {\n        if (isWrappedWithClass(event, noWheelClassName)) {\n            return false;\n        }\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        const currentZoom = d3Selection.property('__zoom').k || 1;\n        // macos sets ctrlKey=true for pinch gesture on a trackpad\n        if (event.ctrlKey && zoomOnPinch) {\n            const point = pointer(event);\n            const pinchDelta = wheelDelta(event);\n            const zoom = currentZoom * Math.pow(2, pinchDelta);\n            // @ts-ignore\n            d3Zoom.scaleTo(d3Selection, zoom, point, event);\n            return;\n        }\n        // increase scroll speed in firefox\n        // firefox: deltaMode === 1; chrome: deltaMode === 0\n        const deltaNormalize = event.deltaMode === 1 ? 20 : 1;\n        let deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;\n        let deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;\n        // this enables vertical scrolling with shift + scroll on windows\n        if (!isMacOs() && event.shiftKey && panOnScrollMode !== PanOnScrollMode.Vertical) {\n            deltaX = event.deltaY * deltaNormalize;\n            deltaY = 0;\n        }\n        d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed, \n        // @ts-ignore\n        { internal: true });\n        const nextViewport = transformToViewport(d3Selection.property('__zoom'));\n        clearTimeout(zoomPanValues.panScrollTimeout);\n        // for pan on scroll we need to handle the event calls on our own\n        // we can't use the start, zoom and end events from d3-zoom\n        // because start and move gets called on every scroll event and not once at the beginning\n        if (!zoomPanValues.isPanScrolling) {\n            zoomPanValues.isPanScrolling = true;\n            onPanZoomStart?.(event, nextViewport);\n        }\n        if (zoomPanValues.isPanScrolling) {\n            onPanZoom?.(event, nextViewport);\n            zoomPanValues.panScrollTimeout = setTimeout(() => {\n                onPanZoomEnd?.(event, nextViewport);\n                zoomPanValues.isPanScrolling = false;\n            }, 150);\n        }\n    };\n}\nfunction createZoomOnScrollHandler({ noWheelClassName, preventScrolling, d3ZoomHandler }) {\n    return function (event, d) {\n        // we still want to enable pinch zooming even if preventScrolling is set to false\n        const preventZoom = !preventScrolling && event.type === 'wheel' && !event.ctrlKey;\n        if (preventZoom || isWrappedWithClass(event, noWheelClassName)) {\n            return null;\n        }\n        event.preventDefault();\n        d3ZoomHandler.call(this, event, d);\n    };\n}\nfunction createPanZoomStartHandler({ zoomPanValues, onDraggingChange, onPanZoomStart }) {\n    return (event) => {\n        if (event.sourceEvent?.internal) {\n            return;\n        }\n        const viewport = transformToViewport(event.transform);\n        // we need to remember it here, because it's always 0 in the \"zoom\" event\n        zoomPanValues.mouseButton = event.sourceEvent?.button || 0;\n        zoomPanValues.isZoomingOrPanning = true;\n        zoomPanValues.prevViewport = viewport;\n        if (event.sourceEvent?.type === 'mousedown') {\n            onDraggingChange(true);\n        }\n        if (onPanZoomStart) {\n            onPanZoomStart?.(event.sourceEvent, viewport);\n        }\n    };\n}\nfunction createPanZoomHandler({ zoomPanValues, panOnDrag, onPaneContextMenu, onTransformChange, onPanZoom, }) {\n    return (event) => {\n        zoomPanValues.usedRightMouseButton = !!(onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0));\n        if (!event.sourceEvent?.sync) {\n            onTransformChange([event.transform.x, event.transform.y, event.transform.k]);\n        }\n        if (onPanZoom && !event.sourceEvent?.internal) {\n            onPanZoom?.(event.sourceEvent, transformToViewport(event.transform));\n        }\n    };\n}\nfunction createPanZoomEndHandler({ zoomPanValues, panOnDrag, panOnScroll, onDraggingChange, onPanZoomEnd, onPaneContextMenu, }) {\n    return (event) => {\n        if (event.sourceEvent?.internal) {\n            return;\n        }\n        zoomPanValues.isZoomingOrPanning = false;\n        if (onPaneContextMenu &&\n            isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0) &&\n            !zoomPanValues.usedRightMouseButton &&\n            event.sourceEvent) {\n            onPaneContextMenu(event.sourceEvent);\n        }\n        zoomPanValues.usedRightMouseButton = false;\n        onDraggingChange(false);\n        if (onPanZoomEnd && viewChanged(zoomPanValues.prevViewport, event.transform)) {\n            const viewport = transformToViewport(event.transform);\n            zoomPanValues.prevViewport = viewport;\n            clearTimeout(zoomPanValues.timerId);\n            zoomPanValues.timerId = setTimeout(() => {\n                onPanZoomEnd?.(event.sourceEvent, viewport);\n            }, \n            // we need a setTimeout for panOnScroll to supress multiple end events fired during scroll\n            panOnScroll ? 150 : 0);\n        }\n    };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction createFilter({ zoomActivationKeyPressed, zoomOnScroll, zoomOnPinch, panOnDrag, panOnScroll, zoomOnDoubleClick, userSelectionActive, noWheelClassName, noPanClassName, lib, }) {\n    return (event) => {\n        const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;\n        const pinchZoom = zoomOnPinch && event.ctrlKey;\n        if (event.button === 1 &&\n            event.type === 'mousedown' &&\n            (isWrappedWithClass(event, `${lib}-flow__node`) || isWrappedWithClass(event, `${lib}-flow__edge`))) {\n            return true;\n        }\n        // if all interactions are disabled, we prevent all zoom events\n        if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {\n            return false;\n        }\n        // during a selection we prevent all other interactions\n        if (userSelectionActive) {\n            return false;\n        }\n        // if the target element is inside an element with the nowheel class, we prevent zooming\n        if (isWrappedWithClass(event, noWheelClassName) && event.type === 'wheel') {\n            return false;\n        }\n        // if the target element is inside an element with the nopan class, we prevent panning\n        if (isWrappedWithClass(event, noPanClassName) &&\n            (event.type !== 'wheel' || (panOnScroll && event.type === 'wheel' && !zoomActivationKeyPressed))) {\n            return false;\n        }\n        if (!zoomOnPinch && event.ctrlKey && event.type === 'wheel') {\n            return false;\n        }\n        if (!zoomOnPinch && event.type === 'touchstart' && event.touches?.length > 1) {\n            event.preventDefault(); // if you manage to start with 2 touches, we prevent native zoom\n            return false;\n        }\n        // when there is no scroll handling enabled, we prevent all wheel events\n        if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === 'wheel') {\n            return false;\n        }\n        // if the pane is not movable, we prevent dragging it with mousestart or touchstart\n        if (!panOnDrag && (event.type === 'mousedown' || event.type === 'touchstart')) {\n            return false;\n        }\n        // if the pane is only movable using allowed clicks\n        if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && event.type === 'mousedown') {\n            return false;\n        }\n        // We only allow right clicks if pan on drag is set to right click\n        const buttonAllowed = (Array.isArray(panOnDrag) && panOnDrag.includes(event.button)) || !event.button || event.button <= 1;\n        // default filter for d3-zoom\n        return (!event.ctrlKey || event.type === 'wheel') && buttonAllowed;\n    };\n}\n\nfunction XYPanZoom({ domNode, minZoom, maxZoom, paneClickDistance, translateExtent, viewport, onPanZoom, onPanZoomStart, onPanZoomEnd, onDraggingChange, }) {\n    const zoomPanValues = {\n        isZoomingOrPanning: false,\n        usedRightMouseButton: false,\n        prevViewport: { x: 0, y: 0, zoom: 0 },\n        mouseButton: 0,\n        timerId: undefined,\n        panScrollTimeout: undefined,\n        isPanScrolling: false,\n    };\n    const bbox = domNode.getBoundingClientRect();\n    const d3ZoomInstance = zoom()\n        .clickDistance(!isNumeric(paneClickDistance) || paneClickDistance < 0 ? 0 : paneClickDistance)\n        .scaleExtent([minZoom, maxZoom])\n        .translateExtent(translateExtent);\n    const d3Selection = select(domNode).call(d3ZoomInstance);\n    setViewportConstrained({\n        x: viewport.x,\n        y: viewport.y,\n        zoom: clamp(viewport.zoom, minZoom, maxZoom),\n    }, [\n        [0, 0],\n        [bbox.width, bbox.height],\n    ], translateExtent);\n    const d3ZoomHandler = d3Selection.on('wheel.zoom');\n    const d3DblClickZoomHandler = d3Selection.on('dblclick.zoom');\n    d3ZoomInstance.wheelDelta(wheelDelta);\n    function setTransform(transform, options) {\n        if (d3Selection) {\n            return new Promise((resolve) => {\n                d3ZoomInstance?.transform(getD3Transition(d3Selection, options?.duration, () => resolve(true)), transform);\n            });\n        }\n        return Promise.resolve(false);\n    }\n    // public functions\n    function update({ noWheelClassName, noPanClassName, onPaneContextMenu, userSelectionActive, panOnScroll, panOnDrag, panOnScrollMode, panOnScrollSpeed, preventScrolling, zoomOnPinch, zoomOnScroll, zoomOnDoubleClick, zoomActivationKeyPressed, lib, onTransformChange, }) {\n        if (userSelectionActive && !zoomPanValues.isZoomingOrPanning) {\n            destroy();\n        }\n        const isPanOnScroll = panOnScroll && !zoomActivationKeyPressed && !userSelectionActive;\n        const wheelHandler = isPanOnScroll\n            ? createPanOnScrollHandler({\n                zoomPanValues,\n                noWheelClassName,\n                d3Selection,\n                d3Zoom: d3ZoomInstance,\n                panOnScrollMode,\n                panOnScrollSpeed,\n                zoomOnPinch,\n                onPanZoomStart,\n                onPanZoom,\n                onPanZoomEnd,\n            })\n            : createZoomOnScrollHandler({\n                noWheelClassName,\n                preventScrolling,\n                d3ZoomHandler,\n            });\n        d3Selection.on('wheel.zoom', wheelHandler, { passive: false });\n        if (!userSelectionActive) {\n            // pan zoom start\n            const startHandler = createPanZoomStartHandler({\n                zoomPanValues,\n                onDraggingChange,\n                onPanZoomStart,\n            });\n            d3ZoomInstance.on('start', startHandler);\n            // pan zoom\n            const panZoomHandler = createPanZoomHandler({\n                zoomPanValues,\n                panOnDrag,\n                onPaneContextMenu: !!onPaneContextMenu,\n                onPanZoom,\n                onTransformChange,\n            });\n            d3ZoomInstance.on('zoom', panZoomHandler);\n            // pan zoom end\n            const panZoomEndHandler = createPanZoomEndHandler({\n                zoomPanValues,\n                panOnDrag,\n                panOnScroll,\n                onPaneContextMenu,\n                onPanZoomEnd,\n                onDraggingChange,\n            });\n            d3ZoomInstance.on('end', panZoomEndHandler);\n        }\n        const filter = createFilter({\n            zoomActivationKeyPressed,\n            panOnDrag,\n            zoomOnScroll,\n            panOnScroll,\n            zoomOnDoubleClick,\n            zoomOnPinch,\n            userSelectionActive,\n            noPanClassName,\n            noWheelClassName,\n            lib,\n        });\n        d3ZoomInstance.filter(filter);\n        // We cannot add zoomOnDoubleClick to the filter above because\n        // double tapping on touch screens circumvents the filter and\n        // dblclick.zoom is fired on the selection directly\n        if (zoomOnDoubleClick) {\n            d3Selection.on('dblclick.zoom', d3DblClickZoomHandler);\n        }\n        else {\n            d3Selection.on('dblclick.zoom', null);\n        }\n    }\n    function destroy() {\n        d3ZoomInstance.on('zoom', null);\n    }\n    async function setViewportConstrained(viewport, extent, translateExtent) {\n        const nextTransform = viewportToTransform(viewport);\n        const contrainedTransform = d3ZoomInstance?.constrain()(nextTransform, extent, translateExtent);\n        if (contrainedTransform) {\n            await setTransform(contrainedTransform);\n        }\n        return new Promise((resolve) => resolve(contrainedTransform));\n    }\n    async function setViewport(viewport, options) {\n        const nextTransform = viewportToTransform(viewport);\n        await setTransform(nextTransform, options);\n        return new Promise((resolve) => resolve(nextTransform));\n    }\n    function syncViewport(viewport) {\n        if (d3Selection) {\n            const nextTransform = viewportToTransform(viewport);\n            const currentTransform = d3Selection.property('__zoom');\n            if (currentTransform.k !== viewport.zoom ||\n                currentTransform.x !== viewport.x ||\n                currentTransform.y !== viewport.y) {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                d3ZoomInstance?.transform(d3Selection, nextTransform, null, { sync: true });\n            }\n        }\n    }\n    function getViewport() {\n        const transform = d3Selection ? zoomTransform(d3Selection.node()) : { x: 0, y: 0, k: 1 };\n        return { x: transform.x, y: transform.y, zoom: transform.k };\n    }\n    function scaleTo(zoom, options) {\n        if (d3Selection) {\n            return new Promise((resolve) => {\n                d3ZoomInstance?.scaleTo(getD3Transition(d3Selection, options?.duration, () => resolve(true)), zoom);\n            });\n        }\n        return Promise.resolve(false);\n    }\n    function scaleBy(factor, options) {\n        if (d3Selection) {\n            return new Promise((resolve) => {\n                d3ZoomInstance?.scaleBy(getD3Transition(d3Selection, options?.duration, () => resolve(true)), factor);\n            });\n        }\n        return Promise.resolve(false);\n    }\n    function setScaleExtent(scaleExtent) {\n        d3ZoomInstance?.scaleExtent(scaleExtent);\n    }\n    function setTranslateExtent(translateExtent) {\n        d3ZoomInstance?.translateExtent(translateExtent);\n    }\n    function setClickDistance(distance) {\n        const validDistance = !isNumeric(distance) || distance < 0 ? 0 : distance;\n        d3ZoomInstance?.clickDistance(validDistance);\n    }\n    return {\n        update,\n        destroy,\n        setViewport,\n        setViewportConstrained,\n        getViewport,\n        scaleTo,\n        scaleBy,\n        setScaleExtent,\n        setTranslateExtent,\n        syncViewport,\n        setClickDistance,\n    };\n}\n\nvar ResizeControlVariant;\n(function (ResizeControlVariant) {\n    ResizeControlVariant[\"Line\"] = \"line\";\n    ResizeControlVariant[\"Handle\"] = \"handle\";\n})(ResizeControlVariant || (ResizeControlVariant = {}));\nconst XY_RESIZER_HANDLE_POSITIONS = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\nconst XY_RESIZER_LINE_POSITIONS = ['top', 'right', 'bottom', 'left'];\n\n/**\n * Get all connecting edges for a given set of nodes\n * @param width - new width of the node\n * @param prevWidth - previous width of the node\n * @param height - new height of the node\n * @param prevHeight - previous height of the node\n * @param affectsX - whether to invert the resize direction for the x axis\n * @param affectsY - whether to invert the resize direction for the y axis\n * @returns array of two numbers representing the direction of the resize for each axis, 0 = no change, 1 = increase, -1 = decrease\n */\nfunction getResizeDirection({ width, prevWidth, height, prevHeight, affectsX, affectsY, }) {\n    const deltaWidth = width - prevWidth;\n    const deltaHeight = height - prevHeight;\n    const direction = [deltaWidth > 0 ? 1 : deltaWidth < 0 ? -1 : 0, deltaHeight > 0 ? 1 : deltaHeight < 0 ? -1 : 0];\n    if (deltaWidth && affectsX) {\n        direction[0] = direction[0] * -1;\n    }\n    if (deltaHeight && affectsY) {\n        direction[1] = direction[1] * -1;\n    }\n    return direction;\n}\n/**\n * Parses the control position that is being dragged to dimensions that are being resized\n * @param controlPosition - position of the control that is being dragged\n * @returns isHorizontal, isVertical, affectsX, affectsY,\n */\nfunction getControlDirection(controlPosition) {\n    const isHorizontal = controlPosition.includes('right') || controlPosition.includes('left');\n    const isVertical = controlPosition.includes('bottom') || controlPosition.includes('top');\n    const affectsX = controlPosition.includes('left');\n    const affectsY = controlPosition.includes('top');\n    return {\n        isHorizontal,\n        isVertical,\n        affectsX,\n        affectsY,\n    };\n}\nfunction getLowerExtentClamp(lowerExtent, lowerBound) {\n    return Math.max(0, lowerBound - lowerExtent);\n}\nfunction getUpperExtentClamp(upperExtent, upperBound) {\n    return Math.max(0, upperExtent - upperBound);\n}\nfunction getSizeClamp(size, minSize, maxSize) {\n    return Math.max(0, minSize - size, size - maxSize);\n}\nfunction xor(a, b) {\n    return a ? !b : b;\n}\n/**\n * Calculates new width & height and x & y of node after resize based on pointer position\n * @description - Buckle up, this is a chunky one... If you want to determine the new dimensions of a node after a resize,\n * you have to account for all possible restrictions: min/max width/height of the node, the maximum extent the node is allowed\n * to move in (in this case: resize into) determined by the parent node, the minimal extent determined by child nodes\n * with expandParent or extent: 'parent' set and oh yeah, these things also have to work with keepAspectRatio!\n * The way this is done is by determining how much each of these restricting actually restricts the resize and then applying the\n * strongest restriction. Because the resize affects x, y and width, height and width, height of a opposing side with keepAspectRatio,\n * the resize amount is always kept in distX & distY amount (the distance in mouse movement)\n * Instead of clamping each value, we first calculate the biggest 'clamp' (for the lack of a better name) and then apply it to all values.\n * To complicate things nodeOrigin has to be taken into account as well. This is done by offsetting the nodes as if their origin is [0, 0],\n * then calculating the restrictions as usual\n * @param startValues - starting values of resize\n * @param controlDirection - dimensions affected by the resize\n * @param pointerPosition - the current pointer position corrected for snapping\n * @param boundaries - minimum and maximum dimensions of the node\n * @param keepAspectRatio - prevent changes of asprect ratio\n * @returns x, y, width and height of the node after resize\n */\nfunction getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, extent, childExtent) {\n    let { affectsX, affectsY } = controlDirection;\n    const { isHorizontal, isVertical } = controlDirection;\n    const isDiagonal = isHorizontal && isVertical;\n    const { xSnapped, ySnapped } = pointerPosition;\n    const { minWidth, maxWidth, minHeight, maxHeight } = boundaries;\n    const { x: startX, y: startY, width: startWidth, height: startHeight, aspectRatio } = startValues;\n    let distX = Math.floor(isHorizontal ? xSnapped - startValues.pointerX : 0);\n    let distY = Math.floor(isVertical ? ySnapped - startValues.pointerY : 0);\n    const newWidth = startWidth + (affectsX ? -distX : distX);\n    const newHeight = startHeight + (affectsY ? -distY : distY);\n    const originOffsetX = -nodeOrigin[0] * startWidth;\n    const originOffsetY = -nodeOrigin[1] * startHeight;\n    // Check if maxWidth, minWWidth, maxHeight, minHeight are restricting the resize\n    let clampX = getSizeClamp(newWidth, minWidth, maxWidth);\n    let clampY = getSizeClamp(newHeight, minHeight, maxHeight);\n    // Check if extent is restricting the resize\n    if (extent) {\n        let xExtentClamp = 0;\n        let yExtentClamp = 0;\n        if (affectsX && distX < 0) {\n            xExtentClamp = getLowerExtentClamp(startX + distX + originOffsetX, extent[0][0]);\n        }\n        else if (!affectsX && distX > 0) {\n            xExtentClamp = getUpperExtentClamp(startX + newWidth + originOffsetX, extent[1][0]);\n        }\n        if (affectsY && distY < 0) {\n            yExtentClamp = getLowerExtentClamp(startY + distY + originOffsetY, extent[0][1]);\n        }\n        else if (!affectsY && distY > 0) {\n            yExtentClamp = getUpperExtentClamp(startY + newHeight + originOffsetY, extent[1][1]);\n        }\n        clampX = Math.max(clampX, xExtentClamp);\n        clampY = Math.max(clampY, yExtentClamp);\n    }\n    // Check if the child extent is restricting the resize\n    if (childExtent) {\n        let xExtentClamp = 0;\n        let yExtentClamp = 0;\n        if (affectsX && distX > 0) {\n            xExtentClamp = getUpperExtentClamp(startX + distX, childExtent[0][0]);\n        }\n        else if (!affectsX && distX < 0) {\n            xExtentClamp = getLowerExtentClamp(startX + newWidth, childExtent[1][0]);\n        }\n        if (affectsY && distY > 0) {\n            yExtentClamp = getUpperExtentClamp(startY + distY, childExtent[0][1]);\n        }\n        else if (!affectsY && distY < 0) {\n            yExtentClamp = getLowerExtentClamp(startY + newHeight, childExtent[1][1]);\n        }\n        clampX = Math.max(clampX, xExtentClamp);\n        clampY = Math.max(clampY, yExtentClamp);\n    }\n    // Check if the aspect ratio resizing of the other side is restricting the resize\n    if (keepAspectRatio) {\n        if (isHorizontal) {\n            // Check if the max dimensions might be restricting the resize\n            const aspectHeightClamp = getSizeClamp(newWidth / aspectRatio, minHeight, maxHeight) * aspectRatio;\n            clampX = Math.max(clampX, aspectHeightClamp);\n            // Check if the extent is restricting the resize\n            if (extent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsX && !affectsY && isDiagonal)) {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startY + originOffsetY + newWidth / aspectRatio, extent[1][1]) * aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getLowerExtentClamp(startY + originOffsetY + (affectsX ? distX : -distX) / aspectRatio, extent[0][1]) *\n                            aspectRatio;\n                }\n                clampX = Math.max(clampX, aspectExtentClamp);\n            }\n            // Check if the child extent is restricting the resize\n            if (childExtent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsX && !affectsY && isDiagonal)) {\n                    aspectExtentClamp = getLowerExtentClamp(startY + newWidth / aspectRatio, childExtent[1][1]) * aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startY + (affectsX ? distX : -distX) / aspectRatio, childExtent[0][1]) * aspectRatio;\n                }\n                clampX = Math.max(clampX, aspectExtentClamp);\n            }\n        }\n        // Do the same thing for vertical resizing\n        if (isVertical) {\n            const aspectWidthClamp = getSizeClamp(newHeight * aspectRatio, minWidth, maxWidth) / aspectRatio;\n            clampY = Math.max(clampY, aspectWidthClamp);\n            if (extent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsY && !affectsX && isDiagonal)) {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startX + newHeight * aspectRatio + originOffsetX, extent[1][0]) / aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getLowerExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio + originOffsetX, extent[0][0]) /\n                            aspectRatio;\n                }\n                clampY = Math.max(clampY, aspectExtentClamp);\n            }\n            if (childExtent) {\n                let aspectExtentClamp = 0;\n                if ((!affectsX && !affectsY) || (affectsY && !affectsX && isDiagonal)) {\n                    aspectExtentClamp = getLowerExtentClamp(startX + newHeight * aspectRatio, childExtent[1][0]) / aspectRatio;\n                }\n                else {\n                    aspectExtentClamp =\n                        getUpperExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio, childExtent[0][0]) / aspectRatio;\n                }\n                clampY = Math.max(clampY, aspectExtentClamp);\n            }\n        }\n    }\n    distY = distY + (distY < 0 ? clampY : -clampY);\n    distX = distX + (distX < 0 ? clampX : -clampX);\n    if (keepAspectRatio) {\n        if (isDiagonal) {\n            if (newWidth > newHeight * aspectRatio) {\n                distY = (xor(affectsX, affectsY) ? -distX : distX) / aspectRatio;\n            }\n            else {\n                distX = (xor(affectsX, affectsY) ? -distY : distY) * aspectRatio;\n            }\n        }\n        else {\n            if (isHorizontal) {\n                distY = distX / aspectRatio;\n                affectsY = affectsX;\n            }\n            else {\n                distX = distY * aspectRatio;\n                affectsX = affectsY;\n            }\n        }\n    }\n    const x = affectsX ? startX + distX : startX;\n    const y = affectsY ? startY + distY : startY;\n    return {\n        width: startWidth + (affectsX ? -distX : distX),\n        height: startHeight + (affectsY ? -distY : distY),\n        x: nodeOrigin[0] * distX * (!affectsX ? 1 : -1) + x,\n        y: nodeOrigin[1] * distY * (!affectsY ? 1 : -1) + y,\n    };\n}\n\nconst initPrevValues = { width: 0, height: 0, x: 0, y: 0 };\nconst initStartValues = {\n    ...initPrevValues,\n    pointerX: 0,\n    pointerY: 0,\n    aspectRatio: 1,\n};\nfunction nodeToParentExtent(node) {\n    return [\n        [0, 0],\n        [node.measured.width, node.measured.height],\n    ];\n}\nfunction nodeToChildExtent(child, parent, nodeOrigin) {\n    const x = parent.position.x + child.position.x;\n    const y = parent.position.y + child.position.y;\n    const width = child.measured.width ?? 0;\n    const height = child.measured.height ?? 0;\n    const originOffsetX = nodeOrigin[0] * width;\n    const originOffsetY = nodeOrigin[1] * height;\n    return [\n        [x - originOffsetX, y - originOffsetY],\n        [x + width - originOffsetX, y + height - originOffsetY],\n    ];\n}\nfunction XYResizer({ domNode, nodeId, getStoreItems, onChange, onEnd }) {\n    const selection = select(domNode);\n    function update({ controlPosition, boundaries, keepAspectRatio, onResizeStart, onResize, onResizeEnd, shouldResize, }) {\n        let prevValues = { ...initPrevValues };\n        let startValues = { ...initStartValues };\n        const controlDirection = getControlDirection(controlPosition);\n        let node = undefined;\n        let childNodes = [];\n        let parentNode = undefined; // Needed to fix expandParent\n        let parentExtent = undefined;\n        let childExtent = undefined;\n        const dragHandler = drag()\n            .on('start', (event) => {\n            const { nodeLookup, transform, snapGrid, snapToGrid, nodeOrigin } = getStoreItems();\n            node = nodeLookup.get(nodeId);\n            if (!node) {\n                return;\n            }\n            const { xSnapped, ySnapped } = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid });\n            prevValues = {\n                width: node.measured.width ?? 0,\n                height: node.measured.height ?? 0,\n                x: node.position.x ?? 0,\n                y: node.position.y ?? 0,\n            };\n            startValues = {\n                ...prevValues,\n                pointerX: xSnapped,\n                pointerY: ySnapped,\n                aspectRatio: prevValues.width / prevValues.height,\n            };\n            parentNode = undefined;\n            if (node.parentId && (node.extent === 'parent' || node.expandParent)) {\n                parentNode = nodeLookup.get(node.parentId);\n                parentExtent = parentNode && node.extent === 'parent' ? nodeToParentExtent(parentNode) : undefined;\n            }\n            // Collect all child nodes to correct their relative positions when top/left changes\n            // Determine largest minimal extent the parent node is allowed to resize to\n            childNodes = [];\n            childExtent = undefined;\n            for (const [childId, child] of nodeLookup) {\n                if (child.parentId === nodeId) {\n                    childNodes.push({\n                        id: childId,\n                        position: { ...child.position },\n                        extent: child.extent,\n                    });\n                    if (child.extent === 'parent' || child.expandParent) {\n                        const extent = nodeToChildExtent(child, node, child.origin ?? nodeOrigin);\n                        if (childExtent) {\n                            childExtent = [\n                                [Math.min(extent[0][0], childExtent[0][0]), Math.min(extent[0][1], childExtent[0][1])],\n                                [Math.max(extent[1][0], childExtent[1][0]), Math.max(extent[1][1], childExtent[1][1])],\n                            ];\n                        }\n                        else {\n                            childExtent = extent;\n                        }\n                    }\n                }\n            }\n            onResizeStart?.(event, { ...prevValues });\n        })\n            .on('drag', (event) => {\n            const { transform, snapGrid, snapToGrid, nodeOrigin: storeNodeOrigin } = getStoreItems();\n            const pointerPosition = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid });\n            const childChanges = [];\n            if (!node) {\n                return;\n            }\n            const { x: prevX, y: prevY, width: prevWidth, height: prevHeight } = prevValues;\n            const change = {};\n            const nodeOrigin = node.origin ?? storeNodeOrigin;\n            const { width, height, x, y } = getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, parentExtent, childExtent);\n            const isWidthChange = width !== prevWidth;\n            const isHeightChange = height !== prevHeight;\n            const isXPosChange = x !== prevX && isWidthChange;\n            const isYPosChange = y !== prevY && isHeightChange;\n            if (!isXPosChange && !isYPosChange && !isWidthChange && !isHeightChange) {\n                return;\n            }\n            if (isXPosChange || isYPosChange || nodeOrigin[0] === 1 || nodeOrigin[1] === 1) {\n                change.x = isXPosChange ? x : prevValues.x;\n                change.y = isYPosChange ? y : prevValues.y;\n                prevValues.x = change.x;\n                prevValues.y = change.y;\n                // when top/left changes, correct the relative positions of child nodes\n                // so that they stay in the same position\n                if (childNodes.length > 0) {\n                    const xChange = x - prevX;\n                    const yChange = y - prevY;\n                    for (const childNode of childNodes) {\n                        childNode.position = {\n                            x: childNode.position.x - xChange + nodeOrigin[0] * (width - prevWidth),\n                            y: childNode.position.y - yChange + nodeOrigin[1] * (height - prevHeight),\n                        };\n                        childChanges.push(childNode);\n                    }\n                }\n            }\n            if (isWidthChange || isHeightChange) {\n                change.width = isWidthChange ? width : prevValues.width;\n                change.height = isHeightChange ? height : prevValues.height;\n                prevValues.width = change.width;\n                prevValues.height = change.height;\n            }\n            // Fix expandParent when resizing from top/left\n            if (parentNode && node.expandParent) {\n                const xLimit = nodeOrigin[0] * (change.width ?? 0);\n                if (change.x && change.x < xLimit) {\n                    prevValues.x = xLimit;\n                    startValues.x = startValues.x - (change.x - xLimit);\n                }\n                const yLimit = nodeOrigin[1] * (change.height ?? 0);\n                if (change.y && change.y < yLimit) {\n                    prevValues.y = yLimit;\n                    startValues.y = startValues.y - (change.y - yLimit);\n                }\n            }\n            const direction = getResizeDirection({\n                width: prevValues.width,\n                prevWidth,\n                height: prevValues.height,\n                prevHeight,\n                affectsX: controlDirection.affectsX,\n                affectsY: controlDirection.affectsY,\n            });\n            const nextValues = { ...prevValues, direction };\n            const callResize = shouldResize?.(event, nextValues);\n            if (callResize === false) {\n                return;\n            }\n            onResize?.(event, nextValues);\n            onChange(change, childChanges);\n        })\n            .on('end', (event) => {\n            onResizeEnd?.(event, { ...prevValues });\n            onEnd?.();\n        });\n        selection.call(dragHandler);\n    }\n    function destroy() {\n        selection.on('.drag', null);\n    }\n    return {\n        update,\n        destroy,\n    };\n}\n\nexport { ConnectionLineType, ConnectionMode, MarkerType, PanOnScrollMode, Position, ResizeControlVariant, SelectionMode, XYDrag, XYHandle, XYMinimap, XYPanZoom, XYResizer, XY_RESIZER_HANDLE_POSITIONS, XY_RESIZER_LINE_POSITIONS, addEdge, adoptUserNodes, areConnectionMapsEqual, boxToRect, calcAutoPan, calculateNodePosition, clamp, clampPosition, clampPositionToParent, createMarkerIds, devWarn, elementSelectionKeys, errorMessages, evaluateAbsolutePosition, fitView, getBezierEdgeCenter, getBezierPath, getBoundsOfBoxes, getBoundsOfRects, getConnectedEdges, getConnectionStatus, getDimensions, getEdgeCenter, getEdgePosition, getElementsToRemove, getElevatedEdgeZIndex, getEventPosition, getFitViewNodes, getHandleBounds, getHandlePosition, getHostForElement, getIncomers, getInternalNodesBounds, getMarkerId, getNodeDimensions, getNodePositionWithOrigin, getNodeToolbarTransform, getNodesBounds, getNodesInside, getOutgoers, getOverlappingArea, getPointerPosition, getSmoothStepPath, getStraightPath, getViewportForBounds, handleConnectionChange, handleExpandParent, infiniteExtent, initialConnection, isCoordinateExtent, isEdgeBase, isEdgeVisible, isInputDOMNode, isInternalNodeBase, isMacOs, isMouseEvent, isNodeBase, isNumeric, isRectObject, nodeHasDimensions, nodeToBox, nodeToRect, oppositePosition, panBy, pointToRendererPoint, reconnectEdge, rectToBox, rendererPointToPoint, shallowNodeData, snapPosition, updateAbsolutePositions, updateConnectionLookup, updateNodeInternals };\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,SAAS;AAC9B,SAASC,MAAM,EAAEC,OAAO,QAAQ,cAAc;AAC9C,SAASC,IAAI,EAAEC,YAAY,EAAEC,aAAa,QAAQ,SAAS;AAE3D,MAAMC,aAAa,GAAG;EAClBC,QAAQ,EAAEA,CAAA,KAAM,mHAAmH;EACnIC,QAAQ,EAAEA,CAAA,KAAM,6KAA6K;EAC7LC,QAAQ,EAAGC,QAAQ,IAAK,cAAcA,QAAQ,6CAA6C;EAC3FC,QAAQ,EAAEA,CAAA,KAAM,iFAAiF;EACjGC,QAAQ,EAAEA,CAAA,KAAM,2CAA2C;EAC3DC,QAAQ,EAAEA,CAAA,KAAM,yDAAyD;EACzEC,QAAQ,EAAGC,EAAE,IAAK,wBAAwBA,EAAE,kBAAkB;EAC9DC,QAAQ,EAAGC,IAAI,IAAK,gBAAgBA,IAAI,kBAAkB;EAC1DC,QAAQ,EAAEA,CAACC,UAAU,EAAE;IAAEJ,EAAE;IAAEK,YAAY;IAAEC;EAAa,CAAC,KAAK,4BAA4BF,UAAU,gBAAgBA,UAAU,KAAK,QAAQ,GAAGC,YAAY,GAAGC,YAAY,eAAeN,EAAE,GAAG;EAC7LO,QAAQ,EAAEA,CAAA,KAAM,gFAAgF;EAChGC,QAAQ,EAAGC,QAAQ,IAAK,cAAcA,QAAQ,6CAA6C;EAC3FC,QAAQ,EAAGV,EAAE,IAAK,iBAAiBA,EAAE,gIAAgI;EACrKW,QAAQ,EAAEA,CAACC,GAAG,GAAG,OAAO,KAAK,uEAAuEA,GAAG;AAC3G,CAAC;AACD,MAAMC,cAAc,GAAG,CACnB,CAACC,MAAM,CAACC,iBAAiB,EAAED,MAAM,CAACC,iBAAiB,CAAC,EACpD,CAACD,MAAM,CAACE,iBAAiB,EAAEF,MAAM,CAACE,iBAAiB,CAAC,CACvD;AACD,MAAMC,oBAAoB,GAAG,CAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,CAAC;AAErD,IAAIC,cAAc;AAClB,CAAC,UAAUA,cAAc,EAAE;EACvBA,cAAc,CAAC,QAAQ,CAAC,GAAG,QAAQ;EACnCA,cAAc,CAAC,OAAO,CAAC,GAAG,OAAO;AACrC,CAAC,EAAEA,cAAc,KAAKA,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3C,IAAIC,eAAe;AACnB,CAAC,UAAUA,eAAe,EAAE;EACxBA,eAAe,CAAC,MAAM,CAAC,GAAG,MAAM;EAChCA,eAAe,CAAC,UAAU,CAAC,GAAG,UAAU;EACxCA,eAAe,CAAC,YAAY,CAAC,GAAG,YAAY;AAChD,CAAC,EAAEA,eAAe,KAAKA,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC;AAC7C,IAAIC,aAAa;AACjB,CAAC,UAAUA,aAAa,EAAE;EACtBA,aAAa,CAAC,SAAS,CAAC,GAAG,SAAS;EACpCA,aAAa,CAAC,MAAM,CAAC,GAAG,MAAM;AAClC,CAAC,EAAEA,aAAa,KAAKA,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;AACzC,MAAMC,iBAAiB,GAAG;EACtBC,UAAU,EAAE,KAAK;EACjBC,OAAO,EAAE,IAAI;EACbC,IAAI,EAAE,IAAI;EACVC,UAAU,EAAE,IAAI;EAChBC,YAAY,EAAE,IAAI;EAClBC,QAAQ,EAAE,IAAI;EACdC,EAAE,EAAE,IAAI;EACRC,QAAQ,EAAE,IAAI;EACdC,UAAU,EAAE,IAAI;EAChBC,MAAM,EAAE;AACZ,CAAC;AAED,IAAIC,kBAAkB;AACtB,CAAC,UAAUA,kBAAkB,EAAE;EAC3BA,kBAAkB,CAAC,QAAQ,CAAC,GAAG,SAAS;EACxCA,kBAAkB,CAAC,UAAU,CAAC,GAAG,UAAU;EAC3CA,kBAAkB,CAAC,MAAM,CAAC,GAAG,MAAM;EACnCA,kBAAkB,CAAC,YAAY,CAAC,GAAG,YAAY;EAC/CA,kBAAkB,CAAC,cAAc,CAAC,GAAG,cAAc;AACvD,CAAC,EAAEA,kBAAkB,KAAKA,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC;AACnD,IAAIC,UAAU;AACd,CAAC,UAAUA,UAAU,EAAE;EACnBA,UAAU,CAAC,OAAO,CAAC,GAAG,OAAO;EAC7BA,UAAU,CAAC,aAAa,CAAC,GAAG,aAAa;AAC7C,CAAC,EAAEA,UAAU,KAAKA,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;AAEnC,IAAIC,QAAQ;AACZ,CAAC,UAAUA,QAAQ,EAAE;EACjBA,QAAQ,CAAC,MAAM,CAAC,GAAG,MAAM;EACzBA,QAAQ,CAAC,KAAK,CAAC,GAAG,KAAK;EACvBA,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO;EAC3BA,QAAQ,CAAC,QAAQ,CAAC,GAAG,QAAQ;AACjC,CAAC,EAAEA,QAAQ,KAAKA,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;AAC/B,MAAMC,gBAAgB,GAAG;EACrB,CAACD,QAAQ,CAACE,IAAI,GAAGF,QAAQ,CAACG,KAAK;EAC/B,CAACH,QAAQ,CAACG,KAAK,GAAGH,QAAQ,CAACE,IAAI;EAC/B,CAACF,QAAQ,CAACI,GAAG,GAAGJ,QAAQ,CAACK,MAAM;EAC/B,CAACL,QAAQ,CAACK,MAAM,GAAGL,QAAQ,CAACI;AAChC,CAAC;;AAED;AACA;AACA;AACA,SAASE,sBAAsBA,CAACC,CAAC,EAAEC,CAAC,EAAE;EAClC,IAAI,CAACD,CAAC,IAAI,CAACC,CAAC,EAAE;IACV,OAAO,IAAI;EACf;EACA,IAAI,CAACD,CAAC,IAAI,CAACC,CAAC,IAAID,CAAC,CAACE,IAAI,KAAKD,CAAC,CAACC,IAAI,EAAE;IAC/B,OAAO,KAAK;EAChB;EACA,IAAI,CAACF,CAAC,CAACE,IAAI,IAAI,CAACD,CAAC,CAACC,IAAI,EAAE;IACpB,OAAO,IAAI;EACf;EACA,KAAK,MAAMC,GAAG,IAAIH,CAAC,CAACI,IAAI,CAAC,CAAC,EAAE;IACxB,IAAI,CAACH,CAAC,CAACI,GAAG,CAACF,GAAG,CAAC,EAAE;MACb,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,sBAAsBA,CAACN,CAAC,EAAEC,CAAC,EAAEM,EAAE,EAAE;EACtC,IAAI,CAACA,EAAE,EAAE;IACL;EACJ;EACA,MAAMC,IAAI,GAAG,EAAE;EACfR,CAAC,CAACS,OAAO,CAAC,CAACC,UAAU,EAAEP,GAAG,KAAK;IAC3B,IAAI,CAACF,CAAC,EAAEI,GAAG,CAACF,GAAG,CAAC,EAAE;MACdK,IAAI,CAACG,IAAI,CAACD,UAAU,CAAC;IACzB;EACJ,CAAC,CAAC;EACF,IAAIF,IAAI,CAACI,MAAM,EAAE;IACbL,EAAE,CAACC,IAAI,CAAC;EACZ;AACJ;AACA,SAASK,mBAAmBA,CAAC/B,OAAO,EAAE;EAClC,OAAOA,OAAO,KAAK,IAAI,GAAG,IAAI,GAAGA,OAAO,GAAG,OAAO,GAAG,SAAS;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgC,UAAU,GAAIC,OAAO,IAAK,IAAI,IAAIA,OAAO,IAAI,QAAQ,IAAIA,OAAO,IAAI,QAAQ,IAAIA,OAAO;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAID,OAAO,IAAK,IAAI,IAAIA,OAAO,IAAI,UAAU,IAAIA,OAAO,IAAI,EAAE,QAAQ,IAAIA,OAAO,CAAC,IAAI,EAAE,QAAQ,IAAIA,OAAO,CAAC;AAC5H,MAAME,kBAAkB,GAAIF,OAAO,IAAK,IAAI,IAAIA,OAAO,IAAI,WAAW,IAAIA,OAAO,IAAI,EAAE,QAAQ,IAAIA,OAAO,CAAC,IAAI,EAAE,QAAQ,IAAIA,OAAO,CAAC;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,WAAW,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,KAAK,KAAK;EACxC,IAAI,CAACF,IAAI,CAAC5D,EAAE,EAAE;IACV,OAAO,EAAE;EACb;EACA,MAAM+D,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC5BF,KAAK,CAACZ,OAAO,CAAEe,IAAI,IAAK;IACpB,IAAIA,IAAI,CAACC,MAAM,KAAKN,IAAI,CAAC5D,EAAE,EAAE;MACzB+D,UAAU,CAACI,GAAG,CAACF,IAAI,CAACG,MAAM,CAAC;IAC/B;EACJ,CAAC,CAAC;EACF,OAAOP,KAAK,CAACQ,MAAM,CAAEC,CAAC,IAAKP,UAAU,CAACjB,GAAG,CAACwB,CAAC,CAACtE,EAAE,CAAC,CAAC;AACpD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuE,WAAW,GAAGA,CAACX,IAAI,EAAEC,KAAK,EAAEC,KAAK,KAAK;EACxC,IAAI,CAACF,IAAI,CAAC5D,EAAE,EAAE;IACV,OAAO,EAAE;EACb;EACA,MAAMwE,WAAW,GAAG,IAAIR,GAAG,CAAC,CAAC;EAC7BF,KAAK,CAACZ,OAAO,CAAEe,IAAI,IAAK;IACpB,IAAIA,IAAI,CAACG,MAAM,KAAKR,IAAI,CAAC5D,EAAE,EAAE;MACzBwE,WAAW,CAACL,GAAG,CAACF,IAAI,CAACC,MAAM,CAAC;IAChC;EACJ,CAAC,CAAC;EACF,OAAOL,KAAK,CAACQ,MAAM,CAAEC,CAAC,IAAKE,WAAW,CAAC1B,GAAG,CAACwB,CAAC,CAACtE,EAAE,CAAC,CAAC;AACrD,CAAC;AACD,MAAMyE,yBAAyB,GAAGA,CAACb,IAAI,EAAEc,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK;EAC7D,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAGC,iBAAiB,CAACjB,IAAI,CAAC;EACjD,MAAMkB,MAAM,GAAGlB,IAAI,CAACkB,MAAM,IAAIJ,UAAU;EACxC,MAAMK,OAAO,GAAGJ,KAAK,GAAGG,MAAM,CAAC,CAAC,CAAC;EACjC,MAAME,OAAO,GAAGJ,MAAM,GAAGE,MAAM,CAAC,CAAC,CAAC;EAClC,OAAO;IACHG,CAAC,EAAErB,IAAI,CAACsB,QAAQ,CAACD,CAAC,GAAGF,OAAO;IAC5BI,CAAC,EAAEvB,IAAI,CAACsB,QAAQ,CAACC,CAAC,GAAGH;EACzB,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,cAAc,GAAGA,CAACvB,KAAK,EAAEwB,MAAM,GAAG;EAAEX,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAAEY,UAAU,EAAEC;AAAU,CAAC,KAAK;EACtF,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,IAAI,CAACL,MAAM,CAACC,UAAU,EAAE;IAC9DK,OAAO,CAACC,IAAI,CAAC,sLAAsL,CAAC;EACxM;EACA,IAAI/B,KAAK,CAACR,MAAM,KAAK,CAAC,EAAE;IACpB,OAAO;MAAE4B,CAAC,EAAE,CAAC;MAAEE,CAAC,EAAE,CAAC;MAAER,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC;EAC9C;EACA,MAAMiB,GAAG,GAAGhC,KAAK,CAACiC,MAAM,CAAC,CAACC,OAAO,EAAEC,QAAQ,KAAK;IAC5C,MAAMC,IAAI,GAAG,OAAOD,QAAQ,KAAK,QAAQ;IACzC,IAAIE,WAAW,GAAG,CAACb,MAAM,CAACC,UAAU,IAAI,CAACW,IAAI,GAAGD,QAAQ,GAAGT,SAAS;IACpE,IAAIF,MAAM,CAACC,UAAU,EAAE;MACnBY,WAAW,GAAGD,IAAI,GACZZ,MAAM,CAACC,UAAU,CAACa,GAAG,CAACH,QAAQ,CAAC,GAC/B,CAACtC,kBAAkB,CAACsC,QAAQ,CAAC,GACzBX,MAAM,CAACC,UAAU,CAACa,GAAG,CAACH,QAAQ,CAAChG,EAAE,CAAC,GAClCgG,QAAQ;IACtB;IACA,MAAMI,OAAO,GAAGF,WAAW,GAAGG,SAAS,CAACH,WAAW,EAAEb,MAAM,CAACX,UAAU,CAAC,GAAG;MAAEO,CAAC,EAAE,CAAC;MAAEE,CAAC,EAAE,CAAC;MAAEmB,EAAE,EAAE,CAAC;MAAEC,EAAE,EAAE;IAAE,CAAC;IACtG,OAAOC,gBAAgB,CAACT,OAAO,EAAEK,OAAO,CAAC;EAC7C,CAAC,EAAE;IAAEnB,CAAC,EAAEwB,QAAQ;IAAEtB,CAAC,EAAEsB,QAAQ;IAAEH,EAAE,EAAE,CAACG,QAAQ;IAAEF,EAAE,EAAE,CAACE;EAAS,CAAC,CAAC;EAC9D,OAAOC,SAAS,CAACb,GAAG,CAAC;AACzB,CAAC;AACD;AACA;AACA;AACA;AACA,MAAMc,sBAAsB,GAAGA,CAACrB,UAAU,EAAED,MAAM,GAAG,CAAC,CAAC,KAAK;EACxD,IAAIC,UAAU,CAAC3C,IAAI,KAAK,CAAC,EAAE;IACvB,OAAO;MAAEsC,CAAC,EAAE,CAAC;MAAEE,CAAC,EAAE,CAAC;MAAER,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC;EAC9C;EACA,IAAIiB,GAAG,GAAG;IAAEZ,CAAC,EAAEwB,QAAQ;IAAEtB,CAAC,EAAEsB,QAAQ;IAAEH,EAAE,EAAE,CAACG,QAAQ;IAAEF,EAAE,EAAE,CAACE;EAAS,CAAC;EACpEnB,UAAU,CAACpC,OAAO,CAAEU,IAAI,IAAK;IACzB,IAAIyB,MAAM,CAAChB,MAAM,KAAKkB,SAAS,IAAIF,MAAM,CAAChB,MAAM,CAACT,IAAI,CAAC,EAAE;MACpD,MAAMwC,OAAO,GAAGC,SAAS,CAACzC,IAAI,CAAC;MAC/BiC,GAAG,GAAGW,gBAAgB,CAACX,GAAG,EAAEO,OAAO,CAAC;IACxC;EACJ,CAAC,CAAC;EACF,OAAOM,SAAS,CAACb,GAAG,CAAC;AACzB,CAAC;AACD,MAAMe,cAAc,GAAGA,CAAC/C,KAAK,EAAEgD,IAAI,EAAE,CAACC,EAAE,EAAEC,EAAE,EAAEC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEC,SAAS,GAAG,KAAK;AACpF;AACAC,yBAAyB,GAAG,KAAK,KAAK;EAClC,MAAMC,QAAQ,GAAG;IACb,GAAGC,oBAAoB,CAACP,IAAI,EAAE,CAACC,EAAE,EAAEC,EAAE,EAAEC,MAAM,CAAC,CAAC;IAC/CrC,KAAK,EAAEkC,IAAI,CAAClC,KAAK,GAAGqC,MAAM;IAC1BpC,MAAM,EAAEiC,IAAI,CAACjC,MAAM,GAAGoC;EAC1B,CAAC;EACD,MAAMK,YAAY,GAAG,EAAE;EACvB,KAAK,MAAMzD,IAAI,IAAIC,KAAK,CAACyD,MAAM,CAAC,CAAC,EAAE;IAC/B,MAAM;MAAEC,QAAQ;MAAEC,UAAU,GAAG,IAAI;MAAEC,MAAM,GAAG;IAAM,CAAC,GAAG7D,IAAI;IAC5D,IAAKsD,yBAAyB,IAAI,CAACM,UAAU,IAAKC,MAAM,EAAE;MACtD;IACJ;IACA,MAAM9C,KAAK,GAAG4C,QAAQ,CAAC5C,KAAK,IAAIf,IAAI,CAACe,KAAK,IAAIf,IAAI,CAAC8D,YAAY,IAAI,IAAI;IACvE,MAAM9C,MAAM,GAAG2C,QAAQ,CAAC3C,MAAM,IAAIhB,IAAI,CAACgB,MAAM,IAAIhB,IAAI,CAAC+D,aAAa,IAAI,IAAI;IAC3E,MAAMC,eAAe,GAAGC,kBAAkB,CAACV,QAAQ,EAAEW,UAAU,CAAClE,IAAI,CAAC,CAAC;IACtE,MAAMmE,IAAI,GAAG,CAACpD,KAAK,IAAI,CAAC,KAAKC,MAAM,IAAI,CAAC,CAAC;IACzC,MAAMoD,gBAAgB,GAAGf,SAAS,IAAIW,eAAe,GAAG,CAAC;IACzD,MAAMK,kBAAkB,GAAG,CAACrE,IAAI,CAACsE,SAAS,CAACC,YAAY;IACvD,MAAMC,SAAS,GAAGH,kBAAkB,IAAID,gBAAgB,IAAIJ,eAAe,IAAIG,IAAI;IACnF,IAAIK,SAAS,IAAIxE,IAAI,CAACyE,QAAQ,EAAE;MAC5BhB,YAAY,CAACjE,IAAI,CAACQ,IAAI,CAAC;IAC3B;EACJ;EACA,OAAOyD,YAAY;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMiB,iBAAiB,GAAGA,CAACzE,KAAK,EAAEC,KAAK,KAAK;EACxC,MAAMyE,OAAO,GAAG,IAAIvE,GAAG,CAAC,CAAC;EACzBH,KAAK,CAACX,OAAO,CAAEU,IAAI,IAAK;IACpB2E,OAAO,CAACpE,GAAG,CAACP,IAAI,CAAC5D,EAAE,CAAC;EACxB,CAAC,CAAC;EACF,OAAO8D,KAAK,CAACO,MAAM,CAAEJ,IAAI,IAAKsE,OAAO,CAACzF,GAAG,CAACmB,IAAI,CAACC,MAAM,CAAC,IAAIqE,OAAO,CAACzF,GAAG,CAACmB,IAAI,CAACG,MAAM,CAAC,CAAC;AACvF,CAAC;AACD,SAASoE,eAAeA,CAAClD,UAAU,EAAEmD,OAAO,EAAE;EAC1C,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC9B,MAAMC,aAAa,GAAGH,OAAO,EAAE5E,KAAK,GAAG,IAAIG,GAAG,CAACyE,OAAO,CAAC5E,KAAK,CAACgF,GAAG,CAAEjF,IAAI,IAAKA,IAAI,CAAC5D,EAAE,CAAC,CAAC,GAAG,IAAI;EAC3FsF,UAAU,CAACpC,OAAO,CAAEoB,CAAC,IAAK;IACtB,MAAM8D,SAAS,GAAG9D,CAAC,CAACiD,QAAQ,CAAC5C,KAAK,IAAIL,CAAC,CAACiD,QAAQ,CAAC3C,MAAM,KAAK6D,OAAO,EAAEK,kBAAkB,IAAI,CAACxE,CAAC,CAACmD,MAAM,CAAC;IACrG,IAAIW,SAAS,KAAK,CAACQ,aAAa,IAAIA,aAAa,CAAC9F,GAAG,CAACwB,CAAC,CAACtE,EAAE,CAAC,CAAC,EAAE;MAC1D0I,YAAY,CAACK,GAAG,CAACzE,CAAC,CAACtE,EAAE,EAAEsE,CAAC,CAAC;IAC7B;EACJ,CAAC,CAAC;EACF,OAAOoE,YAAY;AACvB;AACA,eAAeM,OAAOA,CAAC;EAAEnF,KAAK;EAAEc,KAAK;EAAEC,MAAM;EAAEqE,OAAO;EAAEC,OAAO;EAAEC;AAAQ,CAAC,EAAEV,OAAO,EAAE;EACjF,IAAI5E,KAAK,CAAClB,IAAI,KAAK,CAAC,EAAE;IAClB,OAAOyG,OAAO,CAACC,OAAO,CAAC,KAAK,CAAC;EACjC;EACA,MAAMC,MAAM,GAAG3C,sBAAsB,CAAC9C,KAAK,CAAC;EAC5C,MAAM0F,QAAQ,GAAGC,oBAAoB,CAACF,MAAM,EAAE3E,KAAK,EAAEC,MAAM,EAAE6D,OAAO,EAAES,OAAO,IAAIA,OAAO,EAAET,OAAO,EAAEU,OAAO,IAAIA,OAAO,EAAEV,OAAO,EAAEgB,OAAO,IAAI,GAAG,CAAC;EAC/I,MAAMR,OAAO,CAACS,WAAW,CAACH,QAAQ,EAAE;IAAEI,QAAQ,EAAElB,OAAO,EAAEkB;EAAS,CAAC,CAAC;EACpE,OAAOP,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,qBAAqBA,CAAC;EAAEC,MAAM;EAAEC,YAAY;EAAExE,UAAU;EAAEZ,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAAEqF,UAAU;EAAEC;AAAS,CAAC,EAAE;EAC5G,MAAMpG,IAAI,GAAG0B,UAAU,CAACa,GAAG,CAAC0D,MAAM,CAAC;EACnC,MAAMI,UAAU,GAAGrG,IAAI,CAACsG,QAAQ,GAAG5E,UAAU,CAACa,GAAG,CAACvC,IAAI,CAACsG,QAAQ,CAAC,GAAG3E,SAAS;EAC5E,MAAM;IAAEN,CAAC,EAAEkF,OAAO;IAAEhF,CAAC,EAAEiF;EAAQ,CAAC,GAAGH,UAAU,GAAGA,UAAU,CAAC/B,SAAS,CAACmC,gBAAgB,GAAG;IAAEpF,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC;EACtG,MAAML,MAAM,GAAGlB,IAAI,CAACkB,MAAM,IAAIJ,UAAU;EACxC,IAAI4F,MAAM,GAAGP,UAAU;EACvB,IAAInG,IAAI,CAAC0G,MAAM,KAAK,QAAQ,IAAI,CAAC1G,IAAI,CAAC2G,YAAY,EAAE;IAChD,IAAI,CAACN,UAAU,EAAE;MACbD,OAAO,GAAG,KAAK,EAAEzK,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACjD,CAAC,MACI;MACD,MAAMiL,WAAW,GAAGP,UAAU,CAAC1C,QAAQ,CAAC5C,KAAK;MAC7C,MAAM8F,YAAY,GAAGR,UAAU,CAAC1C,QAAQ,CAAC3C,MAAM;MAC/C,IAAI4F,WAAW,IAAIC,YAAY,EAAE;QAC7BH,MAAM,GAAG,CACL,CAACH,OAAO,EAAEC,OAAO,CAAC,EAClB,CAACD,OAAO,GAAGK,WAAW,EAAEJ,OAAO,GAAGK,YAAY,CAAC,CAClD;MACL;IACJ;EACJ,CAAC,MACI,IAAIR,UAAU,IAAIS,kBAAkB,CAAC9G,IAAI,CAAC0G,MAAM,CAAC,EAAE;IACpDA,MAAM,GAAG,CACL,CAAC1G,IAAI,CAAC0G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGH,OAAO,EAAEvG,IAAI,CAAC0G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGF,OAAO,CAAC,EAC1D,CAACxG,IAAI,CAAC0G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGH,OAAO,EAAEvG,IAAI,CAAC0G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGF,OAAO,CAAC,CAC7D;EACL;EACA,MAAMC,gBAAgB,GAAGK,kBAAkB,CAACJ,MAAM,CAAC,GAC7CK,aAAa,CAACb,YAAY,EAAEQ,MAAM,EAAE1G,IAAI,CAAC2D,QAAQ,CAAC,GAClDuC,YAAY;EAClB,OAAO;IACH5E,QAAQ,EAAE;MACND,CAAC,EAAEoF,gBAAgB,CAACpF,CAAC,GAAGkF,OAAO,GAAGvG,IAAI,CAAC2D,QAAQ,CAAC5C,KAAK,GAAGG,MAAM,CAAC,CAAC,CAAC;MACjEK,CAAC,EAAEkF,gBAAgB,CAAClF,CAAC,GAAGiF,OAAO,GAAGxG,IAAI,CAAC2D,QAAQ,CAAC3C,MAAM,GAAGE,MAAM,CAAC,CAAC;IACrE,CAAC;IACDuF;EACJ,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeO,mBAAmBA,CAAC;EAAEC,aAAa,GAAG,EAAE;EAAEC,aAAa,GAAG,EAAE;EAAEjH,KAAK;EAAEC,KAAK;EAAEiH;AAAgB,CAAC,EAAE;EAC1G,MAAMxC,OAAO,GAAG,IAAIvE,GAAG,CAAC6G,aAAa,CAAChC,GAAG,CAAEjF,IAAI,IAAKA,IAAI,CAAC5D,EAAE,CAAC,CAAC;EAC7D,MAAMgL,aAAa,GAAG,EAAE;EACxB,KAAK,MAAMpH,IAAI,IAAIC,KAAK,EAAE;IACtB,IAAID,IAAI,CAACqH,SAAS,KAAK,KAAK,EAAE;MAC1B;IACJ;IACA,MAAMC,UAAU,GAAG3C,OAAO,CAACzF,GAAG,CAACc,IAAI,CAAC5D,EAAE,CAAC;IACvC,MAAMmL,SAAS,GAAG,CAACD,UAAU,IAAItH,IAAI,CAACsG,QAAQ,IAAIc,aAAa,CAACI,IAAI,CAAE9G,CAAC,IAAKA,CAAC,CAACtE,EAAE,KAAK4D,IAAI,CAACsG,QAAQ,CAAC;IACnG,IAAIgB,UAAU,IAAIC,SAAS,EAAE;MACzBH,aAAa,CAAC5H,IAAI,CAACQ,IAAI,CAAC;IAC5B;EACJ;EACA,MAAMyH,OAAO,GAAG,IAAIrH,GAAG,CAAC8G,aAAa,CAACjC,GAAG,CAAE5E,IAAI,IAAKA,IAAI,CAACjE,EAAE,CAAC,CAAC;EAC7D,MAAMsL,cAAc,GAAGxH,KAAK,CAACO,MAAM,CAAEJ,IAAI,IAAKA,IAAI,CAACgH,SAAS,KAAK,KAAK,CAAC;EACvE,MAAMM,cAAc,GAAGjD,iBAAiB,CAAC0C,aAAa,EAAEM,cAAc,CAAC;EACvE,MAAME,aAAa,GAAGD,cAAc;EACpC,KAAK,MAAMtH,IAAI,IAAIqH,cAAc,EAAE;IAC/B,MAAMJ,UAAU,GAAGG,OAAO,CAACvI,GAAG,CAACmB,IAAI,CAACjE,EAAE,CAAC;IACvC,IAAIkL,UAAU,IAAI,CAACM,aAAa,CAACJ,IAAI,CAAEK,CAAC,IAAKA,CAAC,CAACzL,EAAE,KAAKiE,IAAI,CAACjE,EAAE,CAAC,EAAE;MAC5DwL,aAAa,CAACpI,IAAI,CAACa,IAAI,CAAC;IAC5B;EACJ;EACA,IAAI,CAAC8G,cAAc,EAAE;IACjB,OAAO;MACHjH,KAAK,EAAE0H,aAAa;MACpB3H,KAAK,EAAEmH;IACX,CAAC;EACL;EACA,MAAMU,oBAAoB,GAAG,MAAMX,cAAc,CAAC;IAC9ClH,KAAK,EAAEmH,aAAa;IACpBlH,KAAK,EAAE0H;EACX,CAAC,CAAC;EACF,IAAI,OAAOE,oBAAoB,KAAK,SAAS,EAAE;IAC3C,OAAOA,oBAAoB,GAAG;MAAE5H,KAAK,EAAE0H,aAAa;MAAE3H,KAAK,EAAEmH;IAAc,CAAC,GAAG;MAAElH,KAAK,EAAE,EAAE;MAAED,KAAK,EAAE;IAAG,CAAC;EAC3G;EACA,OAAO6H,oBAAoB;AAC/B;AAEA,MAAMC,KAAK,GAAGA,CAACC,GAAG,EAAEC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAG,CAAC,KAAKC,IAAI,CAACF,GAAG,CAACE,IAAI,CAACD,GAAG,CAACF,GAAG,EAAEC,GAAG,CAAC,EAAEC,GAAG,CAAC;AAC1E,MAAMnB,aAAa,GAAGA,CAACzF,QAAQ,GAAG;EAAED,CAAC,EAAE,CAAC;EAAEE,CAAC,EAAE;AAAE,CAAC,EAAEmF,MAAM,EAAE0B,UAAU,MAAM;EACtE/G,CAAC,EAAE0G,KAAK,CAACzG,QAAQ,CAACD,CAAC,EAAEqF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI0B,UAAU,EAAErH,KAAK,IAAI,CAAC,CAAC,CAAC;EAC3EQ,CAAC,EAAEwG,KAAK,CAACzG,QAAQ,CAACC,CAAC,EAAEmF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI0B,UAAU,EAAEpH,MAAM,IAAI,CAAC,CAAC;AAC/E,CAAC,CAAC;AACF,SAASqH,qBAAqBA,CAACC,aAAa,EAAEC,eAAe,EAAEC,MAAM,EAAE;EACnE,MAAM;IAAEzH,KAAK,EAAE6F,WAAW;IAAE5F,MAAM,EAAE6F;EAAa,CAAC,GAAG5F,iBAAiB,CAACuH,MAAM,CAAC;EAC9E,MAAM;IAAEnH,CAAC,EAAEkF,OAAO;IAAEhF,CAAC,EAAEiF;EAAQ,CAAC,GAAGgC,MAAM,CAAClE,SAAS,CAACmC,gBAAgB;EACpE,OAAOM,aAAa,CAACuB,aAAa,EAAE,CAChC,CAAC/B,OAAO,EAAEC,OAAO,CAAC,EAClB,CAACD,OAAO,GAAGK,WAAW,EAAEJ,OAAO,GAAGK,YAAY,CAAC,CAClD,EAAE0B,eAAe,CAAC;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,mBAAmB,GAAGA,CAACC,KAAK,EAAET,GAAG,EAAEC,GAAG,KAAK;EAC7C,IAAIQ,KAAK,GAAGT,GAAG,EAAE;IACb,OAAOF,KAAK,CAACI,IAAI,CAACQ,GAAG,CAACD,KAAK,GAAGT,GAAG,CAAC,EAAE,CAAC,EAAEA,GAAG,CAAC,GAAGA,GAAG;EACrD,CAAC,MACI,IAAIS,KAAK,GAAGR,GAAG,EAAE;IAClB,OAAO,CAACH,KAAK,CAACI,IAAI,CAACQ,GAAG,CAACD,KAAK,GAAGR,GAAG,CAAC,EAAE,CAAC,EAAED,GAAG,CAAC,GAAGA,GAAG;EACtD;EACA,OAAO,CAAC;AACZ,CAAC;AACD,MAAMW,WAAW,GAAGA,CAACC,GAAG,EAAEnD,MAAM,EAAEoD,KAAK,GAAG,EAAE,EAAEC,QAAQ,GAAG,EAAE,KAAK;EAC5D,MAAMC,SAAS,GAAGP,mBAAmB,CAACI,GAAG,CAACxH,CAAC,EAAE0H,QAAQ,EAAErD,MAAM,CAAC3E,KAAK,GAAGgI,QAAQ,CAAC,GAAGD,KAAK;EACvF,MAAMG,SAAS,GAAGR,mBAAmB,CAACI,GAAG,CAACtH,CAAC,EAAEwH,QAAQ,EAAErD,MAAM,CAAC1E,MAAM,GAAG+H,QAAQ,CAAC,GAAGD,KAAK;EACxF,OAAO,CAACE,SAAS,EAAEC,SAAS,CAAC;AACjC,CAAC;AACD,MAAMrG,gBAAgB,GAAGA,CAACsG,IAAI,EAAEC,IAAI,MAAM;EACtC9H,CAAC,EAAE8G,IAAI,CAACF,GAAG,CAACiB,IAAI,CAAC7H,CAAC,EAAE8H,IAAI,CAAC9H,CAAC,CAAC;EAC3BE,CAAC,EAAE4G,IAAI,CAACF,GAAG,CAACiB,IAAI,CAAC3H,CAAC,EAAE4H,IAAI,CAAC5H,CAAC,CAAC;EAC3BmB,EAAE,EAAEyF,IAAI,CAACD,GAAG,CAACgB,IAAI,CAACxG,EAAE,EAAEyG,IAAI,CAACzG,EAAE,CAAC;EAC9BC,EAAE,EAAEwF,IAAI,CAACD,GAAG,CAACgB,IAAI,CAACvG,EAAE,EAAEwG,IAAI,CAACxG,EAAE;AACjC,CAAC,CAAC;AACF,MAAMyG,SAAS,GAAGA,CAAC;EAAE/H,CAAC;EAAEE,CAAC;EAAER,KAAK;EAAEC;AAAO,CAAC,MAAM;EAC5CK,CAAC;EACDE,CAAC;EACDmB,EAAE,EAAErB,CAAC,GAAGN,KAAK;EACb4B,EAAE,EAAEpB,CAAC,GAAGP;AACZ,CAAC,CAAC;AACF,MAAM8B,SAAS,GAAGA,CAAC;EAAEzB,CAAC;EAAEE,CAAC;EAAEmB,EAAE;EAAEC;AAAG,CAAC,MAAM;EACrCtB,CAAC;EACDE,CAAC;EACDR,KAAK,EAAE2B,EAAE,GAAGrB,CAAC;EACbL,MAAM,EAAE2B,EAAE,GAAGpB;AACjB,CAAC,CAAC;AACF,MAAM2C,UAAU,GAAGA,CAAClE,IAAI,EAAEc,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK;EAC9C,MAAM;IAAEO,CAAC;IAAEE;EAAE,CAAC,GAAGzB,kBAAkB,CAACE,IAAI,CAAC,GACnCA,IAAI,CAACsE,SAAS,CAACmC,gBAAgB,GAC/B5F,yBAAyB,CAACb,IAAI,EAAEc,UAAU,CAAC;EACjD,OAAO;IACHO,CAAC;IACDE,CAAC;IACDR,KAAK,EAAEf,IAAI,CAAC2D,QAAQ,EAAE5C,KAAK,IAAIf,IAAI,CAACe,KAAK,IAAIf,IAAI,CAAC8D,YAAY,IAAI,CAAC;IACnE9C,MAAM,EAAEhB,IAAI,CAAC2D,QAAQ,EAAE3C,MAAM,IAAIhB,IAAI,CAACgB,MAAM,IAAIhB,IAAI,CAAC+D,aAAa,IAAI;EAC1E,CAAC;AACL,CAAC;AACD,MAAMtB,SAAS,GAAGA,CAACzC,IAAI,EAAEc,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK;EAC7C,MAAM;IAAEO,CAAC;IAAEE;EAAE,CAAC,GAAGzB,kBAAkB,CAACE,IAAI,CAAC,GACnCA,IAAI,CAACsE,SAAS,CAACmC,gBAAgB,GAC/B5F,yBAAyB,CAACb,IAAI,EAAEc,UAAU,CAAC;EACjD,OAAO;IACHO,CAAC;IACDE,CAAC;IACDmB,EAAE,EAAErB,CAAC,IAAIrB,IAAI,CAAC2D,QAAQ,EAAE5C,KAAK,IAAIf,IAAI,CAACe,KAAK,IAAIf,IAAI,CAAC8D,YAAY,IAAI,CAAC,CAAC;IACtEnB,EAAE,EAAEpB,CAAC,IAAIvB,IAAI,CAAC2D,QAAQ,EAAE3C,MAAM,IAAIhB,IAAI,CAACgB,MAAM,IAAIhB,IAAI,CAAC+D,aAAa,IAAI,CAAC;EAC5E,CAAC;AACL,CAAC;AACD,MAAMsF,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAKzG,SAAS,CAACF,gBAAgB,CAACwG,SAAS,CAACE,KAAK,CAAC,EAAEF,SAAS,CAACG,KAAK,CAAC,CAAC,CAAC;AAC1G,MAAMtF,kBAAkB,GAAGA,CAACuF,KAAK,EAAEC,KAAK,KAAK;EACzC,MAAMC,QAAQ,GAAGvB,IAAI,CAACD,GAAG,CAAC,CAAC,EAAEC,IAAI,CAACF,GAAG,CAACuB,KAAK,CAACnI,CAAC,GAAGmI,KAAK,CAACzI,KAAK,EAAE0I,KAAK,CAACpI,CAAC,GAAGoI,KAAK,CAAC1I,KAAK,CAAC,GAAGoH,IAAI,CAACD,GAAG,CAACsB,KAAK,CAACnI,CAAC,EAAEoI,KAAK,CAACpI,CAAC,CAAC,CAAC;EACjH,MAAMsI,QAAQ,GAAGxB,IAAI,CAACD,GAAG,CAAC,CAAC,EAAEC,IAAI,CAACF,GAAG,CAACuB,KAAK,CAACjI,CAAC,GAAGiI,KAAK,CAACxI,MAAM,EAAEyI,KAAK,CAAClI,CAAC,GAAGkI,KAAK,CAACzI,MAAM,CAAC,GAAGmH,IAAI,CAACD,GAAG,CAACsB,KAAK,CAACjI,CAAC,EAAEkI,KAAK,CAAClI,CAAC,CAAC,CAAC;EACnH,OAAO4G,IAAI,CAACyB,IAAI,CAACF,QAAQ,GAAGC,QAAQ,CAAC;AACzC,CAAC;AACD;AACA,MAAME,YAAY,GAAIC,GAAG,IAAKC,SAAS,CAACD,GAAG,CAAC/I,KAAK,CAAC,IAAIgJ,SAAS,CAACD,GAAG,CAAC9I,MAAM,CAAC,IAAI+I,SAAS,CAACD,GAAG,CAACzI,CAAC,CAAC,IAAI0I,SAAS,CAACD,GAAG,CAACvI,CAAC,CAAC;AACnH;AACA,MAAMwI,SAAS,GAAIrJ,CAAC,IAAK,CAACsJ,KAAK,CAACtJ,CAAC,CAAC,IAAIuJ,QAAQ,CAACvJ,CAAC,CAAC;AACjD;AACA,MAAMwJ,OAAO,GAAGA,CAAC9N,EAAE,EAAE+N,OAAO,KAAK;EAC7B,IAAIvI,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IACxCC,OAAO,CAACC,IAAI,CAAC,iBAAiBmI,OAAO,sCAAsC/N,EAAE,EAAE,CAAC;EACpF;AACJ,CAAC;AACD,MAAMgO,YAAY,GAAGA,CAAC9I,QAAQ,EAAE+I,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK;EAClD,OAAO;IACHhJ,CAAC,EAAEgJ,QAAQ,CAAC,CAAC,CAAC,GAAGlC,IAAI,CAACmC,KAAK,CAAChJ,QAAQ,CAACD,CAAC,GAAGgJ,QAAQ,CAAC,CAAC,CAAC,CAAC;IACrD9I,CAAC,EAAE8I,QAAQ,CAAC,CAAC,CAAC,GAAGlC,IAAI,CAACmC,KAAK,CAAChJ,QAAQ,CAACC,CAAC,GAAG8I,QAAQ,CAAC,CAAC,CAAC;EACxD,CAAC;AACL,CAAC;AACD,MAAM7G,oBAAoB,GAAGA,CAAC;EAAEnC,CAAC;EAAEE;AAAE,CAAC,EAAE,CAAC2B,EAAE,EAAEC,EAAE,EAAEC,MAAM,CAAC,EAAEmH,UAAU,GAAG,KAAK,EAAEF,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK;EAChG,MAAM/I,QAAQ,GAAG;IACbD,CAAC,EAAE,CAACA,CAAC,GAAG6B,EAAE,IAAIE,MAAM;IACpB7B,CAAC,EAAE,CAACA,CAAC,GAAG4B,EAAE,IAAIC;EAClB,CAAC;EACD,OAAOmH,UAAU,GAAGH,YAAY,CAAC9I,QAAQ,EAAE+I,QAAQ,CAAC,GAAG/I,QAAQ;AACnE,CAAC;AACD,MAAMkJ,oBAAoB,GAAGA,CAAC;EAAEnJ,CAAC;EAAEE;AAAE,CAAC,EAAE,CAAC2B,EAAE,EAAEC,EAAE,EAAEC,MAAM,CAAC,KAAK;EACzD,OAAO;IACH/B,CAAC,EAAEA,CAAC,GAAG+B,MAAM,GAAGF,EAAE;IAClB3B,CAAC,EAAEA,CAAC,GAAG6B,MAAM,GAAGD;EACpB,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMyC,oBAAoB,GAAGA,CAACF,MAAM,EAAE3E,KAAK,EAAEC,MAAM,EAAEsE,OAAO,EAAEC,OAAO,EAAEM,OAAO,KAAK;EAC/E,MAAM4E,KAAK,GAAG1J,KAAK,IAAI2E,MAAM,CAAC3E,KAAK,IAAI,CAAC,GAAG8E,OAAO,CAAC,CAAC;EACpD,MAAM6E,KAAK,GAAG1J,MAAM,IAAI0E,MAAM,CAAC1E,MAAM,IAAI,CAAC,GAAG6E,OAAO,CAAC,CAAC;EACtD,MAAMrK,IAAI,GAAG2M,IAAI,CAACF,GAAG,CAACwC,KAAK,EAAEC,KAAK,CAAC;EACnC,MAAMC,WAAW,GAAG5C,KAAK,CAACvM,IAAI,EAAE8J,OAAO,EAAEC,OAAO,CAAC;EACjD,MAAMqF,aAAa,GAAGlF,MAAM,CAACrE,CAAC,GAAGqE,MAAM,CAAC3E,KAAK,GAAG,CAAC;EACjD,MAAM8J,aAAa,GAAGnF,MAAM,CAACnE,CAAC,GAAGmE,MAAM,CAAC1E,MAAM,GAAG,CAAC;EAClD,MAAMK,CAAC,GAAGN,KAAK,GAAG,CAAC,GAAG6J,aAAa,GAAGD,WAAW;EACjD,MAAMpJ,CAAC,GAAGP,MAAM,GAAG,CAAC,GAAG6J,aAAa,GAAGF,WAAW;EAClD,OAAO;IAAEtJ,CAAC;IAAEE,CAAC;IAAE/F,IAAI,EAAEmP;EAAY,CAAC;AACtC,CAAC;AACD,MAAMG,OAAO,GAAGA,CAAA,KAAM,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAEC,SAAS,EAAEC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC;AACnG,SAASnE,kBAAkBA,CAACJ,MAAM,EAAE;EAChC,OAAOA,MAAM,KAAK/E,SAAS,IAAI+E,MAAM,KAAK,QAAQ;AACtD;AACA,SAASzF,iBAAiBA,CAACjB,IAAI,EAAE;EAC7B,OAAO;IACHe,KAAK,EAAEf,IAAI,CAAC2D,QAAQ,EAAE5C,KAAK,IAAIf,IAAI,CAACe,KAAK,IAAIf,IAAI,CAAC8D,YAAY,IAAI,CAAC;IACnE9C,MAAM,EAAEhB,IAAI,CAAC2D,QAAQ,EAAE3C,MAAM,IAAIhB,IAAI,CAACgB,MAAM,IAAIhB,IAAI,CAAC+D,aAAa,IAAI;EAC1E,CAAC;AACL;AACA,SAASmH,iBAAiBA,CAAClL,IAAI,EAAE;EAC7B,OAAQ,CAACA,IAAI,CAAC2D,QAAQ,EAAE5C,KAAK,IAAIf,IAAI,CAACe,KAAK,IAAIf,IAAI,CAAC8D,YAAY,MAAMnC,SAAS,IAC3E,CAAC3B,IAAI,CAAC2D,QAAQ,EAAE3C,MAAM,IAAIhB,IAAI,CAACgB,MAAM,IAAIhB,IAAI,CAAC+D,aAAa,MAAMpC,SAAS;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwJ,wBAAwBA,CAAC7J,QAAQ,EAAE8G,UAAU,GAAG;EAAErH,KAAK,EAAE,CAAC;EAAEC,MAAM,EAAE;AAAE,CAAC,EAAEsF,QAAQ,EAAE5E,UAAU,EAAEZ,UAAU,EAAE;EAChH,IAAIsK,YAAY,GAAG9E,QAAQ;EAC3B,MAAMG,gBAAgB,GAAG;IAAE,GAAGnF;EAAS,CAAC;EACxC,OAAO8J,YAAY,EAAE;IACjB,MAAM5C,MAAM,GAAG9G,UAAU,CAACa,GAAG,CAAC6I,YAAY,CAAC;IAC3CA,YAAY,GAAG5C,MAAM,EAAElC,QAAQ;IAC/B,IAAIkC,MAAM,EAAE;MACR,MAAMtH,MAAM,GAAGsH,MAAM,CAACtH,MAAM,IAAIJ,UAAU;MAC1C2F,gBAAgB,CAACpF,CAAC,IAAImH,MAAM,CAAClE,SAAS,CAACmC,gBAAgB,CAACpF,CAAC,GAAG,CAAC+G,UAAU,CAACrH,KAAK,IAAI,CAAC,IAAIG,MAAM,CAAC,CAAC,CAAC;MAC/FuF,gBAAgB,CAAClF,CAAC,IAAIiH,MAAM,CAAClE,SAAS,CAACmC,gBAAgB,CAAClF,CAAC,GAAG,CAAC6G,UAAU,CAACpH,MAAM,IAAI,CAAC,IAAIE,MAAM,CAAC,CAAC,CAAC;IACpG;EACJ;EACA,OAAOuF,gBAAgB;AAC3B;AAEA,SAAS4E,kBAAkBA,CAACC,KAAK,EAAE;EAAEjB,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAAEE,UAAU,GAAG,KAAK;EAAEgB;AAAU,CAAC,EAAE;EACrF,MAAM;IAAElK,CAAC;IAAEE;EAAE,CAAC,GAAGiK,gBAAgB,CAACF,KAAK,CAAC;EACxC,MAAMG,UAAU,GAAGjI,oBAAoB,CAAC;IAAEnC,CAAC;IAAEE;EAAE,CAAC,EAAEgK,SAAS,CAAC;EAC5D,MAAM;IAAElK,CAAC,EAAEqK,QAAQ;IAAEnK,CAAC,EAAEoK;EAAS,CAAC,GAAGpB,UAAU,GAAGH,YAAY,CAACqB,UAAU,EAAEpB,QAAQ,CAAC,GAAGoB,UAAU;EACjG;EACA,OAAO;IACHC,QAAQ;IACRC,QAAQ;IACR,GAAGF;EACP,CAAC;AACL;AACA,MAAMG,aAAa,GAAI5L,IAAI,KAAM;EAC7Be,KAAK,EAAEf,IAAI,CAAC6L,WAAW;EACvB7K,MAAM,EAAEhB,IAAI,CAAC8L;AACjB,CAAC,CAAC;AACF,MAAMC,iBAAiB,GAAInM,OAAO,IAAKA,OAAO,CAACoM,WAAW,GAAG,CAAC,IAAIC,MAAM,EAAEC,QAAQ;AAClF,MAAMC,SAAS,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC;AACjD,SAASC,cAAcA,CAACd,KAAK,EAAE;EAC3B;EACA,MAAM9K,MAAM,GAAI8K,KAAK,CAACe,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIf,KAAK,CAAC9K,MAAO;EAC5D,MAAM8L,OAAO,GAAGH,SAAS,CAACI,QAAQ,CAAC/L,MAAM,EAAEgM,QAAQ,CAAC,IAAIhM,MAAM,EAAEiM,YAAY,CAAC,iBAAiB,CAAC;EAC/F;EACA,OAAOH,OAAO,IAAI,CAAC,CAAC9L,MAAM,EAAEkM,OAAO,CAAC,QAAQ,CAAC;AACjD;AACA,MAAMC,YAAY,GAAIrB,KAAK,IAAK,SAAS,IAAIA,KAAK;AAClD,MAAME,gBAAgB,GAAGA,CAACF,KAAK,EAAE5F,MAAM,KAAK;EACxC,MAAMkH,OAAO,GAAGD,YAAY,CAACrB,KAAK,CAAC;EACnC,MAAMuB,IAAI,GAAGD,OAAO,GAAGtB,KAAK,CAACwB,OAAO,GAAGxB,KAAK,CAACyB,OAAO,GAAG,CAAC,CAAC,CAACD,OAAO;EACjE,MAAME,IAAI,GAAGJ,OAAO,GAAGtB,KAAK,CAAC2B,OAAO,GAAG3B,KAAK,CAACyB,OAAO,GAAG,CAAC,CAAC,CAACE,OAAO;EACjE,OAAO;IACH5L,CAAC,EAAEwL,IAAI,IAAInH,MAAM,EAAEwH,IAAI,IAAI,CAAC,CAAC;IAC7B3L,CAAC,EAAEyL,IAAI,IAAItH,MAAM,EAAEyH,GAAG,IAAI,CAAC;EAC/B,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA,MAAMC,eAAe,GAAGA,CAAC9Q,IAAI,EAAE+Q,WAAW,EAAEC,UAAU,EAAE9R,IAAI,EAAEyK,MAAM,KAAK;EACrE,MAAMsH,OAAO,GAAGF,WAAW,CAACG,gBAAgB,CAAC,IAAIlR,IAAI,EAAE,CAAC;EACxD,IAAI,CAACiR,OAAO,IAAI,CAACA,OAAO,CAAC9N,MAAM,EAAE;IAC7B,OAAO,IAAI;EACf;EACA,OAAOgO,KAAK,CAAC7P,IAAI,CAAC2P,OAAO,CAAC,CAACtI,GAAG,CAAEyI,MAAM,IAAK;IACvC,MAAMnJ,YAAY,GAAGmJ,MAAM,CAACC,qBAAqB,CAAC,CAAC;IACnD,OAAO;MACHvR,EAAE,EAAEsR,MAAM,CAACE,YAAY,CAAC,eAAe,CAAC;MACxCtR,IAAI;MACJ2J,MAAM;MACN3E,QAAQ,EAAEoM,MAAM,CAACE,YAAY,CAAC,gBAAgB,CAAC;MAC/CvM,CAAC,EAAE,CAACkD,YAAY,CAAC2I,IAAI,GAAGI,UAAU,CAACJ,IAAI,IAAI1R,IAAI;MAC/C+F,CAAC,EAAE,CAACgD,YAAY,CAAC4I,GAAG,GAAGG,UAAU,CAACH,GAAG,IAAI3R,IAAI;MAC7C,GAAGoQ,aAAa,CAAC8B,MAAM;IAC3B,CAAC;EACL,CAAC,CAAC;AACN,CAAC;AAED,SAASG,mBAAmBA,CAAC;EAAEC,OAAO;EAAEC,OAAO;EAAEC,OAAO;EAAEC,OAAO;EAAEC,cAAc;EAAEC,cAAc;EAAEC,cAAc;EAAEC;AAAgB,CAAC,EAAE;EAClI;EACA;EACA,MAAMC,OAAO,GAAGR,OAAO,GAAG,KAAK,GAAGI,cAAc,GAAG,KAAK,GAAGE,cAAc,GAAG,KAAK,GAAGJ,OAAO,GAAG,KAAK;EACnG,MAAMO,OAAO,GAAGR,OAAO,GAAG,KAAK,GAAGI,cAAc,GAAG,KAAK,GAAGE,cAAc,GAAG,KAAK,GAAGJ,OAAO,GAAG,KAAK;EACnG,MAAM9M,OAAO,GAAGgH,IAAI,CAACQ,GAAG,CAAC2F,OAAO,GAAGR,OAAO,CAAC;EAC3C,MAAM1M,OAAO,GAAG+G,IAAI,CAACQ,GAAG,CAAC4F,OAAO,GAAGR,OAAO,CAAC;EAC3C,OAAO,CAACO,OAAO,EAAEC,OAAO,EAAEpN,OAAO,EAAEC,OAAO,CAAC;AAC/C;AACA,SAASoN,sBAAsBA,CAACzF,QAAQ,EAAE0F,SAAS,EAAE;EACjD,IAAI1F,QAAQ,IAAI,CAAC,EAAE;IACf,OAAO,GAAG,GAAGA,QAAQ;EACzB;EACA,OAAO0F,SAAS,GAAG,EAAE,GAAGtG,IAAI,CAACuG,IAAI,CAAC,CAAC3F,QAAQ,CAAC;AAChD;AACA,SAAS4F,uBAAuBA,CAAC;EAAE9F,GAAG;EAAE+F,EAAE;EAAEC,EAAE;EAAEnM,EAAE;EAAEC,EAAE;EAAEmM;AAAE,CAAC,EAAE;EACzD,QAAQjG,GAAG;IACP,KAAKvK,QAAQ,CAACE,IAAI;MACd,OAAO,CAACoQ,EAAE,GAAGJ,sBAAsB,CAACI,EAAE,GAAGlM,EAAE,EAAEoM,CAAC,CAAC,EAAED,EAAE,CAAC;IACxD,KAAKvQ,QAAQ,CAACG,KAAK;MACf,OAAO,CAACmQ,EAAE,GAAGJ,sBAAsB,CAAC9L,EAAE,GAAGkM,EAAE,EAAEE,CAAC,CAAC,EAAED,EAAE,CAAC;IACxD,KAAKvQ,QAAQ,CAACI,GAAG;MACb,OAAO,CAACkQ,EAAE,EAAEC,EAAE,GAAGL,sBAAsB,CAACK,EAAE,GAAGlM,EAAE,EAAEmM,CAAC,CAAC,CAAC;IACxD,KAAKxQ,QAAQ,CAACK,MAAM;MAChB,OAAO,CAACiQ,EAAE,EAAEC,EAAE,GAAGL,sBAAsB,CAAC7L,EAAE,GAAGkM,EAAE,EAAEC,CAAC,CAAC,CAAC;EAC5D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAAC;EAAEjB,OAAO;EAAEC,OAAO;EAAEiB,cAAc,GAAG1Q,QAAQ,CAACK,MAAM;EAAEqP,OAAO;EAAEC,OAAO;EAAEgB,cAAc,GAAG3Q,QAAQ,CAACI,GAAG;EAAE+P,SAAS,GAAG;AAAM,CAAC,EAAE;EAC/I,MAAM,CAACP,cAAc,EAAEC,cAAc,CAAC,GAAGQ,uBAAuB,CAAC;IAC7D9F,GAAG,EAAEmG,cAAc;IACnBJ,EAAE,EAAEd,OAAO;IACXe,EAAE,EAAEd,OAAO;IACXrL,EAAE,EAAEsL,OAAO;IACXrL,EAAE,EAAEsL,OAAO;IACXa,CAAC,EAAEL;EACP,CAAC,CAAC;EACF,MAAM,CAACL,cAAc,EAAEC,cAAc,CAAC,GAAGM,uBAAuB,CAAC;IAC7D9F,GAAG,EAAEoG,cAAc;IACnBL,EAAE,EAAEZ,OAAO;IACXa,EAAE,EAAEZ,OAAO;IACXvL,EAAE,EAAEoL,OAAO;IACXnL,EAAE,EAAEoL,OAAO;IACXe,CAAC,EAAEL;EACP,CAAC,CAAC;EACF,MAAM,CAACS,MAAM,EAAEC,MAAM,EAAEhO,OAAO,EAAEC,OAAO,CAAC,GAAGyM,mBAAmB,CAAC;IAC3DC,OAAO;IACPC,OAAO;IACPC,OAAO;IACPC,OAAO;IACPC,cAAc;IACdC,cAAc;IACdC,cAAc;IACdC;EACJ,CAAC,CAAC;EACF,OAAO,CACH,IAAIP,OAAO,IAAIC,OAAO,KAAKG,cAAc,IAAIC,cAAc,IAAIC,cAAc,IAAIC,cAAc,IAAIL,OAAO,IAAIC,OAAO,EAAE,EACvHiB,MAAM,EACNC,MAAM,EACNhO,OAAO,EACPC,OAAO,CACV;AACL;;AAEA;AACA,SAASgO,aAAaA,CAAC;EAAEtB,OAAO;EAAEC,OAAO;EAAEC,OAAO;EAAEC;AAAS,CAAC,EAAE;EAC5D,MAAMoB,OAAO,GAAGlH,IAAI,CAACQ,GAAG,CAACqF,OAAO,GAAGF,OAAO,CAAC,GAAG,CAAC;EAC/C,MAAMQ,OAAO,GAAGN,OAAO,GAAGF,OAAO,GAAGE,OAAO,GAAGqB,OAAO,GAAGrB,OAAO,GAAGqB,OAAO;EACzE,MAAMC,OAAO,GAAGnH,IAAI,CAACQ,GAAG,CAACsF,OAAO,GAAGF,OAAO,CAAC,GAAG,CAAC;EAC/C,MAAMQ,OAAO,GAAGN,OAAO,GAAGF,OAAO,GAAGE,OAAO,GAAGqB,OAAO,GAAGrB,OAAO,GAAGqB,OAAO;EACzE,OAAO,CAAChB,OAAO,EAAEC,OAAO,EAAEc,OAAO,EAAEC,OAAO,CAAC;AAC/C;AACA,SAASC,qBAAqBA,CAAC;EAAEC,UAAU;EAAEC,UAAU;EAAEC,QAAQ,GAAG,KAAK;EAAEC,MAAM,GAAG,CAAC;EAAEC,eAAe,GAAG;AAAO,CAAC,EAAE;EAC/G,IAAI,CAACA,eAAe,EAAE;IAClB,OAAOD,MAAM;EACjB;EACA,MAAME,2BAA2B,GAAGH,QAAQ,IAAID,UAAU,CAACC,QAAQ,IAAIF,UAAU,CAACE,QAAQ;EAC1F,MAAMI,cAAc,GAAG3H,IAAI,CAACD,GAAG,CAACsH,UAAU,CAAClL,SAAS,CAACyL,CAAC,IAAI,CAAC,EAAEN,UAAU,CAACnL,SAAS,CAACyL,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;EAC/F,OAAOJ,MAAM,IAAIE,2BAA2B,GAAGC,cAAc,GAAG,CAAC,CAAC;AACtE;AACA,SAASE,aAAaA,CAAC;EAAER,UAAU;EAAEC,UAAU;EAAE1O,KAAK;EAAEC,MAAM;EAAEuK;AAAU,CAAC,EAAE;EACzE,MAAM0E,OAAO,GAAGrN,gBAAgB,CAACH,SAAS,CAAC+M,UAAU,CAAC,EAAE/M,SAAS,CAACgN,UAAU,CAAC,CAAC;EAC9E,IAAIQ,OAAO,CAAC5O,CAAC,KAAK4O,OAAO,CAACvN,EAAE,EAAE;IAC1BuN,OAAO,CAACvN,EAAE,IAAI,CAAC;EACnB;EACA,IAAIuN,OAAO,CAAC1O,CAAC,KAAK0O,OAAO,CAACtN,EAAE,EAAE;IAC1BsN,OAAO,CAACtN,EAAE,IAAI,CAAC;EACnB;EACA,MAAMuN,QAAQ,GAAG;IACb7O,CAAC,EAAE,CAACkK,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC;IAC/BhK,CAAC,EAAE,CAACgK,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC;IAC/BxK,KAAK,EAAEA,KAAK,GAAGwK,SAAS,CAAC,CAAC,CAAC;IAC3BvK,MAAM,EAAEA,MAAM,GAAGuK,SAAS,CAAC,CAAC;EAChC,CAAC;EACD,OAAOtH,kBAAkB,CAACiM,QAAQ,EAAEpN,SAAS,CAACmN,OAAO,CAAC,CAAC,GAAG,CAAC;AAC/D;AACA,MAAME,SAAS,GAAGA,CAAC;EAAE7P,MAAM;EAAE7D,YAAY;EAAE+D,MAAM;EAAE9D;AAAa,CAAC,KAAK,YAAY4D,MAAM,GAAG7D,YAAY,IAAI,EAAE,IAAI+D,MAAM,GAAG9D,YAAY,IAAI,EAAE,EAAE;AAC9I,MAAM0T,gBAAgB,GAAGA,CAAC/P,IAAI,EAAEH,KAAK,KAAK;EACtC,OAAOA,KAAK,CAACmQ,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAAChQ,MAAM,KAAKD,IAAI,CAACC,MAAM,IAC/CgQ,EAAE,CAAC9P,MAAM,KAAKH,IAAI,CAACG,MAAM,KACxB8P,EAAE,CAAC7T,YAAY,KAAK4D,IAAI,CAAC5D,YAAY,IAAK,CAAC6T,EAAE,CAAC7T,YAAY,IAAI,CAAC4D,IAAI,CAAC5D,YAAa,CAAC,KAClF6T,EAAE,CAAC5T,YAAY,KAAK2D,IAAI,CAAC3D,YAAY,IAAK,CAAC4T,EAAE,CAAC5T,YAAY,IAAI,CAAC2D,IAAI,CAAC3D,YAAa,CAAC,CAAC;AAC5F,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM6T,OAAO,GAAGA,CAACC,UAAU,EAAEtQ,KAAK,KAAK;EACnC,IAAI,CAACsQ,UAAU,CAAClQ,MAAM,IAAI,CAACkQ,UAAU,CAAChQ,MAAM,EAAE;IAC1C0J,OAAO,CAAC,KAAK,EAAEvO,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC3C,OAAOuE,KAAK;EAChB;EACA,IAAIG,IAAI;EACR,IAAIV,UAAU,CAAC6Q,UAAU,CAAC,EAAE;IACxBnQ,IAAI,GAAG;MAAE,GAAGmQ;IAAW,CAAC;EAC5B,CAAC,MACI;IACDnQ,IAAI,GAAG;MACH,GAAGmQ,UAAU;MACbpU,EAAE,EAAE+T,SAAS,CAACK,UAAU;IAC5B,CAAC;EACL;EACA,IAAIJ,gBAAgB,CAAC/P,IAAI,EAAEH,KAAK,CAAC,EAAE;IAC/B,OAAOA,KAAK;EAChB;EACA,IAAIG,IAAI,CAAC5D,YAAY,KAAK,IAAI,EAAE;IAC5B,OAAO4D,IAAI,CAAC5D,YAAY;EAC5B;EACA,IAAI4D,IAAI,CAAC3D,YAAY,KAAK,IAAI,EAAE;IAC5B,OAAO2D,IAAI,CAAC3D,YAAY;EAC5B;EACA,OAAOwD,KAAK,CAACuQ,MAAM,CAACpQ,IAAI,CAAC;AAC7B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqQ,aAAa,GAAGA,CAACC,OAAO,EAAEC,aAAa,EAAE1Q,KAAK,EAAE2E,OAAO,GAAG;EAAEgM,eAAe,EAAE;AAAK,CAAC,KAAK;EAC1F,MAAM;IAAEzU,EAAE,EAAE0U,SAAS;IAAE,GAAGC;EAAK,CAAC,GAAGJ,OAAO;EAC1C,IAAI,CAACC,aAAa,CAACtQ,MAAM,IAAI,CAACsQ,aAAa,CAACpQ,MAAM,EAAE;IAChD0J,OAAO,CAAC,KAAK,EAAEvO,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC3C,OAAOuE,KAAK;EAChB;EACA,MAAM8Q,SAAS,GAAG9Q,KAAK,CAACsH,IAAI,CAAEK,CAAC,IAAKA,CAAC,CAACzL,EAAE,KAAKuU,OAAO,CAACvU,EAAE,CAAC;EACxD,IAAI,CAAC4U,SAAS,EAAE;IACZ9G,OAAO,CAAC,KAAK,EAAEvO,aAAa,CAAC,UAAU,CAAC,CAACmV,SAAS,CAAC,CAAC;IACpD,OAAO5Q,KAAK;EAChB;EACA;EACA,MAAMG,IAAI,GAAG;IACT,GAAG0Q,IAAI;IACP3U,EAAE,EAAEyI,OAAO,CAACgM,eAAe,GAAGV,SAAS,CAACS,aAAa,CAAC,GAAGE,SAAS;IAClExQ,MAAM,EAAEsQ,aAAa,CAACtQ,MAAM;IAC5BE,MAAM,EAAEoQ,aAAa,CAACpQ,MAAM;IAC5B/D,YAAY,EAAEmU,aAAa,CAACnU,YAAY;IACxCC,YAAY,EAAEkU,aAAa,CAAClU;EAChC,CAAC;EACD,OAAOwD,KAAK,CAACO,MAAM,CAAEoH,CAAC,IAAKA,CAAC,CAACzL,EAAE,KAAK0U,SAAS,CAAC,CAACL,MAAM,CAACpQ,IAAI,CAAC;AAC/D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4Q,eAAeA,CAAC;EAAEnD,OAAO;EAAEC,OAAO;EAAEC,OAAO;EAAEC;AAAS,CAAC,EAAE;EAC9D,MAAM,CAACiB,MAAM,EAAEC,MAAM,EAAEhO,OAAO,EAAEC,OAAO,CAAC,GAAGgO,aAAa,CAAC;IACrDtB,OAAO;IACPC,OAAO;IACPC,OAAO;IACPC;EACJ,CAAC,CAAC;EACF,OAAO,CAAC,KAAKH,OAAO,IAAIC,OAAO,KAAKC,OAAO,IAAIC,OAAO,EAAE,EAAEiB,MAAM,EAAEC,MAAM,EAAEhO,OAAO,EAAEC,OAAO,CAAC;AAC/F;AAEA,MAAM8P,gBAAgB,GAAG;EACrB,CAAC5S,QAAQ,CAACE,IAAI,GAAG;IAAE6C,CAAC,EAAE,CAAC,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC;EAChC,CAACjD,QAAQ,CAACG,KAAK,GAAG;IAAE4C,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC;EAChC,CAACjD,QAAQ,CAACI,GAAG,GAAG;IAAE2C,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE,CAAC;EAAE,CAAC;EAC/B,CAACjD,QAAQ,CAACK,MAAM,GAAG;IAAE0C,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE;AACpC,CAAC;AACD,MAAM4P,YAAY,GAAGA,CAAC;EAAE7Q,MAAM;EAAE0O,cAAc,GAAG1Q,QAAQ,CAACK,MAAM;EAAE6B;AAAQ,CAAC,KAAK;EAC5E,IAAIwO,cAAc,KAAK1Q,QAAQ,CAACE,IAAI,IAAIwQ,cAAc,KAAK1Q,QAAQ,CAACG,KAAK,EAAE;IACvE,OAAO6B,MAAM,CAACe,CAAC,GAAGb,MAAM,CAACa,CAAC,GAAG;MAAEA,CAAC,EAAE,CAAC;MAAEE,CAAC,EAAE;IAAE,CAAC,GAAG;MAAEF,CAAC,EAAE,CAAC,CAAC;MAAEE,CAAC,EAAE;IAAE,CAAC;EACjE;EACA,OAAOjB,MAAM,CAACiB,CAAC,GAAGf,MAAM,CAACe,CAAC,GAAG;IAAEF,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC,GAAG;IAAEF,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE,CAAC;EAAE,CAAC;AACjE,CAAC;AACD,MAAMwH,QAAQ,GAAGA,CAAClK,CAAC,EAAEC,CAAC,KAAKqJ,IAAI,CAACuG,IAAI,CAACvG,IAAI,CAACiJ,GAAG,CAACtS,CAAC,CAACuC,CAAC,GAAGxC,CAAC,CAACwC,CAAC,EAAE,CAAC,CAAC,GAAG8G,IAAI,CAACiJ,GAAG,CAACtS,CAAC,CAACyC,CAAC,GAAG1C,CAAC,CAAC0C,CAAC,EAAE,CAAC,CAAC,CAAC;AACrF;AACA;AACA,SAAS8P,SAASA,CAAC;EAAE/Q,MAAM;EAAE0O,cAAc,GAAG1Q,QAAQ,CAACK,MAAM;EAAE6B,MAAM;EAAEyO,cAAc,GAAG3Q,QAAQ,CAACI,GAAG;EAAE4S,MAAM;EAAEC;AAAQ,CAAC,EAAE;EACrH,MAAMC,SAAS,GAAGN,gBAAgB,CAAClC,cAAc,CAAC;EAClD,MAAMyC,SAAS,GAAGP,gBAAgB,CAACjC,cAAc,CAAC;EAClD,MAAMyC,YAAY,GAAG;IAAErQ,CAAC,EAAEf,MAAM,CAACe,CAAC,GAAGmQ,SAAS,CAACnQ,CAAC,GAAGkQ,MAAM;IAAEhQ,CAAC,EAAEjB,MAAM,CAACiB,CAAC,GAAGiQ,SAAS,CAACjQ,CAAC,GAAGgQ;EAAO,CAAC;EAC/F,MAAMI,YAAY,GAAG;IAAEtQ,CAAC,EAAEb,MAAM,CAACa,CAAC,GAAGoQ,SAAS,CAACpQ,CAAC,GAAGkQ,MAAM;IAAEhQ,CAAC,EAAEf,MAAM,CAACe,CAAC,GAAGkQ,SAAS,CAAClQ,CAAC,GAAGgQ;EAAO,CAAC;EAC/F,MAAMK,GAAG,GAAGT,YAAY,CAAC;IACrB7Q,MAAM,EAAEoR,YAAY;IACpB1C,cAAc;IACdxO,MAAM,EAAEmR;EACZ,CAAC,CAAC;EACF,MAAME,WAAW,GAAGD,GAAG,CAACvQ,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG;EAC3C,MAAMyQ,OAAO,GAAGF,GAAG,CAACC,WAAW,CAAC;EAChC,IAAIE,MAAM,GAAG,EAAE;EACf,IAAIzD,OAAO,EAAEC,OAAO;EACpB,MAAMyD,eAAe,GAAG;IAAE3Q,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC;EACtC,MAAM0Q,eAAe,GAAG;IAAE5Q,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC;EACtC,MAAM,CAAC2Q,cAAc,EAAEC,cAAc,EAAEC,cAAc,EAAEC,cAAc,CAAC,GAAGjD,aAAa,CAAC;IACnFtB,OAAO,EAAExN,MAAM,CAACe,CAAC;IACjB0M,OAAO,EAAEzN,MAAM,CAACiB,CAAC;IACjByM,OAAO,EAAExN,MAAM,CAACa,CAAC;IACjB4M,OAAO,EAAEzN,MAAM,CAACe;EACpB,CAAC,CAAC;EACF;EACA,IAAIiQ,SAAS,CAACK,WAAW,CAAC,GAAGJ,SAAS,CAACI,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;IACxDvD,OAAO,GAAGgD,MAAM,CAACjQ,CAAC,IAAI6Q,cAAc;IACpC3D,OAAO,GAAG+C,MAAM,CAAC/P,CAAC,IAAI4Q,cAAc;IACpC;IACA;IACA;IACA,MAAMG,aAAa,GAAG,CAClB;MAAEjR,CAAC,EAAEiN,OAAO;MAAE/M,CAAC,EAAEmQ,YAAY,CAACnQ;IAAE,CAAC,EACjC;MAAEF,CAAC,EAAEiN,OAAO;MAAE/M,CAAC,EAAEoQ,YAAY,CAACpQ;IAAE,CAAC,CACpC;IACD;IACA;IACA;IACA,MAAMgR,eAAe,GAAG,CACpB;MAAElR,CAAC,EAAEqQ,YAAY,CAACrQ,CAAC;MAAEE,CAAC,EAAEgN;IAAQ,CAAC,EACjC;MAAElN,CAAC,EAAEsQ,YAAY,CAACtQ,CAAC;MAAEE,CAAC,EAAEgN;IAAQ,CAAC,CACpC;IACD,IAAIiD,SAAS,CAACK,WAAW,CAAC,KAAKC,OAAO,EAAE;MACpCC,MAAM,GAAGF,WAAW,KAAK,GAAG,GAAGS,aAAa,GAAGC,eAAe;IAClE,CAAC,MACI;MACDR,MAAM,GAAGF,WAAW,KAAK,GAAG,GAAGU,eAAe,GAAGD,aAAa;IAClE;EACJ,CAAC,MACI;IACD;IACA,MAAME,YAAY,GAAG,CAAC;MAAEnR,CAAC,EAAEqQ,YAAY,CAACrQ,CAAC;MAAEE,CAAC,EAAEoQ,YAAY,CAACpQ;IAAE,CAAC,CAAC;IAC/D,MAAMkR,YAAY,GAAG,CAAC;MAAEpR,CAAC,EAAEsQ,YAAY,CAACtQ,CAAC;MAAEE,CAAC,EAAEmQ,YAAY,CAACnQ;IAAE,CAAC,CAAC;IAC/D;IACA,IAAIsQ,WAAW,KAAK,GAAG,EAAE;MACrBE,MAAM,GAAGP,SAAS,CAACnQ,CAAC,KAAKyQ,OAAO,GAAGW,YAAY,GAAGD,YAAY;IAClE,CAAC,MACI;MACDT,MAAM,GAAGP,SAAS,CAACjQ,CAAC,KAAKuQ,OAAO,GAAGU,YAAY,GAAGC,YAAY;IAClE;IACA,IAAIzD,cAAc,KAAKC,cAAc,EAAE;MACnC,MAAM5P,IAAI,GAAG8I,IAAI,CAACQ,GAAG,CAACrI,MAAM,CAACuR,WAAW,CAAC,GAAGrR,MAAM,CAACqR,WAAW,CAAC,CAAC;MAChE;MACA,IAAIxS,IAAI,IAAIkS,MAAM,EAAE;QAChB,MAAMmB,SAAS,GAAGvK,IAAI,CAACF,GAAG,CAACsJ,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGlS,IAAI,CAAC;QACrD,IAAImS,SAAS,CAACK,WAAW,CAAC,KAAKC,OAAO,EAAE;UACpCE,eAAe,CAACH,WAAW,CAAC,GAAG,CAACH,YAAY,CAACG,WAAW,CAAC,GAAGvR,MAAM,CAACuR,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAIa,SAAS;QACzG,CAAC,MACI;UACDT,eAAe,CAACJ,WAAW,CAAC,GAAG,CAACF,YAAY,CAACE,WAAW,CAAC,GAAGrR,MAAM,CAACqR,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAIa,SAAS;QACzG;MACJ;IACJ;IACA;IACA,IAAI1D,cAAc,KAAKC,cAAc,EAAE;MACnC,MAAM0D,mBAAmB,GAAGd,WAAW,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;MAC3D,MAAMe,SAAS,GAAGpB,SAAS,CAACK,WAAW,CAAC,KAAKJ,SAAS,CAACkB,mBAAmB,CAAC;MAC3E,MAAME,kBAAkB,GAAGnB,YAAY,CAACiB,mBAAmB,CAAC,GAAGhB,YAAY,CAACgB,mBAAmB,CAAC;MAChG,MAAMG,kBAAkB,GAAGpB,YAAY,CAACiB,mBAAmB,CAAC,GAAGhB,YAAY,CAACgB,mBAAmB,CAAC;MAChG,MAAMI,gBAAgB,GAAIvB,SAAS,CAACK,WAAW,CAAC,KAAK,CAAC,KAAM,CAACe,SAAS,IAAIC,kBAAkB,IAAMD,SAAS,IAAIE,kBAAmB,CAAC,IAC9HtB,SAAS,CAACK,WAAW,CAAC,KAAK,CAAC,KAAM,CAACe,SAAS,IAAIE,kBAAkB,IAAMF,SAAS,IAAIC,kBAAmB,CAAE;MAC/G,IAAIE,gBAAgB,EAAE;QAClBhB,MAAM,GAAGF,WAAW,KAAK,GAAG,GAAGW,YAAY,GAAGC,YAAY;MAC9D;IACJ;IACA,MAAMO,cAAc,GAAG;MAAE3R,CAAC,EAAEqQ,YAAY,CAACrQ,CAAC,GAAG2Q,eAAe,CAAC3Q,CAAC;MAAEE,CAAC,EAAEmQ,YAAY,CAACnQ,CAAC,GAAGyQ,eAAe,CAACzQ;IAAE,CAAC;IACvG,MAAM0R,cAAc,GAAG;MAAE5R,CAAC,EAAEsQ,YAAY,CAACtQ,CAAC,GAAG4Q,eAAe,CAAC5Q,CAAC;MAAEE,CAAC,EAAEoQ,YAAY,CAACpQ,CAAC,GAAG0Q,eAAe,CAAC1Q;IAAE,CAAC;IACvG,MAAM2R,YAAY,GAAG/K,IAAI,CAACD,GAAG,CAACC,IAAI,CAACQ,GAAG,CAACqK,cAAc,CAAC3R,CAAC,GAAG0Q,MAAM,CAAC,CAAC,CAAC,CAAC1Q,CAAC,CAAC,EAAE8G,IAAI,CAACQ,GAAG,CAACsK,cAAc,CAAC5R,CAAC,GAAG0Q,MAAM,CAAC,CAAC,CAAC,CAAC1Q,CAAC,CAAC,CAAC;IACjH,MAAM8R,YAAY,GAAGhL,IAAI,CAACD,GAAG,CAACC,IAAI,CAACQ,GAAG,CAACqK,cAAc,CAACzR,CAAC,GAAGwQ,MAAM,CAAC,CAAC,CAAC,CAACxQ,CAAC,CAAC,EAAE4G,IAAI,CAACQ,GAAG,CAACsK,cAAc,CAAC1R,CAAC,GAAGwQ,MAAM,CAAC,CAAC,CAAC,CAACxQ,CAAC,CAAC,CAAC;IACjH;IACA,IAAI2R,YAAY,IAAIC,YAAY,EAAE;MAC9B7E,OAAO,GAAG,CAAC0E,cAAc,CAAC3R,CAAC,GAAG4R,cAAc,CAAC5R,CAAC,IAAI,CAAC;MACnDkN,OAAO,GAAGwD,MAAM,CAAC,CAAC,CAAC,CAACxQ,CAAC;IACzB,CAAC,MACI;MACD+M,OAAO,GAAGyD,MAAM,CAAC,CAAC,CAAC,CAAC1Q,CAAC;MACrBkN,OAAO,GAAG,CAACyE,cAAc,CAACzR,CAAC,GAAG0R,cAAc,CAAC1R,CAAC,IAAI,CAAC;IACvD;EACJ;EACA,MAAM6R,UAAU,GAAG,CACf9S,MAAM,EACN;IAAEe,CAAC,EAAEqQ,YAAY,CAACrQ,CAAC,GAAG2Q,eAAe,CAAC3Q,CAAC;IAAEE,CAAC,EAAEmQ,YAAY,CAACnQ,CAAC,GAAGyQ,eAAe,CAACzQ;EAAE,CAAC,EAChF,GAAGwQ,MAAM,EACT;IAAE1Q,CAAC,EAAEsQ,YAAY,CAACtQ,CAAC,GAAG4Q,eAAe,CAAC5Q,CAAC;IAAEE,CAAC,EAAEoQ,YAAY,CAACpQ,CAAC,GAAG0Q,eAAe,CAAC1Q;EAAE,CAAC,EAChFf,MAAM,CACT;EACD,OAAO,CAAC4S,UAAU,EAAE9E,OAAO,EAAEC,OAAO,EAAE6D,cAAc,EAAEC,cAAc,CAAC;AACzE;AACA,SAASgB,OAAOA,CAACxU,CAAC,EAAEC,CAAC,EAAEgQ,CAAC,EAAE/P,IAAI,EAAE;EAC5B,MAAMuU,QAAQ,GAAGnL,IAAI,CAACF,GAAG,CAACc,QAAQ,CAAClK,CAAC,EAAEC,CAAC,CAAC,GAAG,CAAC,EAAEiK,QAAQ,CAACjK,CAAC,EAAEgQ,CAAC,CAAC,GAAG,CAAC,EAAE/P,IAAI,CAAC;EACvE,MAAM;IAAEsC,CAAC;IAAEE;EAAE,CAAC,GAAGzC,CAAC;EAClB;EACA,IAAKD,CAAC,CAACwC,CAAC,KAAKA,CAAC,IAAIA,CAAC,KAAKyN,CAAC,CAACzN,CAAC,IAAMxC,CAAC,CAAC0C,CAAC,KAAKA,CAAC,IAAIA,CAAC,KAAKuN,CAAC,CAACvN,CAAE,EAAE;IACtD,OAAO,IAAIF,CAAC,IAAIE,CAAC,EAAE;EACvB;EACA;EACA,IAAI1C,CAAC,CAAC0C,CAAC,KAAKA,CAAC,EAAE;IACX,MAAMgS,IAAI,GAAG1U,CAAC,CAACwC,CAAC,GAAGyN,CAAC,CAACzN,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IAC/B,MAAMmS,IAAI,GAAG3U,CAAC,CAAC0C,CAAC,GAAGuN,CAAC,CAACvN,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/B,OAAO,KAAKF,CAAC,GAAGiS,QAAQ,GAAGC,IAAI,IAAIhS,CAAC,KAAKF,CAAC,IAAIE,CAAC,IAAIF,CAAC,IAAIE,CAAC,GAAG+R,QAAQ,GAAGE,IAAI,EAAE;EACjF;EACA,MAAMD,IAAI,GAAG1U,CAAC,CAACwC,CAAC,GAAGyN,CAAC,CAACzN,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAC/B,MAAMmS,IAAI,GAAG3U,CAAC,CAAC0C,CAAC,GAAGuN,CAAC,CAACvN,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EAC/B,OAAO,KAAKF,CAAC,IAAIE,CAAC,GAAG+R,QAAQ,GAAGE,IAAI,KAAKnS,CAAC,IAAIE,CAAC,IAAIF,CAAC,GAAGiS,QAAQ,GAAGC,IAAI,IAAIhS,CAAC,EAAE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkS,iBAAiBA,CAAC;EAAE3F,OAAO;EAAEC,OAAO;EAAEiB,cAAc,GAAG1Q,QAAQ,CAACK,MAAM;EAAEqP,OAAO;EAAEC,OAAO;EAAEgB,cAAc,GAAG3Q,QAAQ,CAACI,GAAG;EAAEgV,YAAY,GAAG,CAAC;EAAEpF,OAAO;EAAEC,OAAO;EAAEgD,MAAM,GAAG;AAAI,CAAC,EAAE;EAClL,MAAM,CAACQ,MAAM,EAAE7C,MAAM,EAAEC,MAAM,EAAEhO,OAAO,EAAEC,OAAO,CAAC,GAAGiQ,SAAS,CAAC;IACzD/Q,MAAM,EAAE;MAAEe,CAAC,EAAEyM,OAAO;MAAEvM,CAAC,EAAEwM;IAAQ,CAAC;IAClCiB,cAAc;IACdxO,MAAM,EAAE;MAAEa,CAAC,EAAE2M,OAAO;MAAEzM,CAAC,EAAE0M;IAAQ,CAAC;IAClCgB,cAAc;IACdqC,MAAM,EAAE;MAAEjQ,CAAC,EAAEiN,OAAO;MAAE/M,CAAC,EAAEgN;IAAQ,CAAC;IAClCgD;EACJ,CAAC,CAAC;EACF,MAAMoC,IAAI,GAAG5B,MAAM,CAAC7P,MAAM,CAAC,CAAC0R,GAAG,EAAEC,CAAC,EAAEC,CAAC,KAAK;IACtC,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAID,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAG/B,MAAM,CAACtS,MAAM,GAAG,CAAC,EAAE;MAChCsU,OAAO,GAAGV,OAAO,CAACtB,MAAM,CAAC+B,CAAC,GAAG,CAAC,CAAC,EAAED,CAAC,EAAE9B,MAAM,CAAC+B,CAAC,GAAG,CAAC,CAAC,EAAEJ,YAAY,CAAC;IACpE,CAAC,MACI;MACDK,OAAO,GAAG,GAAGD,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAGD,CAAC,CAACxS,CAAC,IAAIwS,CAAC,CAACtS,CAAC,EAAE;IACnD;IACAqS,GAAG,IAAIG,OAAO;IACd,OAAOH,GAAG;EACd,CAAC,EAAE,EAAE,CAAC;EACN,OAAO,CAACD,IAAI,EAAEzE,MAAM,EAAEC,MAAM,EAAEhO,OAAO,EAAEC,OAAO,CAAC;AACnD;AAEA,SAAS4S,iBAAiBA,CAAChU,IAAI,EAAE;EAC7B,OAAQA,IAAI,IACR,CAAC,EAAEA,IAAI,CAACsE,SAAS,CAACC,YAAY,IAAIvE,IAAI,CAACuN,OAAO,EAAE9N,MAAM,CAAC,IACvD,CAAC,EAAEO,IAAI,CAAC2D,QAAQ,CAAC5C,KAAK,IAAIf,IAAI,CAACe,KAAK,IAAIf,IAAI,CAAC8D,YAAY,CAAC;AAClE;AACA,SAASmQ,eAAeA,CAACxS,MAAM,EAAE;EAC7B,MAAM;IAAE+N,UAAU;IAAEC;EAAW,CAAC,GAAGhO,MAAM;EACzC,IAAI,CAACuS,iBAAiB,CAACxE,UAAU,CAAC,IAAI,CAACwE,iBAAiB,CAACvE,UAAU,CAAC,EAAE;IAClE,OAAO,IAAI;EACf;EACA,MAAMyE,kBAAkB,GAAG1E,UAAU,CAAClL,SAAS,CAACC,YAAY,IAAI4P,cAAc,CAAC3E,UAAU,CAACjC,OAAO,CAAC;EAClG,MAAM6G,kBAAkB,GAAG3E,UAAU,CAACnL,SAAS,CAACC,YAAY,IAAI4P,cAAc,CAAC1E,UAAU,CAAClC,OAAO,CAAC;EAClG,MAAM9Q,YAAY,GAAG4X,WAAW,CAACH,kBAAkB,EAAE5T,MAAM,IAAI,EAAE,EAAEmB,MAAM,CAAChF,YAAY,CAAC;EACvF,MAAMC,YAAY,GAAG2X,WAAW;EAChC;EACA5S,MAAM,CAAC6S,cAAc,KAAKhX,cAAc,CAACiX,MAAM,GACzCH,kBAAkB,EAAE5T,MAAM,IAAI,EAAE,GAChC,CAAC4T,kBAAkB,EAAE5T,MAAM,IAAI,EAAE,EAAEiQ,MAAM,CAAC2D,kBAAkB,EAAE9T,MAAM,IAAI,EAAE,CAAC,EAAEmB,MAAM,CAAC/E,YAAY,CAAC;EACvG,IAAI,CAACD,YAAY,IAAI,CAACC,YAAY,EAAE;IAChC+E,MAAM,CAAC2E,OAAO,GAAG,KAAK,EAAEzK,aAAa,CAAC,UAAU,CAAC,CAAC,CAACc,YAAY,GAAG,QAAQ,GAAG,QAAQ,EAAE;MACnFL,EAAE,EAAEqF,MAAM,CAACrF,EAAE;MACbK,YAAY,EAAEgF,MAAM,CAAChF,YAAY;MACjCC,YAAY,EAAE+E,MAAM,CAAC/E;IACzB,CAAC,CAAC,CAAC;IACH,OAAO,IAAI;EACf;EACA,MAAMsS,cAAc,GAAGvS,YAAY,EAAE6E,QAAQ,IAAIhD,QAAQ,CAACK,MAAM;EAChE,MAAMsQ,cAAc,GAAGvS,YAAY,EAAE4E,QAAQ,IAAIhD,QAAQ,CAACI,GAAG;EAC7D,MAAM4B,MAAM,GAAGkU,iBAAiB,CAAChF,UAAU,EAAE/S,YAAY,EAAEuS,cAAc,CAAC;EAC1E,MAAMxO,MAAM,GAAGgU,iBAAiB,CAAC/E,UAAU,EAAE/S,YAAY,EAAEuS,cAAc,CAAC;EAC1E,OAAO;IACHnB,OAAO,EAAExN,MAAM,CAACe,CAAC;IACjB0M,OAAO,EAAEzN,MAAM,CAACiB,CAAC;IACjByM,OAAO,EAAExN,MAAM,CAACa,CAAC;IACjB4M,OAAO,EAAEzN,MAAM,CAACe,CAAC;IACjByN,cAAc;IACdC;EACJ,CAAC;AACL;AACA,SAASkF,cAAcA,CAAC5G,OAAO,EAAE;EAC7B,IAAI,CAACA,OAAO,EAAE;IACV,OAAO,IAAI;EACf;EACA,MAAMjN,MAAM,GAAG,EAAE;EACjB,MAAME,MAAM,GAAG,EAAE;EACjB,KAAK,MAAMkN,MAAM,IAAIH,OAAO,EAAE;IAC1BG,MAAM,CAAC3M,KAAK,GAAG2M,MAAM,CAAC3M,KAAK,IAAI,CAAC;IAChC2M,MAAM,CAAC1M,MAAM,GAAG0M,MAAM,CAAC1M,MAAM,IAAI,CAAC;IAClC,IAAI0M,MAAM,CAACpR,IAAI,KAAK,QAAQ,EAAE;MAC1BgE,MAAM,CAACd,IAAI,CAACkO,MAAM,CAAC;IACvB,CAAC,MACI,IAAIA,MAAM,CAACpR,IAAI,KAAK,QAAQ,EAAE;MAC/BkE,MAAM,CAAChB,IAAI,CAACkO,MAAM,CAAC;IACvB;EACJ;EACA,OAAO;IACHpN,MAAM;IACNE;EACJ,CAAC;AACL;AACA,SAASgU,iBAAiBA,CAACxU,IAAI,EAAE0N,MAAM,EAAE+G,gBAAgB,GAAGnW,QAAQ,CAACE,IAAI,EAAE8S,MAAM,GAAG,KAAK,EAAE;EACvF,MAAMjQ,CAAC,GAAG,CAACqM,MAAM,EAAErM,CAAC,IAAI,CAAC,IAAIrB,IAAI,CAACsE,SAAS,CAACmC,gBAAgB,CAACpF,CAAC;EAC9D,MAAME,CAAC,GAAG,CAACmM,MAAM,EAAEnM,CAAC,IAAI,CAAC,IAAIvB,IAAI,CAACsE,SAAS,CAACmC,gBAAgB,CAAClF,CAAC;EAC9D,MAAM;IAAER,KAAK;IAAEC;EAAO,CAAC,GAAG0M,MAAM,IAAIzM,iBAAiB,CAACjB,IAAI,CAAC;EAC3D,IAAIsR,MAAM,EAAE;IACR,OAAO;MAAEjQ,CAAC,EAAEA,CAAC,GAAGN,KAAK,GAAG,CAAC;MAAEQ,CAAC,EAAEA,CAAC,GAAGP,MAAM,GAAG;IAAE,CAAC;EAClD;EACA,MAAMM,QAAQ,GAAGoM,MAAM,EAAEpM,QAAQ,IAAImT,gBAAgB;EACrD,QAAQnT,QAAQ;IACZ,KAAKhD,QAAQ,CAACI,GAAG;MACb,OAAO;QAAE2C,CAAC,EAAEA,CAAC,GAAGN,KAAK,GAAG,CAAC;QAAEQ;MAAE,CAAC;IAClC,KAAKjD,QAAQ,CAACG,KAAK;MACf,OAAO;QAAE4C,CAAC,EAAEA,CAAC,GAAGN,KAAK;QAAEQ,CAAC,EAAEA,CAAC,GAAGP,MAAM,GAAG;MAAE,CAAC;IAC9C,KAAK1C,QAAQ,CAACK,MAAM;MAChB,OAAO;QAAE0C,CAAC,EAAEA,CAAC,GAAGN,KAAK,GAAG,CAAC;QAAEQ,CAAC,EAAEA,CAAC,GAAGP;MAAO,CAAC;IAC9C,KAAK1C,QAAQ,CAACE,IAAI;MACd,OAAO;QAAE6C,CAAC;QAAEE,CAAC,EAAEA,CAAC,GAAGP,MAAM,GAAG;MAAE,CAAC;EACvC;AACJ;AACA,SAASqT,WAAWA,CAAC3O,MAAM,EAAEgP,QAAQ,EAAE;EACnC,IAAI,CAAChP,MAAM,EAAE;IACT,OAAO,IAAI;EACf;EACA;EACA,OAAO,CAAC,CAACgP,QAAQ,GAAGhP,MAAM,CAAC,CAAC,CAAC,GAAGA,MAAM,CAAC8B,IAAI,CAAEmN,CAAC,IAAKA,CAAC,CAACvY,EAAE,KAAKsY,QAAQ,CAAC,KAAK,IAAI;AAClF;AAEA,SAASE,WAAWA,CAACC,MAAM,EAAEzY,EAAE,EAAE;EAC7B,IAAI,CAACyY,MAAM,EAAE;IACT,OAAO,EAAE;EACb;EACA,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC5B,OAAOA,MAAM;EACjB;EACA,MAAMC,QAAQ,GAAG1Y,EAAE,GAAG,GAAGA,EAAE,IAAI,GAAG,EAAE;EACpC,OAAO,GAAG0Y,QAAQ,GAAGC,MAAM,CAAC9V,IAAI,CAAC4V,MAAM,CAAC,CACnCG,IAAI,CAAC,CAAC,CACN/P,GAAG,CAAEjG,GAAG,IAAK,GAAGA,GAAG,IAAI6V,MAAM,CAAC7V,GAAG,CAAC,EAAE,CAAC,CACrCiW,IAAI,CAAC,GAAG,CAAC,EAAE;AACpB;AACA,SAASC,eAAeA,CAAChV,KAAK,EAAE;EAAE9D,EAAE;EAAE+Y,YAAY;EAAEC,kBAAkB;EAAEC;AAAkB,CAAC,EAAE;EACzF,MAAMC,GAAG,GAAG,IAAIlV,GAAG,CAAC,CAAC;EACrB,OAAOF,KAAK,CACPgC,MAAM,CAAC,CAACqT,OAAO,EAAElV,IAAI,KAAK;IAC3B,CAACA,IAAI,CAACmV,WAAW,IAAIJ,kBAAkB,EAAE/U,IAAI,CAACoV,SAAS,IAAIJ,gBAAgB,CAAC,CAAC/V,OAAO,CAAEuV,MAAM,IAAK;MAC7F,IAAIA,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;QACtC,MAAMa,QAAQ,GAAGd,WAAW,CAACC,MAAM,EAAEzY,EAAE,CAAC;QACxC,IAAI,CAACkZ,GAAG,CAACpW,GAAG,CAACwW,QAAQ,CAAC,EAAE;UACpBH,OAAO,CAAC/V,IAAI,CAAC;YAAEpD,EAAE,EAAEsZ,QAAQ;YAAEC,KAAK,EAAEd,MAAM,CAACc,KAAK,IAAIR,YAAY;YAAE,GAAGN;UAAO,CAAC,CAAC;UAC9ES,GAAG,CAAC/U,GAAG,CAACmV,QAAQ,CAAC;QACrB;MACJ;IACJ,CAAC,CAAC;IACF,OAAOH,OAAO;EAClB,CAAC,EAAE,EAAE,CAAC,CACDP,IAAI,CAAC,CAACnW,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACzC,EAAE,CAACwZ,aAAa,CAAC9W,CAAC,CAAC1C,EAAE,CAAC,CAAC;AACjD;AAEA,SAASyZ,uBAAuBA,CAACC,QAAQ,EAAEnQ,QAAQ,EAAErE,QAAQ,EAAEiQ,MAAM,EAAEwE,KAAK,EAAE;EAC1E,IAAIC,eAAe,GAAG,GAAG;EACzB,IAAID,KAAK,KAAK,OAAO,EAAE;IACnBC,eAAe,GAAG,CAAC;EACvB,CAAC,MACI,IAAID,KAAK,KAAK,KAAK,EAAE;IACtBC,eAAe,GAAG,CAAC;EACvB;EACA;EACA;EACA,IAAInN,GAAG,GAAG,CACN,CAACiN,QAAQ,CAACzU,CAAC,GAAGyU,QAAQ,CAAC/U,KAAK,GAAGiV,eAAe,IAAIrQ,QAAQ,CAACnK,IAAI,GAAGmK,QAAQ,CAACtE,CAAC,EAC5EyU,QAAQ,CAACvU,CAAC,GAAGoE,QAAQ,CAACnK,IAAI,GAAGmK,QAAQ,CAACpE,CAAC,GAAGgQ,MAAM,CACnD;EACD;EACA,IAAI0E,KAAK,GAAG,CAAC,CAAC,GAAG,GAAGD,eAAe,EAAE,CAAC,GAAG,CAAC;EAC1C,QAAQ1U,QAAQ;IACZ,KAAKhD,QAAQ,CAACG,KAAK;MACfoK,GAAG,GAAG,CACF,CAACiN,QAAQ,CAACzU,CAAC,GAAGyU,QAAQ,CAAC/U,KAAK,IAAI4E,QAAQ,CAACnK,IAAI,GAAGmK,QAAQ,CAACtE,CAAC,GAAGkQ,MAAM,EACnE,CAACuE,QAAQ,CAACvU,CAAC,GAAGuU,QAAQ,CAAC9U,MAAM,GAAGgV,eAAe,IAAIrQ,QAAQ,CAACnK,IAAI,GAAGmK,QAAQ,CAACpE,CAAC,CAChF;MACD0U,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAGD,eAAe,CAAC;MACnC;IACJ,KAAK1X,QAAQ,CAACK,MAAM;MAChBkK,GAAG,CAAC,CAAC,CAAC,GAAG,CAACiN,QAAQ,CAACvU,CAAC,GAAGuU,QAAQ,CAAC9U,MAAM,IAAI2E,QAAQ,CAACnK,IAAI,GAAGmK,QAAQ,CAACpE,CAAC,GAAGgQ,MAAM;MAC7E0E,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;MACZ;IACJ,KAAK3X,QAAQ,CAACE,IAAI;MACdqK,GAAG,GAAG,CACFiN,QAAQ,CAACzU,CAAC,GAAGsE,QAAQ,CAACnK,IAAI,GAAGmK,QAAQ,CAACtE,CAAC,GAAGkQ,MAAM,EAChD,CAACuE,QAAQ,CAACvU,CAAC,GAAGuU,QAAQ,CAAC9U,MAAM,GAAGgV,eAAe,IAAIrQ,QAAQ,CAACnK,IAAI,GAAGmK,QAAQ,CAACpE,CAAC,CAChF;MACD0U,KAAK,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAGD,eAAe,CAAC;MACtC;EACR;EACA,OAAO,aAAanN,GAAG,CAAC,CAAC,CAAC,OAAOA,GAAG,CAAC,CAAC,CAAC,iBAAiBoN,KAAK,CAAC,CAAC,CAAC,MAAMA,KAAK,CAAC,CAAC,CAAC,IAAI;AACtF;AAEA,MAAMC,cAAc,GAAG;EACnBpV,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAClBqF,UAAU,EAAElJ,cAAc;EAC1BkZ,oBAAoB,EAAE,IAAI;EAC1BC,QAAQ,EAAE,CAAC;AACf,CAAC;AACD,MAAMC,4BAA4B,GAAG;EACjC,GAAGH,cAAc;EACjBI,aAAa,EAAE;AACnB,CAAC;AACD,SAASC,YAAYA,CAACC,IAAI,EAAEC,QAAQ,EAAE;EAClC,MAAMC,MAAM,GAAG;IAAE,GAAGF;EAAK,CAAC;EAC1B,KAAK,MAAMxX,GAAG,IAAIyX,QAAQ,EAAE;IACxB,IAAIA,QAAQ,CAACzX,GAAG,CAAC,KAAK2C,SAAS,EAAE;MAC7B;MACA+U,MAAM,CAAC1X,GAAG,CAAC,GAAGyX,QAAQ,CAACzX,GAAG,CAAC;IAC/B;EACJ;EACA,OAAO0X,MAAM;AACjB;AACA,SAASC,uBAAuBA,CAACjV,UAAU,EAAEkV,YAAY,EAAE/R,OAAO,EAAE;EAChE,MAAMgS,QAAQ,GAAGN,YAAY,CAACL,cAAc,EAAErR,OAAO,CAAC;EACtD,KAAK,MAAM7E,IAAI,IAAI0B,UAAU,CAACgC,MAAM,CAAC,CAAC,EAAE;IACpC,IAAI1D,IAAI,CAACsG,QAAQ,EAAE;MACfwQ,eAAe,CAAC9W,IAAI,EAAE0B,UAAU,EAAEkV,YAAY,EAAEC,QAAQ,CAAC;IAC7D,CAAC,MACI;MACD,MAAME,kBAAkB,GAAGlW,yBAAyB,CAACb,IAAI,EAAE6W,QAAQ,CAAC/V,UAAU,CAAC;MAC/E,MAAM4F,MAAM,GAAGI,kBAAkB,CAAC9G,IAAI,CAAC0G,MAAM,CAAC,GAAG1G,IAAI,CAAC0G,MAAM,GAAGmQ,QAAQ,CAAC1Q,UAAU;MAClF,MAAM6Q,eAAe,GAAGjQ,aAAa,CAACgQ,kBAAkB,EAAErQ,MAAM,EAAEzF,iBAAiB,CAACjB,IAAI,CAAC,CAAC;MAC1FA,IAAI,CAACsE,SAAS,CAACmC,gBAAgB,GAAGuQ,eAAe;IACrD;EACJ;AACJ;AACA,SAASC,cAAcA,CAAChX,KAAK,EAAEyB,UAAU,EAAEkV,YAAY,EAAE/R,OAAO,EAAE;EAC9D,MAAMgS,QAAQ,GAAGN,YAAY,CAACF,4BAA4B,EAAExR,OAAO,CAAC;EACpE,MAAMqS,SAAS,GAAG,IAAInS,GAAG,CAACrD,UAAU,CAAC;EACrC,MAAMyV,aAAa,GAAGN,QAAQ,EAAEV,oBAAoB,GAAG,IAAI,GAAG,CAAC;EAC/DzU,UAAU,CAAC0V,KAAK,CAAC,CAAC;EAClBR,YAAY,CAACQ,KAAK,CAAC,CAAC;EACpB,KAAK,MAAMC,QAAQ,IAAIpX,KAAK,EAAE;IAC1B,IAAIqX,YAAY,GAAGJ,SAAS,CAAC3U,GAAG,CAAC8U,QAAQ,CAACjb,EAAE,CAAC;IAC7C,IAAIya,QAAQ,CAACP,aAAa,IAAIe,QAAQ,KAAKC,YAAY,EAAEhT,SAAS,CAAC+S,QAAQ,EAAE;MACzE3V,UAAU,CAACyD,GAAG,CAACkS,QAAQ,CAACjb,EAAE,EAAEkb,YAAY,CAAC;IAC7C,CAAC,MACI;MACD,MAAMP,kBAAkB,GAAGlW,yBAAyB,CAACwW,QAAQ,EAAER,QAAQ,CAAC/V,UAAU,CAAC;MACnF,MAAM4F,MAAM,GAAGI,kBAAkB,CAACuQ,QAAQ,CAAC3Q,MAAM,CAAC,GAAG2Q,QAAQ,CAAC3Q,MAAM,GAAGmQ,QAAQ,CAAC1Q,UAAU;MAC1F,MAAM6Q,eAAe,GAAGjQ,aAAa,CAACgQ,kBAAkB,EAAErQ,MAAM,EAAEzF,iBAAiB,CAACoW,QAAQ,CAAC,CAAC;MAC9FC,YAAY,GAAG;QACX,GAAGT,QAAQ,CAACT,QAAQ;QACpB,GAAGiB,QAAQ;QACX1T,QAAQ,EAAE;UACN5C,KAAK,EAAEsW,QAAQ,CAAC1T,QAAQ,EAAE5C,KAAK;UAC/BC,MAAM,EAAEqW,QAAQ,CAAC1T,QAAQ,EAAE3C;QAC/B,CAAC;QACDsD,SAAS,EAAE;UACPmC,gBAAgB,EAAEuQ,eAAe;UACjC;UACAzS,YAAY,EAAE,CAAC8S,QAAQ,CAAC1T,QAAQ,GAAGhC,SAAS,GAAG2V,YAAY,EAAEhT,SAAS,CAACC,YAAY;UACnFwL,CAAC,EAAEwH,UAAU,CAACF,QAAQ,EAAEF,aAAa,CAAC;UACtCE;QACJ;MACJ,CAAC;MACD3V,UAAU,CAACyD,GAAG,CAACkS,QAAQ,CAACjb,EAAE,EAAEkb,YAAY,CAAC;IAC7C;IACA,IAAID,QAAQ,CAAC/Q,QAAQ,EAAE;MACnBwQ,eAAe,CAACQ,YAAY,EAAE5V,UAAU,EAAEkV,YAAY,EAAE/R,OAAO,CAAC;IACpE;EACJ;AACJ;AACA,SAAS2S,kBAAkBA,CAACxX,IAAI,EAAE4W,YAAY,EAAE;EAC5C,IAAI,CAAC5W,IAAI,CAACsG,QAAQ,EAAE;IAChB;EACJ;EACA,MAAMmR,UAAU,GAAGb,YAAY,CAACrU,GAAG,CAACvC,IAAI,CAACsG,QAAQ,CAAC;EAClD,IAAImR,UAAU,EAAE;IACZA,UAAU,CAACtS,GAAG,CAACnF,IAAI,CAAC5D,EAAE,EAAE4D,IAAI,CAAC;EACjC,CAAC,MACI;IACD4W,YAAY,CAACzR,GAAG,CAACnF,IAAI,CAACsG,QAAQ,EAAE,IAAIvB,GAAG,CAAC,CAAC,CAAC/E,IAAI,CAAC5D,EAAE,EAAE4D,IAAI,CAAC,CAAC,CAAC,CAAC;EAC/D;AACJ;AACA;AACA;AACA;AACA,SAAS8W,eAAeA,CAAC9W,IAAI,EAAE0B,UAAU,EAAEkV,YAAY,EAAE/R,OAAO,EAAE;EAC9D,MAAM;IAAEsR,oBAAoB;IAAErV,UAAU;IAAEqF;EAAW,CAAC,GAAGoQ,YAAY,CAACL,cAAc,EAAErR,OAAO,CAAC;EAC9F,MAAMyB,QAAQ,GAAGtG,IAAI,CAACsG,QAAQ;EAC9B,MAAMD,UAAU,GAAG3E,UAAU,CAACa,GAAG,CAAC+D,QAAQ,CAAC;EAC3C,IAAI,CAACD,UAAU,EAAE;IACbtE,OAAO,CAACC,IAAI,CAAC,eAAesE,QAAQ,sGAAsG,CAAC;IAC3I;EACJ;EACAkR,kBAAkB,CAACxX,IAAI,EAAE4W,YAAY,CAAC;EACtC,MAAMO,aAAa,GAAGhB,oBAAoB,GAAG,IAAI,GAAG,CAAC;EACrD,MAAM;IAAE9U,CAAC;IAAEE,CAAC;IAAEwO;EAAE,CAAC,GAAG2H,iBAAiB,CAAC1X,IAAI,EAAEqG,UAAU,EAAEvF,UAAU,EAAEqF,UAAU,EAAEgR,aAAa,CAAC;EAC9F,MAAM;IAAE1Q;EAAiB,CAAC,GAAGzG,IAAI,CAACsE,SAAS;EAC3C,MAAMqT,eAAe,GAAGtW,CAAC,KAAKoF,gBAAgB,CAACpF,CAAC,IAAIE,CAAC,KAAKkF,gBAAgB,CAAClF,CAAC;EAC5E,IAAIoW,eAAe,IAAI5H,CAAC,KAAK/P,IAAI,CAACsE,SAAS,CAACyL,CAAC,EAAE;IAC3C/P,IAAI,CAACsE,SAAS,GAAG;MACb,GAAGtE,IAAI,CAACsE,SAAS;MACjBmC,gBAAgB,EAAEkR,eAAe,GAAG;QAAEtW,CAAC;QAAEE;MAAE,CAAC,GAAGkF,gBAAgB;MAC/DsJ;IACJ,CAAC;EACL;AACJ;AACA,SAASwH,UAAUA,CAACvX,IAAI,EAAEmX,aAAa,EAAE;EACrC,OAAO,CAACpN,SAAS,CAAC/J,IAAI,CAAC2P,MAAM,CAAC,GAAG3P,IAAI,CAAC2P,MAAM,GAAG,CAAC,KAAK3P,IAAI,CAAC0P,QAAQ,GAAGyH,aAAa,GAAG,CAAC,CAAC;AAC3F;AACA,SAASO,iBAAiBA,CAACE,SAAS,EAAEvR,UAAU,EAAEvF,UAAU,EAAEqF,UAAU,EAAEgR,aAAa,EAAE;EACrF,MAAM;IAAE9V,CAAC,EAAEkF,OAAO;IAAEhF,CAAC,EAAEiF;EAAQ,CAAC,GAAGH,UAAU,CAAC/B,SAAS,CAACmC,gBAAgB;EACxE,MAAM8B,eAAe,GAAGtH,iBAAiB,CAAC2W,SAAS,CAAC;EACpD,MAAMb,kBAAkB,GAAGlW,yBAAyB,CAAC+W,SAAS,EAAE9W,UAAU,CAAC;EAC3E,MAAMkW,eAAe,GAAGlQ,kBAAkB,CAAC8Q,SAAS,CAAClR,MAAM,CAAC,GACtDK,aAAa,CAACgQ,kBAAkB,EAAEa,SAAS,CAAClR,MAAM,EAAE6B,eAAe,CAAC,GACpEwO,kBAAkB;EACxB,IAAIc,gBAAgB,GAAG9Q,aAAa,CAAC;IAAE1F,CAAC,EAAEkF,OAAO,GAAGyQ,eAAe,CAAC3V,CAAC;IAAEE,CAAC,EAAEiF,OAAO,GAAGwQ,eAAe,CAACzV;EAAE,CAAC,EAAE4E,UAAU,EAAEoC,eAAe,CAAC;EACrI,IAAIqP,SAAS,CAAClR,MAAM,KAAK,QAAQ,EAAE;IAC/BmR,gBAAgB,GAAGxP,qBAAqB,CAACwP,gBAAgB,EAAEtP,eAAe,EAAElC,UAAU,CAAC;EAC3F;EACA,MAAMyR,MAAM,GAAGP,UAAU,CAACK,SAAS,EAAET,aAAa,CAAC;EACnD,MAAMY,OAAO,GAAG1R,UAAU,CAAC/B,SAAS,CAACyL,CAAC,IAAI,CAAC;EAC3C,OAAO;IACH1O,CAAC,EAAEwW,gBAAgB,CAACxW,CAAC;IACrBE,CAAC,EAAEsW,gBAAgB,CAACtW,CAAC;IACrBwO,CAAC,EAAEgI,OAAO,GAAGD,MAAM,GAAGC,OAAO,GAAGD;EACpC,CAAC;AACL;AACA,SAASE,kBAAkBA,CAACC,QAAQ,EAAEvW,UAAU,EAAEkV,YAAY,EAAE9V,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;EACjF,MAAMoX,OAAO,GAAG,EAAE;EAClB,MAAMC,gBAAgB,GAAG,IAAIpT,GAAG,CAAC,CAAC;EAClC;EACA,KAAK,MAAMqT,KAAK,IAAIH,QAAQ,EAAE;IAC1B,MAAMzP,MAAM,GAAG9G,UAAU,CAACa,GAAG,CAAC6V,KAAK,CAAC9R,QAAQ,CAAC;IAC7C,IAAI,CAACkC,MAAM,EAAE;MACT;IACJ;IACA,MAAM6P,UAAU,GAAGF,gBAAgB,CAAC5V,GAAG,CAAC6V,KAAK,CAAC9R,QAAQ,CAAC,EAAEgS,YAAY,IAAIpU,UAAU,CAACsE,MAAM,CAAC;IAC3F,MAAM8P,YAAY,GAAGjP,gBAAgB,CAACgP,UAAU,EAAED,KAAK,CAACnV,IAAI,CAAC;IAC7DkV,gBAAgB,CAAChT,GAAG,CAACiT,KAAK,CAAC9R,QAAQ,EAAE;MAAEgS,YAAY;MAAE9P;IAAO,CAAC,CAAC;EAClE;EACA,IAAI2P,gBAAgB,CAACpZ,IAAI,GAAG,CAAC,EAAE;IAC3BoZ,gBAAgB,CAAC7Y,OAAO,CAAC,CAAC;MAAEgZ,YAAY;MAAE9P;IAAO,CAAC,EAAElC,QAAQ,KAAK;MAC7D;MACA,MAAMG,gBAAgB,GAAG+B,MAAM,CAAClE,SAAS,CAACmC,gBAAgB;MAC1D,MAAM2B,UAAU,GAAGnH,iBAAiB,CAACuH,MAAM,CAAC;MAC5C,MAAMtH,MAAM,GAAGsH,MAAM,CAACtH,MAAM,IAAIJ,UAAU;MAC1C;MACA,MAAMyX,OAAO,GAAGD,YAAY,CAACjX,CAAC,GAAGoF,gBAAgB,CAACpF,CAAC,GAAG8G,IAAI,CAACmC,KAAK,CAACnC,IAAI,CAACQ,GAAG,CAAClC,gBAAgB,CAACpF,CAAC,GAAGiX,YAAY,CAACjX,CAAC,CAAC,CAAC,GAAG,CAAC;MACnH,MAAMmX,OAAO,GAAGF,YAAY,CAAC/W,CAAC,GAAGkF,gBAAgB,CAAClF,CAAC,GAAG4G,IAAI,CAACmC,KAAK,CAACnC,IAAI,CAACQ,GAAG,CAAClC,gBAAgB,CAAClF,CAAC,GAAG+W,YAAY,CAAC/W,CAAC,CAAC,CAAC,GAAG,CAAC;MACnH,MAAMkX,QAAQ,GAAGtQ,IAAI,CAACD,GAAG,CAACE,UAAU,CAACrH,KAAK,EAAEoH,IAAI,CAACmC,KAAK,CAACgO,YAAY,CAACvX,KAAK,CAAC,CAAC;MAC3E,MAAM2X,SAAS,GAAGvQ,IAAI,CAACD,GAAG,CAACE,UAAU,CAACpH,MAAM,EAAEmH,IAAI,CAACmC,KAAK,CAACgO,YAAY,CAACtX,MAAM,CAAC,CAAC;MAC9E,MAAM2X,WAAW,GAAG,CAACF,QAAQ,GAAGrQ,UAAU,CAACrH,KAAK,IAAIG,MAAM,CAAC,CAAC,CAAC;MAC7D,MAAM0X,YAAY,GAAG,CAACF,SAAS,GAAGtQ,UAAU,CAACpH,MAAM,IAAIE,MAAM,CAAC,CAAC,CAAC;MAChE;MACA,IAAIqX,OAAO,GAAG,CAAC,IAAIC,OAAO,GAAG,CAAC,IAAIG,WAAW,IAAIC,YAAY,EAAE;QAC3DV,OAAO,CAAC1Y,IAAI,CAAC;UACTpD,EAAE,EAAEkK,QAAQ;UACZhK,IAAI,EAAE,UAAU;UAChBgF,QAAQ,EAAE;YACND,CAAC,EAAEmH,MAAM,CAAClH,QAAQ,CAACD,CAAC,GAAGkX,OAAO,GAAGI,WAAW;YAC5CpX,CAAC,EAAEiH,MAAM,CAAClH,QAAQ,CAACC,CAAC,GAAGiX,OAAO,GAAGI;UACrC;QACJ,CAAC,CAAC;QACF;QACA;QACAhC,YAAY,CAACrU,GAAG,CAAC+D,QAAQ,CAAC,EAAEhH,OAAO,CAAEsY,SAAS,IAAK;UAC/C,IAAI,CAACK,QAAQ,CAAC5H,IAAI,CAAE+H,KAAK,IAAKA,KAAK,CAAChc,EAAE,KAAKwb,SAAS,CAACxb,EAAE,CAAC,EAAE;YACtD8b,OAAO,CAAC1Y,IAAI,CAAC;cACTpD,EAAE,EAAEwb,SAAS,CAACxb,EAAE;cAChBE,IAAI,EAAE,UAAU;cAChBgF,QAAQ,EAAE;gBACND,CAAC,EAAEuW,SAAS,CAACtW,QAAQ,CAACD,CAAC,GAAGkX,OAAO;gBACjChX,CAAC,EAAEqW,SAAS,CAACtW,QAAQ,CAACC,CAAC,GAAGiX;cAC9B;YACJ,CAAC,CAAC;UACN;QACJ,CAAC,CAAC;MACN;MACA;MACA,IAAIpQ,UAAU,CAACrH,KAAK,GAAGuX,YAAY,CAACvX,KAAK,IAAIqH,UAAU,CAACpH,MAAM,GAAGsX,YAAY,CAACtX,MAAM,IAAIuX,OAAO,IAAIC,OAAO,EAAE;QACxGN,OAAO,CAAC1Y,IAAI,CAAC;UACTpD,EAAE,EAAEkK,QAAQ;UACZhK,IAAI,EAAE,YAAY;UAClBuc,aAAa,EAAE,IAAI;UACnBzQ,UAAU,EAAE;YACRrH,KAAK,EAAE0X,QAAQ,IAAIF,OAAO,GAAGrX,MAAM,CAAC,CAAC,CAAC,GAAGqX,OAAO,GAAGI,WAAW,GAAG,CAAC,CAAC;YACnE3X,MAAM,EAAE0X,SAAS,IAAIF,OAAO,GAAGtX,MAAM,CAAC,CAAC,CAAC,GAAGsX,OAAO,GAAGI,YAAY,GAAG,CAAC;UACzE;QACJ,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN;EACA,OAAOV,OAAO;AAClB;AACA,SAASY,mBAAmBA,CAACC,OAAO,EAAErX,UAAU,EAAEkV,YAAY,EAAEoC,OAAO,EAAElY,UAAU,EAAEqF,UAAU,EAAE;EAC7F,MAAM8S,YAAY,GAAGD,OAAO,EAAEE,aAAa,CAAC,mBAAmB,CAAC;EAChE,IAAIC,gBAAgB,GAAG,KAAK;EAC5B,IAAI,CAACF,YAAY,EAAE;IACf,OAAO;MAAEf,OAAO,EAAE,EAAE;MAAEiB;IAAiB,CAAC;EAC5C;EACA,MAAMjB,OAAO,GAAG,EAAE;EAClB,MAAMkB,KAAK,GAAGnN,MAAM,CAACoN,gBAAgB,CAACJ,YAAY,CAAC;EACnD,MAAM;IAAEK,GAAG,EAAE9d;EAAK,CAAC,GAAG,IAAIyQ,MAAM,CAACsN,iBAAiB,CAACH,KAAK,CAAC7N,SAAS,CAAC;EACnE;EACA,MAAMiO,oBAAoB,GAAG,EAAE;EAC/B,KAAK,MAAMC,MAAM,IAAIV,OAAO,CAACrV,MAAM,CAAC,CAAC,EAAE;IACnC,MAAM1D,IAAI,GAAG0B,UAAU,CAACa,GAAG,CAACkX,MAAM,CAACrd,EAAE,CAAC;IACtC,IAAI,CAAC4D,IAAI,EAAE;MACP;IACJ;IACA,IAAIA,IAAI,CAAC6D,MAAM,EAAE;MACb7D,IAAI,CAACsE,SAAS,GAAG;QACb,GAAGtE,IAAI,CAACsE,SAAS;QACjBC,YAAY,EAAE5C;MAClB,CAAC;MACDwX,gBAAgB,GAAG,IAAI;IAC3B,CAAC,MACI;MACD,MAAM/Q,UAAU,GAAGwD,aAAa,CAAC6N,MAAM,CAACpM,WAAW,CAAC;MACpD,MAAMqM,gBAAgB,GAAG1Z,IAAI,CAAC2D,QAAQ,CAAC5C,KAAK,KAAKqH,UAAU,CAACrH,KAAK,IAAIf,IAAI,CAAC2D,QAAQ,CAAC3C,MAAM,KAAKoH,UAAU,CAACpH,MAAM;MAC/G,MAAM2Y,QAAQ,GAAG,CAAC,EAAEvR,UAAU,CAACrH,KAAK,IAChCqH,UAAU,CAACpH,MAAM,KAChB0Y,gBAAgB,IAAI,CAAC1Z,IAAI,CAACsE,SAAS,CAACC,YAAY,IAAIkV,MAAM,CAACG,KAAK,CAAC,CAAC;MACvE,IAAID,QAAQ,EAAE;QACV,MAAMrM,UAAU,GAAGmM,MAAM,CAACpM,WAAW,CAACM,qBAAqB,CAAC,CAAC;QAC7D,MAAMjH,MAAM,GAAGI,kBAAkB,CAAC9G,IAAI,CAAC0G,MAAM,CAAC,GAAG1G,IAAI,CAAC0G,MAAM,GAAGP,UAAU;QACzE,IAAI;UAAEM;QAAiB,CAAC,GAAGzG,IAAI,CAACsE,SAAS;QACzC,IAAItE,IAAI,CAACsG,QAAQ,IAAItG,IAAI,CAAC0G,MAAM,KAAK,QAAQ,EAAE;UAC3CD,gBAAgB,GAAG4B,qBAAqB,CAAC5B,gBAAgB,EAAE2B,UAAU,EAAE1G,UAAU,CAACa,GAAG,CAACvC,IAAI,CAACsG,QAAQ,CAAC,CAAC;QACzG,CAAC,MACI,IAAII,MAAM,EAAE;UACbD,gBAAgB,GAAGM,aAAa,CAACN,gBAAgB,EAAEC,MAAM,EAAE0B,UAAU,CAAC;QAC1E;QACApI,IAAI,CAAC2D,QAAQ,GAAGyE,UAAU;QAC1BpI,IAAI,CAACsE,SAAS,GAAG;UACb,GAAGtE,IAAI,CAACsE,SAAS;UACjBmC,gBAAgB;UAChBlC,YAAY,EAAE;YACVjE,MAAM,EAAE8M,eAAe,CAAC,QAAQ,EAAEqM,MAAM,CAACpM,WAAW,EAAEC,UAAU,EAAE9R,IAAI,EAAEwE,IAAI,CAAC5D,EAAE,CAAC;YAChFoE,MAAM,EAAE4M,eAAe,CAAC,QAAQ,EAAEqM,MAAM,CAACpM,WAAW,EAAEC,UAAU,EAAE9R,IAAI,EAAEwE,IAAI,CAAC5D,EAAE;UACnF;QACJ,CAAC;QACD,IAAI4D,IAAI,CAACsG,QAAQ,EAAE;UACfwQ,eAAe,CAAC9W,IAAI,EAAE0B,UAAU,EAAEkV,YAAY,EAAE;YAAE9V;UAAW,CAAC,CAAC;QACnE;QACAqY,gBAAgB,GAAG,IAAI;QACvB,IAAIO,gBAAgB,EAAE;UAClBxB,OAAO,CAAC1Y,IAAI,CAAC;YACTpD,EAAE,EAAE4D,IAAI,CAAC5D,EAAE;YACXE,IAAI,EAAE,YAAY;YAClB8L;UACJ,CAAC,CAAC;UACF,IAAIpI,IAAI,CAAC2G,YAAY,IAAI3G,IAAI,CAACsG,QAAQ,EAAE;YACpCkT,oBAAoB,CAACha,IAAI,CAAC;cACtBpD,EAAE,EAAE4D,IAAI,CAAC5D,EAAE;cACXkK,QAAQ,EAAEtG,IAAI,CAACsG,QAAQ;cACvBrD,IAAI,EAAEiB,UAAU,CAAClE,IAAI,EAAEc,UAAU;YACrC,CAAC,CAAC;UACN;QACJ;MACJ;IACJ;EACJ;EACA,IAAI0Y,oBAAoB,CAAC/Z,MAAM,GAAG,CAAC,EAAE;IACjC,MAAMoa,mBAAmB,GAAG7B,kBAAkB,CAACwB,oBAAoB,EAAE9X,UAAU,EAAEkV,YAAY,EAAE9V,UAAU,CAAC;IAC1GoX,OAAO,CAAC1Y,IAAI,CAAC,GAAGqa,mBAAmB,CAAC;EACxC;EACA,OAAO;IAAE3B,OAAO;IAAEiB;EAAiB,CAAC;AACxC;AACA,eAAeW,KAAKA,CAAC;EAAEC,KAAK;EAAE1U,OAAO;EAAEkG,SAAS;EAAEyO,eAAe;EAAEjZ,KAAK;EAAEC;AAAQ,CAAC,EAAE;EACjF,IAAI,CAACqE,OAAO,IAAK,CAAC0U,KAAK,CAAC1Y,CAAC,IAAI,CAAC0Y,KAAK,CAACxY,CAAE,EAAE;IACpC,OAAOiE,OAAO,CAACC,OAAO,CAAC,KAAK,CAAC;EACjC;EACA,MAAMwU,YAAY,GAAG,MAAM5U,OAAO,CAAC6U,sBAAsB,CAAC;IACtD7Y,CAAC,EAAEkK,SAAS,CAAC,CAAC,CAAC,GAAGwO,KAAK,CAAC1Y,CAAC;IACzBE,CAAC,EAAEgK,SAAS,CAAC,CAAC,CAAC,GAAGwO,KAAK,CAACxY,CAAC;IACzB/F,IAAI,EAAE+P,SAAS,CAAC,CAAC;EACrB,CAAC,EAAE,CACC,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAACxK,KAAK,EAAEC,MAAM,CAAC,CAClB,EAAEgZ,eAAe,CAAC;EACnB,MAAMG,gBAAgB,GAAG,CAAC,CAACF,YAAY,KAClCA,YAAY,CAAC5Y,CAAC,KAAKkK,SAAS,CAAC,CAAC,CAAC,IAAI0O,YAAY,CAAC1Y,CAAC,KAAKgK,SAAS,CAAC,CAAC,CAAC,IAAI0O,YAAY,CAACG,CAAC,KAAK7O,SAAS,CAAC,CAAC,CAAC,CAAC;EAC3G,OAAO/F,OAAO,CAACC,OAAO,CAAC0U,gBAAgB,CAAC;AAC5C;AACA,SAASE,sBAAsBA,CAACC,gBAAgB,EAAEC,UAAU,EAAEra,KAAK,EAAE;EACjEoa,gBAAgB,CAAClD,KAAK,CAAC,CAAC;EACxBmD,UAAU,CAACnD,KAAK,CAAC,CAAC;EAClB,KAAK,MAAM/W,IAAI,IAAIH,KAAK,EAAE;IACtB,MAAM;MAAEI,MAAM;MAAEE,MAAM;MAAE/D,YAAY,GAAG,IAAI;MAAEC,YAAY,GAAG;IAAK,CAAC,GAAG2D,IAAI;IACzE,MAAMma,SAAS,GAAG,GAAGla,MAAM,WAAW7D,YAAY,EAAE;IACpD,MAAMge,SAAS,GAAG,GAAGja,MAAM,WAAW9D,YAAY,EAAE;IACpD,MAAMge,UAAU,GAAGJ,gBAAgB,CAAC/X,GAAG,CAACiY,SAAS,CAAC,IAAI,IAAIzV,GAAG,CAAC,CAAC;IAC/D,MAAM4V,UAAU,GAAGL,gBAAgB,CAAC/X,GAAG,CAACkY,SAAS,CAAC,IAAI,IAAI1V,GAAG,CAAC,CAAC;IAC/D,MAAMxF,UAAU,GAAG;MAAEqb,MAAM,EAAEva,IAAI,CAACjE,EAAE;MAAEkE,MAAM;MAAEE,MAAM;MAAE/D,YAAY;MAAEC;IAAa,CAAC;IAClF6d,UAAU,CAACpV,GAAG,CAAC9E,IAAI,CAACjE,EAAE,EAAEiE,IAAI,CAAC;IAC7Bia,gBAAgB,CAACnV,GAAG,CAACqV,SAAS,EAAEE,UAAU,CAACvV,GAAG,CAAC,GAAG3E,MAAM,IAAI9D,YAAY,EAAE,EAAE6C,UAAU,CAAC,CAAC;IACxF+a,gBAAgB,CAACnV,GAAG,CAACsV,SAAS,EAAEE,UAAU,CAACxV,GAAG,CAAC,GAAG7E,MAAM,IAAI7D,YAAY,EAAE,EAAE8C,UAAU,CAAC,CAAC;EAC5F;AACJ;AAEA,SAASsb,eAAeA,CAAChc,CAAC,EAAEC,CAAC,EAAE;EAC3B,IAAID,CAAC,KAAK,IAAI,IAAIC,CAAC,KAAK,IAAI,EAAE;IAC1B,OAAO,KAAK;EAChB;EACA,MAAMgc,EAAE,GAAGrN,KAAK,CAACsN,OAAO,CAAClc,CAAC,CAAC,GAAGA,CAAC,GAAG,CAACA,CAAC,CAAC;EACrC,MAAMmc,EAAE,GAAGvN,KAAK,CAACsN,OAAO,CAACjc,CAAC,CAAC,GAAGA,CAAC,GAAG,CAACA,CAAC,CAAC;EACrC,IAAIgc,EAAE,CAACrb,MAAM,KAAKub,EAAE,CAACvb,MAAM,EAAE;IACzB,OAAO,KAAK;EAChB;EACA,KAAK,IAAIqU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgH,EAAE,CAACrb,MAAM,EAAEqU,CAAC,EAAE,EAAE;IAChC,IAAIgH,EAAE,CAAChH,CAAC,CAAC,CAAC1X,EAAE,KAAK4e,EAAE,CAAClH,CAAC,CAAC,CAAC1X,EAAE,IAAI0e,EAAE,CAAChH,CAAC,CAAC,CAACxX,IAAI,KAAK0e,EAAE,CAAClH,CAAC,CAAC,CAACxX,IAAI,IAAI,CAACyY,MAAM,CAACkG,EAAE,CAACH,EAAE,CAAChH,CAAC,CAAC,CAACoH,IAAI,EAAEF,EAAE,CAAClH,CAAC,CAAC,CAACoH,IAAI,CAAC,EAAE;MAC1F,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf;AAEA,SAASC,gBAAgBA,CAACnb,IAAI,EAAE0B,UAAU,EAAE;EACxC,IAAI,CAAC1B,IAAI,CAACsG,QAAQ,EAAE;IAChB,OAAO,KAAK;EAChB;EACA,MAAMD,UAAU,GAAG3E,UAAU,CAACa,GAAG,CAACvC,IAAI,CAACsG,QAAQ,CAAC;EAChD,IAAI,CAACD,UAAU,EAAE;IACb,OAAO,KAAK;EAChB;EACA,IAAIA,UAAU,CAACqJ,QAAQ,EAAE;IACrB,OAAO,IAAI;EACf;EACA,OAAOyL,gBAAgB,CAAC9U,UAAU,EAAE3E,UAAU,CAAC;AACnD;AACA,SAAS0Z,WAAWA,CAAC5a,MAAM,EAAE6a,QAAQ,EAAErC,OAAO,EAAE;EAC5C,IAAIsC,OAAO,GAAG9a,MAAM;EACpB,GAAG;IACC,IAAI8a,OAAO,EAAEC,OAAO,CAACF,QAAQ,CAAC,EAC1B,OAAO,IAAI;IACf,IAAIC,OAAO,KAAKtC,OAAO,EACnB,OAAO,KAAK;IAChBsC,OAAO,GAAGA,OAAO,CAACE,aAAa;EACnC,CAAC,QAAQF,OAAO;EAChB,OAAO,KAAK;AAChB;AACA;AACA,SAASG,YAAYA,CAAC/Z,UAAU,EAAEga,cAAc,EAAEC,QAAQ,EAAE1V,MAAM,EAAE;EAChE,MAAM2V,SAAS,GAAG,IAAI7W,GAAG,CAAC,CAAC;EAC3B,KAAK,MAAM,CAAC3I,EAAE,EAAE4D,IAAI,CAAC,IAAI0B,UAAU,EAAE;IACjC,IAAI,CAAC1B,IAAI,CAAC0P,QAAQ,IAAI1P,IAAI,CAAC5D,EAAE,KAAK6J,MAAM,MACnC,CAACjG,IAAI,CAACsG,QAAQ,IAAI,CAAC6U,gBAAgB,CAACnb,IAAI,EAAE0B,UAAU,CAAC,CAAC,KACtD1B,IAAI,CAAC6b,SAAS,IAAKH,cAAc,IAAI,OAAO1b,IAAI,CAAC6b,SAAS,KAAK,WAAY,CAAC,EAAE;MAC/E,MAAMvE,YAAY,GAAG5V,UAAU,CAACa,GAAG,CAACnG,EAAE,CAAC;MACvC,IAAIkb,YAAY,EAAE;QACdsE,SAAS,CAACzW,GAAG,CAAC/I,EAAE,EAAE;UACdA,EAAE;UACFkF,QAAQ,EAAEgW,YAAY,CAAChW,QAAQ,IAAI;YAAED,CAAC,EAAE,CAAC;YAAEE,CAAC,EAAE;UAAE,CAAC;UACjDwH,QAAQ,EAAE;YACN1H,CAAC,EAAEsa,QAAQ,CAACta,CAAC,GAAGiW,YAAY,CAAChT,SAAS,CAACmC,gBAAgB,CAACpF,CAAC;YACzDE,CAAC,EAAEoa,QAAQ,CAACpa,CAAC,GAAG+V,YAAY,CAAChT,SAAS,CAACmC,gBAAgB,CAAClF;UAC5D,CAAC;UACDmF,MAAM,EAAE4Q,YAAY,CAAC5Q,MAAM;UAC3BJ,QAAQ,EAAEgR,YAAY,CAAChR,QAAQ;UAC/BpF,MAAM,EAAEoW,YAAY,CAACpW,MAAM;UAC3ByF,YAAY,EAAE2Q,YAAY,CAAC3Q,YAAY;UACvCrC,SAAS,EAAE;YACPmC,gBAAgB,EAAE6Q,YAAY,CAAChT,SAAS,CAACmC,gBAAgB,IAAI;cAAEpF,CAAC,EAAE,CAAC;cAAEE,CAAC,EAAE;YAAE;UAC9E,CAAC;UACDoC,QAAQ,EAAE;YACN5C,KAAK,EAAEuW,YAAY,CAAC3T,QAAQ,CAAC5C,KAAK,IAAI,CAAC;YACvCC,MAAM,EAAEsW,YAAY,CAAC3T,QAAQ,CAAC3C,MAAM,IAAI;UAC5C;QACJ,CAAC,CAAC;MACN;IACJ;EACJ;EACA,OAAO4a,SAAS;AACpB;AACA;AACA;AACA;AACA,SAASE,qBAAqBA,CAAC;EAAE7V,MAAM;EAAE2V,SAAS;EAAEla,UAAU;EAAE+C,QAAQ,GAAG;AAAM,CAAC,EAAE;EAChF,MAAMsX,kBAAkB,GAAG,EAAE;EAC7B,KAAK,MAAM,CAAC3f,EAAE,EAAE4f,QAAQ,CAAC,IAAIJ,SAAS,EAAE;IACpC,MAAM5b,IAAI,GAAG0B,UAAU,CAACa,GAAG,CAACnG,EAAE,CAAC,EAAEkI,SAAS,CAAC+S,QAAQ;IACnD,IAAIrX,IAAI,EAAE;MACN+b,kBAAkB,CAACvc,IAAI,CAAC;QACpB,GAAGQ,IAAI;QACPsB,QAAQ,EAAE0a,QAAQ,CAAC1a,QAAQ;QAC3BmD;MACJ,CAAC,CAAC;IACN;EACJ;EACA,IAAI,CAACwB,MAAM,EAAE;IACT,OAAO,CAAC8V,kBAAkB,CAAC,CAAC,CAAC,EAAEA,kBAAkB,CAAC;EACtD;EACA,MAAM/b,IAAI,GAAG0B,UAAU,CAACa,GAAG,CAAC0D,MAAM,CAAC,CAAC3B,SAAS,CAAC+S,QAAQ;EACtD,OAAO,CACH;IACI,GAAGrX,IAAI;IACPsB,QAAQ,EAAEsa,SAAS,CAACrZ,GAAG,CAAC0D,MAAM,CAAC,EAAE3E,QAAQ,IAAItB,IAAI,CAACsB,QAAQ;IAC1DmD;EACJ,CAAC,EACDsX,kBAAkB,CACrB;AACL;;AAEA;AACA,SAASE,MAAMA,CAAC;EAAEC,eAAe;EAAEC,aAAa;EAAEC,WAAW;EAAEC,MAAM;EAAEC;AAAY,CAAC,EAAE;EAClF,IAAIC,OAAO,GAAG;IAAElb,CAAC,EAAE,IAAI;IAAEE,CAAC,EAAE;EAAK,CAAC;EAClC,IAAIib,SAAS,GAAG,CAAC;EACjB,IAAIZ,SAAS,GAAG,IAAI7W,GAAG,CAAC,CAAC;EACzB,IAAI0X,cAAc,GAAG,KAAK;EAC1B,IAAIC,aAAa,GAAG;IAAErb,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC;EAClC,IAAIob,eAAe,GAAG,IAAI;EAC1B,IAAIC,WAAW,GAAG,KAAK;EACvB,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIC,SAAS,GAAG,KAAK,CAAC,CAAC;EACvB;EACA,SAASrD,MAAMA,CAAC;IAAEsD,eAAe;IAAEC,cAAc;IAAEhE,OAAO;IAAEiE,YAAY;IAAEhX,MAAM;IAAEiX,iBAAiB,GAAG;EAAG,CAAC,EAAE;IACxGL,WAAW,GAAGvhB,MAAM,CAAC0d,OAAO,CAAC;IAC7B,SAASmE,WAAWA,CAAC;MAAE9b,CAAC;MAAEE;IAAE,CAAC,EAAE6b,SAAS,EAAE;MACtC,MAAM;QAAE1b,UAAU;QAAEyE,UAAU;QAAEkE,QAAQ;QAAEE,UAAU;QAAEzJ,UAAU;QAAEuc,UAAU;QAAEC,eAAe;QAAElX,OAAO;QAAEmX;MAAqB,CAAC,GAAGpB,aAAa,CAAC,CAAC;MAChJI,OAAO,GAAG;QAAElb,CAAC;QAAEE;MAAE,CAAC;MAClB,IAAIic,SAAS,GAAG,KAAK;MACrB,IAAIC,QAAQ,GAAG;QAAEpc,CAAC,EAAE,CAAC;QAAEE,CAAC,EAAE,CAAC;QAAEmB,EAAE,EAAE,CAAC;QAAEC,EAAE,EAAE;MAAE,CAAC;MAC3C,IAAIiZ,SAAS,CAAC7c,IAAI,GAAG,CAAC,IAAIoH,UAAU,EAAE;QAClC,MAAMlD,IAAI,GAAGF,sBAAsB,CAAC6Y,SAAS,CAAC;QAC9C6B,QAAQ,GAAGrU,SAAS,CAACnG,IAAI,CAAC;MAC9B;MACA,KAAK,MAAM,CAAC7G,EAAE,EAAE4f,QAAQ,CAAC,IAAIJ,SAAS,EAAE;QACpC,IAAI,CAACla,UAAU,CAACxC,GAAG,CAAC9C,EAAE,CAAC,EAAE;UACrB;UACA;UACA;QACJ;QACA,IAAI8J,YAAY,GAAG;UAAE7E,CAAC,EAAEA,CAAC,GAAG2a,QAAQ,CAACjT,QAAQ,CAAC1H,CAAC;UAAEE,CAAC,EAAEA,CAAC,GAAGya,QAAQ,CAACjT,QAAQ,CAACxH;QAAE,CAAC;QAC7E,IAAIgJ,UAAU,EAAE;UACZrE,YAAY,GAAGkE,YAAY,CAAClE,YAAY,EAAEmE,QAAQ,CAAC;QACvD;QACA;QACA;QACA,IAAIqT,kBAAkB,GAAG,CACrB,CAACvX,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACpC,CAACA,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACvC;QACD,IAAIyV,SAAS,CAAC7c,IAAI,GAAG,CAAC,IAAIoH,UAAU,IAAI,CAAC6V,QAAQ,CAACtV,MAAM,EAAE;UACtD,MAAM;YAAED;UAAiB,CAAC,GAAGuV,QAAQ,CAAC1X,SAAS;UAC/C,MAAMsK,EAAE,GAAGnI,gBAAgB,CAACpF,CAAC,GAAGoc,QAAQ,CAACpc,CAAC,GAAG8E,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC7D,MAAMzD,EAAE,GAAG+D,gBAAgB,CAACpF,CAAC,GAAG2a,QAAQ,CAACrY,QAAQ,CAAC5C,KAAK,GAAG0c,QAAQ,CAAC/a,EAAE,GAAGyD,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACxF,MAAM0I,EAAE,GAAGpI,gBAAgB,CAAClF,CAAC,GAAGkc,QAAQ,CAAClc,CAAC,GAAG4E,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC7D,MAAMxD,EAAE,GAAG8D,gBAAgB,CAAClF,CAAC,GAAGya,QAAQ,CAACrY,QAAQ,CAAC3C,MAAM,GAAGyc,QAAQ,CAAC9a,EAAE,GAAGwD,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACzFuX,kBAAkB,GAAG,CACjB,CAAC9O,EAAE,EAAEC,EAAE,CAAC,EACR,CAACnM,EAAE,EAAEC,EAAE,CAAC,CACX;QACL;QACA,MAAM;UAAErB,QAAQ;UAAEmF;QAAiB,CAAC,GAAGT,qBAAqB,CAAC;UACzDC,MAAM,EAAE7J,EAAE;UACV8J,YAAY;UACZxE,UAAU;UACVyE,UAAU,EAAEuX,kBAAkB;UAC9B5c,UAAU;UACVsF;QACJ,CAAC,CAAC;QACF;QACAoX,SAAS,GAAGA,SAAS,IAAIxB,QAAQ,CAAC1a,QAAQ,CAACD,CAAC,KAAKC,QAAQ,CAACD,CAAC,IAAI2a,QAAQ,CAAC1a,QAAQ,CAACC,CAAC,KAAKD,QAAQ,CAACC,CAAC;QACjGya,QAAQ,CAAC1a,QAAQ,GAAGA,QAAQ;QAC5B0a,QAAQ,CAAC1X,SAAS,CAACmC,gBAAgB,GAAGA,gBAAgB;MAC1D;MACA,IAAI,CAAC+W,SAAS,EAAE;QACZ;MACJ;MACAD,mBAAmB,CAAC3B,SAAS,EAAE,IAAI,CAAC;MACpC,IAAIwB,SAAS,KAAKf,MAAM,IAAIgB,UAAU,IAAK,CAACpX,MAAM,IAAIqX,eAAgB,CAAC,EAAE;QACrE,MAAM,CAAChb,WAAW,EAAEqb,YAAY,CAAC,GAAG7B,qBAAqB,CAAC;UACtD7V,MAAM;UACN2V,SAAS;UACTla;QACJ,CAAC,CAAC;QACF2a,MAAM,GAAGe,SAAS,EAAExB,SAAS,EAAEtZ,WAAW,EAAEqb,YAAY,CAAC;QACzDN,UAAU,GAAGD,SAAS,EAAE9a,WAAW,EAAEqb,YAAY,CAAC;QAClD,IAAI,CAAC1X,MAAM,EAAE;UACTqX,eAAe,GAAGF,SAAS,EAAEO,YAAY,CAAC;QAC9C;MACJ;IACJ;IACA,eAAeC,OAAOA,CAAA,EAAG;MACrB,IAAI,CAACjB,eAAe,EAAE;QAClB;MACJ;MACA,MAAM;QAAEpR,SAAS;QAAEuO,KAAK;QAAE+D;MAAa,CAAC,GAAG1B,aAAa,CAAC,CAAC;MAC1D,MAAM,CAACnT,SAAS,EAAEC,SAAS,CAAC,GAAGL,WAAW,CAAC8T,aAAa,EAAEC,eAAe,EAAEkB,YAAY,CAAC;MACxF,IAAI7U,SAAS,KAAK,CAAC,IAAIC,SAAS,KAAK,CAAC,EAAE;QACpCsT,OAAO,CAAClb,CAAC,GAAG,CAACkb,OAAO,CAAClb,CAAC,IAAI,CAAC,IAAI2H,SAAS,GAAGuC,SAAS,CAAC,CAAC,CAAC;QACvDgR,OAAO,CAAChb,CAAC,GAAG,CAACgb,OAAO,CAAChb,CAAC,IAAI,CAAC,IAAI0H,SAAS,GAAGsC,SAAS,CAAC,CAAC,CAAC;QACvD,IAAI,MAAMuO,KAAK,CAAC;UAAEzY,CAAC,EAAE2H,SAAS;UAAEzH,CAAC,EAAE0H;QAAU,CAAC,CAAC,EAAE;UAC7CkU,WAAW,CAACZ,OAAO,EAAE,IAAI,CAAC;QAC9B;MACJ;MACAC,SAAS,GAAGsB,qBAAqB,CAACF,OAAO,CAAC;IAC9C;IACA,SAASG,SAASA,CAACzS,KAAK,EAAE;MACtB,MAAM;QAAE5J,UAAU;QAAEsc,oBAAoB;QAAEtC,cAAc;QAAEnQ,SAAS;QAAElB,QAAQ;QAAEE,UAAU;QAAE0T,iBAAiB;QAAEC,eAAe;QAAEC,oBAAoB;QAAEC;MAAuB,CAAC,GAAGjC,aAAa,CAAC,CAAC;MAC/LS,WAAW,GAAG,IAAI;MAClB,IAAI,CAAC,CAACqB,iBAAiB,IAAI,CAAChB,YAAY,KAAK,CAACe,oBAAoB,IAAI/X,MAAM,EAAE;QAC1E,IAAI,CAACvE,UAAU,CAACa,GAAG,CAAC0D,MAAM,CAAC,EAAEyJ,QAAQ,EAAE;UACnC;UACA0O,qBAAqB,CAAC,CAAC;QAC3B;MACJ;MACA,IAAInB,YAAY,IAAIgB,iBAAiB,IAAIhY,MAAM,EAAE;QAC7CiW,eAAe,GAAGjW,MAAM,CAAC;MAC7B;MACA,MAAMwF,UAAU,GAAGJ,kBAAkB,CAACC,KAAK,CAAC+S,WAAW,EAAE;QAAE9S,SAAS;QAAElB,QAAQ;QAAEE;MAAW,CAAC,CAAC;MAC7FgS,OAAO,GAAG9Q,UAAU;MACpBmQ,SAAS,GAAGH,YAAY,CAAC/Z,UAAU,EAAEga,cAAc,EAAEjQ,UAAU,EAAExF,MAAM,CAAC;MACxE,IAAI2V,SAAS,CAAC7c,IAAI,GAAG,CAAC,KAAKqd,WAAW,IAAI8B,eAAe,IAAK,CAACjY,MAAM,IAAIkY,oBAAqB,CAAC,EAAE;QAC7F,MAAM,CAAC7b,WAAW,EAAEqb,YAAY,CAAC,GAAG7B,qBAAqB,CAAC;UACtD7V,MAAM;UACN2V,SAAS;UACTla;QACJ,CAAC,CAAC;QACF0a,WAAW,GAAG9Q,KAAK,CAAC+S,WAAW,EAAEzC,SAAS,EAAEtZ,WAAW,EAAEqb,YAAY,CAAC;QACtEO,eAAe,GAAG5S,KAAK,CAAC+S,WAAW,EAAE/b,WAAW,EAAEqb,YAAY,CAAC;QAC/D,IAAI,CAAC1X,MAAM,EAAE;UACTkY,oBAAoB,GAAG7S,KAAK,CAAC+S,WAAW,EAAEV,YAAY,CAAC;QAC3D;MACJ;IACJ;IACA,MAAMW,cAAc,GAAGjjB,IAAI,CAAC,CAAC,CACxBkjB,aAAa,CAACrB,iBAAiB,CAAC,CAChCsB,EAAE,CAAC,OAAO,EAAGlT,KAAK,IAAK;MACxB,MAAM;QAAE0N,OAAO;QAAEyF,iBAAiB;QAAElT,SAAS;QAAElB,QAAQ;QAAEE;MAAW,CAAC,GAAG4R,aAAa,CAAC,CAAC;MACvFW,SAAS,GAAG,KAAK;MACjB,IAAI2B,iBAAiB,KAAK,CAAC,EAAE;QACzBV,SAAS,CAACzS,KAAK,CAAC;MACpB;MACA,MAAMG,UAAU,GAAGJ,kBAAkB,CAACC,KAAK,CAAC+S,WAAW,EAAE;QAAE9S,SAAS;QAAElB,QAAQ;QAAEE;MAAW,CAAC,CAAC;MAC7FgS,OAAO,GAAG9Q,UAAU;MACpBkR,eAAe,GAAG3D,OAAO,EAAErL,qBAAqB,CAAC,CAAC,IAAI,IAAI;MAC1D+O,aAAa,GAAGlR,gBAAgB,CAACF,KAAK,CAAC+S,WAAW,EAAE1B,eAAe,CAAC;IACxE,CAAC,CAAC,CACG6B,EAAE,CAAC,MAAM,EAAGlT,KAAK,IAAK;MACvB,MAAM;QAAEoT,iBAAiB;QAAEnT,SAAS;QAAElB,QAAQ;QAAEE,UAAU;QAAEkU,iBAAiB;QAAE/c;MAAW,CAAC,GAAGya,aAAa,CAAC,CAAC;MAC7G,MAAM1Q,UAAU,GAAGJ,kBAAkB,CAACC,KAAK,CAAC+S,WAAW,EAAE;QAAE9S,SAAS;QAAElB,QAAQ;QAAEE;MAAW,CAAC,CAAC;MAC7F,IAAKe,KAAK,CAAC+S,WAAW,CAAC/hB,IAAI,KAAK,WAAW,IAAIgP,KAAK,CAAC+S,WAAW,CAACtR,OAAO,CAACtN,MAAM,GAAG,CAAC;MAC/E;MACCwG,MAAM,IAAI,CAACvE,UAAU,CAACxC,GAAG,CAAC+G,MAAM,CAAE,EAAE;QACrC6W,SAAS,GAAG,IAAI;MACpB;MACA,IAAIA,SAAS,EAAE;QACX;MACJ;MACA,IAAI,CAACL,cAAc,IAAIiC,iBAAiB,IAAI9B,WAAW,EAAE;QACrDH,cAAc,GAAG,IAAI;QACrBmB,OAAO,CAAC,CAAC;MACb;MACA,IAAI,CAAChB,WAAW,EAAE;QACd,MAAMvb,CAAC,GAAGoK,UAAU,CAACC,QAAQ,IAAI6Q,OAAO,CAAClb,CAAC,IAAI,CAAC,CAAC;QAChD,MAAME,CAAC,GAAGkK,UAAU,CAACE,QAAQ,IAAI4Q,OAAO,CAAChb,CAAC,IAAI,CAAC,CAAC;QAChD,MAAMwH,QAAQ,GAAGZ,IAAI,CAACuG,IAAI,CAACrN,CAAC,GAAGA,CAAC,GAAGE,CAAC,GAAGA,CAAC,CAAC;QACzC,IAAIwH,QAAQ,GAAG0V,iBAAiB,EAAE;UAC9BV,SAAS,CAACzS,KAAK,CAAC;QACpB;MACJ;MACA;MACA,IAAI,CAACiR,OAAO,CAAClb,CAAC,KAAKoK,UAAU,CAACC,QAAQ,IAAI6Q,OAAO,CAAChb,CAAC,KAAKkK,UAAU,CAACE,QAAQ,KAAKiQ,SAAS,IAAIgB,WAAW,EAAE;QACtG;QACAF,aAAa,GAAGlR,gBAAgB,CAACF,KAAK,CAAC+S,WAAW,EAAE1B,eAAe,CAAC;QACpEQ,WAAW,CAAC1R,UAAU,EAAEH,KAAK,CAAC+S,WAAW,CAAC;MAC9C;IACJ,CAAC,CAAC,CACGG,EAAE,CAAC,KAAK,EAAGlT,KAAK,IAAK;MACtB,IAAI,CAACsR,WAAW,IAAIE,SAAS,EAAE;QAC3B;MACJ;MACAL,cAAc,GAAG,KAAK;MACtBG,WAAW,GAAG,KAAK;MACnB+B,oBAAoB,CAACnC,SAAS,CAAC;MAC/B,IAAIZ,SAAS,CAAC7c,IAAI,GAAG,CAAC,EAAE;QACpB,MAAM;UAAE2C,UAAU;UAAE6b,mBAAmB;UAAEqB,cAAc;UAAEC;QAAoB,CAAC,GAAG1C,aAAa,CAAC,CAAC;QAChGoB,mBAAmB,CAAC3B,SAAS,EAAE,KAAK,CAAC;QACrC,IAAIU,UAAU,IAAIsC,cAAc,IAAK,CAAC3Y,MAAM,IAAI4Y,mBAAoB,EAAE;UAClE,MAAM,CAACvc,WAAW,EAAEqb,YAAY,CAAC,GAAG7B,qBAAqB,CAAC;YACtD7V,MAAM;YACN2V,SAAS;YACTla,UAAU;YACV+C,QAAQ,EAAE;UACd,CAAC,CAAC;UACF6X,UAAU,GAAGhR,KAAK,CAAC+S,WAAW,EAAEzC,SAAS,EAAEtZ,WAAW,EAAEqb,YAAY,CAAC;UACrEiB,cAAc,GAAGtT,KAAK,CAAC+S,WAAW,EAAE/b,WAAW,EAAEqb,YAAY,CAAC;UAC9D,IAAI,CAAC1X,MAAM,EAAE;YACT4Y,mBAAmB,GAAGvT,KAAK,CAAC+S,WAAW,EAAEV,YAAY,CAAC;UAC1D;QACJ;MACJ;IACJ,CAAC,CAAC,CACGld,MAAM,CAAE6K,KAAK,IAAK;MACnB,MAAM9K,MAAM,GAAG8K,KAAK,CAAC9K,MAAM;MAC3B,MAAMse,WAAW,GAAG,CAACxT,KAAK,CAACyT,MAAM,KAC5B,CAAChC,eAAe,IAAI,CAAC3B,WAAW,CAAC5a,MAAM,EAAE,IAAIuc,eAAe,EAAE,EAAE/D,OAAO,CAAC,CAAC,KACzE,CAACgE,cAAc,IAAI5B,WAAW,CAAC5a,MAAM,EAAEwc,cAAc,EAAEhE,OAAO,CAAC,CAAC;MACrE,OAAO8F,WAAW;IACtB,CAAC,CAAC;IACFjC,WAAW,CAACmC,IAAI,CAACV,cAAc,CAAC;EACpC;EACA,SAASW,OAAOA,CAAA,EAAG;IACfpC,WAAW,EAAE2B,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC;EAClC;EACA,OAAO;IACH/E,MAAM;IACNwF;EACJ,CAAC;AACL;AAEA,SAASC,sBAAsBA,CAAC5d,QAAQ,EAAEI,UAAU,EAAEqH,QAAQ,EAAE;EAC5D,MAAM9I,KAAK,GAAG,EAAE;EAChB,MAAMgD,IAAI,GAAG;IACT5B,CAAC,EAAEC,QAAQ,CAACD,CAAC,GAAG0H,QAAQ;IACxBxH,CAAC,EAAED,QAAQ,CAACC,CAAC,GAAGwH,QAAQ;IACxBhI,KAAK,EAAEgI,QAAQ,GAAG,CAAC;IACnB/H,MAAM,EAAE+H,QAAQ,GAAG;EACvB,CAAC;EACD,KAAK,MAAM/I,IAAI,IAAI0B,UAAU,CAACgC,MAAM,CAAC,CAAC,EAAE;IACpC,IAAIO,kBAAkB,CAAChB,IAAI,EAAEiB,UAAU,CAAClE,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE;MAChDC,KAAK,CAACT,IAAI,CAACQ,IAAI,CAAC;IACpB;EACJ;EACA,OAAOC,KAAK;AAChB;AACA;AACA;AACA,MAAMkf,mBAAmB,GAAG,GAAG;AAC/B,SAASC,gBAAgBA,CAAC9d,QAAQ,EAAE+d,gBAAgB,EAAE3d,UAAU,EAAE7D,UAAU,EAAE;EAC1E,IAAIyhB,cAAc,GAAG,EAAE;EACvB,IAAIC,WAAW,GAAG1c,QAAQ;EAC1B,MAAM2c,UAAU,GAAGN,sBAAsB,CAAC5d,QAAQ,EAAEI,UAAU,EAAE2d,gBAAgB,GAAGF,mBAAmB,CAAC;EACvG,KAAK,MAAMnf,IAAI,IAAIwf,UAAU,EAAE;IAC3B,MAAMC,UAAU,GAAG,CAAC,IAAIzf,IAAI,CAACsE,SAAS,CAACC,YAAY,EAAEjE,MAAM,IAAI,EAAE,CAAC,EAAE,IAAIN,IAAI,CAACsE,SAAS,CAACC,YAAY,EAAE/D,MAAM,IAAI,EAAE,CAAC,CAAC;IACnH,KAAK,MAAMkN,MAAM,IAAI+R,UAAU,EAAE;MAC7B;MACA,IAAI5hB,UAAU,CAACoI,MAAM,KAAKyH,MAAM,CAACzH,MAAM,IAAIpI,UAAU,CAACvB,IAAI,KAAKoR,MAAM,CAACpR,IAAI,IAAIuB,UAAU,CAACzB,EAAE,KAAKsR,MAAM,CAACtR,EAAE,EAAE;QACvG;MACJ;MACA;MACA,MAAM;QAAEiF,CAAC;QAAEE;MAAE,CAAC,GAAGiT,iBAAiB,CAACxU,IAAI,EAAE0N,MAAM,EAAEA,MAAM,CAACpM,QAAQ,EAAE,IAAI,CAAC;MACvE,MAAMyH,QAAQ,GAAGZ,IAAI,CAACuG,IAAI,CAACvG,IAAI,CAACiJ,GAAG,CAAC/P,CAAC,GAAGC,QAAQ,CAACD,CAAC,EAAE,CAAC,CAAC,GAAG8G,IAAI,CAACiJ,GAAG,CAAC7P,CAAC,GAAGD,QAAQ,CAACC,CAAC,EAAE,CAAC,CAAC,CAAC;MACrF,IAAIwH,QAAQ,GAAGsW,gBAAgB,EAAE;QAC7B;MACJ;MACA,IAAItW,QAAQ,GAAGwW,WAAW,EAAE;QACxBD,cAAc,GAAG,CAAC;UAAE,GAAG5R,MAAM;UAAErM,CAAC;UAAEE;QAAE,CAAC,CAAC;QACtCge,WAAW,GAAGxW,QAAQ;MAC1B,CAAC,MACI,IAAIA,QAAQ,KAAKwW,WAAW,EAAE;QAC/B;QACAD,cAAc,CAAC9f,IAAI,CAAC;UAAE,GAAGkO,MAAM;UAAErM,CAAC;UAAEE;QAAE,CAAC,CAAC;MAC5C;IACJ;EACJ;EACA,IAAI,CAAC+d,cAAc,CAAC7f,MAAM,EAAE;IACxB,OAAO,IAAI;EACf;EACA;EACA,IAAI6f,cAAc,CAAC7f,MAAM,GAAG,CAAC,EAAE;IAC3B,MAAMigB,kBAAkB,GAAG7hB,UAAU,CAACvB,IAAI,KAAK,QAAQ,GAAG,QAAQ,GAAG,QAAQ;IAC7E,OAAOgjB,cAAc,CAAC9X,IAAI,CAAEkG,MAAM,IAAKA,MAAM,CAACpR,IAAI,KAAKojB,kBAAkB,CAAC,IAAIJ,cAAc,CAAC,CAAC,CAAC;EACnG;EACA,OAAOA,cAAc,CAAC,CAAC,CAAC;AAC5B;AACA,SAASK,SAASA,CAAC1Z,MAAM,EAAEzJ,UAAU,EAAEkY,QAAQ,EAAEhT,UAAU,EAAE4S,cAAc,EAAEsL,oBAAoB,GAAG,KAAK,EAAE;EACvG,MAAM5f,IAAI,GAAG0B,UAAU,CAACa,GAAG,CAAC0D,MAAM,CAAC;EACnC,IAAI,CAACjG,IAAI,EAAE;IACP,OAAO,IAAI;EACf;EACA,MAAMuN,OAAO,GAAG+G,cAAc,KAAK,QAAQ,GACrCtU,IAAI,CAACsE,SAAS,CAACC,YAAY,GAAG/H,UAAU,CAAC,GACzC,CAAC,IAAIwD,IAAI,CAACsE,SAAS,CAACC,YAAY,EAAEjE,MAAM,IAAI,EAAE,CAAC,EAAE,IAAIN,IAAI,CAACsE,SAAS,CAACC,YAAY,EAAE/D,MAAM,IAAI,EAAE,CAAC,CAAC;EACtG,MAAMkN,MAAM,GAAG,CAACgH,QAAQ,GAAGnH,OAAO,EAAE/F,IAAI,CAAEqY,CAAC,IAAKA,CAAC,CAACzjB,EAAE,KAAKsY,QAAQ,CAAC,GAAGnH,OAAO,GAAG,CAAC,CAAC,KAAK,IAAI;EAC1F,OAAOG,MAAM,IAAIkS,oBAAoB,GAC/B;IAAE,GAAGlS,MAAM;IAAE,GAAG8G,iBAAiB,CAACxU,IAAI,EAAE0N,MAAM,EAAEA,MAAM,CAACpM,QAAQ,EAAE,IAAI;EAAE,CAAC,GACxEoM,MAAM;AAChB;AACA,SAASoS,aAAaA,CAACC,eAAe,EAAEC,aAAa,EAAE;EACnD,IAAID,eAAe,EAAE;IACjB,OAAOA,eAAe;EAC1B,CAAC,MACI,IAAIC,aAAa,EAAEC,SAAS,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;IAClD,OAAO,QAAQ;EACnB,CAAC,MACI,IAAIF,aAAa,EAAEC,SAAS,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;IAClD,OAAO,QAAQ;EACnB;EACA,OAAO,IAAI;AACf;AACA,SAASC,iBAAiBA,CAACC,wBAAwB,EAAEC,aAAa,EAAE;EAChE,IAAI1iB,OAAO,GAAG,IAAI;EAClB,IAAI0iB,aAAa,EAAE;IACf1iB,OAAO,GAAG,IAAI;EAClB,CAAC,MACI,IAAIyiB,wBAAwB,IAAI,CAACC,aAAa,EAAE;IACjD1iB,OAAO,GAAG,KAAK;EACnB;EACA,OAAOA,OAAO;AAClB;AAEA,MAAM2iB,WAAW,GAAGA,CAAA,KAAM,IAAI;AAC9B,SAASC,aAAaA,CAACjV,KAAK,EAAE;EAAEgJ,cAAc;EAAE+K,gBAAgB;EAAE3K,QAAQ;EAAEzO,MAAM;EAAE8Z,eAAe;EAAES,QAAQ;EAAExH,OAAO;EAAEtX,UAAU;EAAE1E,GAAG;EAAEyjB,gBAAgB;EAAEC,MAAM;EAAE5G,KAAK;EAAE6G,gBAAgB;EAAEC,cAAc;EAAEC,SAAS;EAAEC,YAAY;EAAEC,iBAAiB,GAAGT,WAAW;EAAEU,cAAc;EAAEC,gBAAgB;EAAEC,YAAY;EAAEC,aAAa;EAAEtD;AAAc,CAAC,EAAE;EAClV;EACA,MAAMuD,GAAG,GAAGrV,iBAAiB,CAACT,KAAK,CAAC9K,MAAM,CAAC;EAC3C,IAAIgc,SAAS,GAAG,CAAC;EACjB,IAAI6E,aAAa;EACjB,MAAM;IAAEhgB,CAAC;IAAEE;EAAE,CAAC,GAAGiK,gBAAgB,CAACF,KAAK,CAAC;EACxC,MAAMgW,aAAa,GAAGF,GAAG,EAAEG,gBAAgB,CAAClgB,CAAC,EAAEE,CAAC,CAAC;EACjD,MAAM/E,UAAU,GAAGsjB,aAAa,CAACC,eAAe,EAAEuB,aAAa,CAAC;EAChE,MAAM3E,eAAe,GAAG3D,OAAO,EAAErL,qBAAqB,CAAC,CAAC;EACxD,IAAI,CAACgP,eAAe,IAAI,CAACngB,UAAU,EAAE;IACjC;EACJ;EACA,MAAMglB,kBAAkB,GAAG7B,SAAS,CAAC1Z,MAAM,EAAEzJ,UAAU,EAAEkY,QAAQ,EAAEhT,UAAU,EAAE4S,cAAc,CAAC;EAC9F,IAAI,CAACkN,kBAAkB,EAAE;IACrB;EACJ;EACA,IAAIlgB,QAAQ,GAAGkK,gBAAgB,CAACF,KAAK,EAAEqR,eAAe,CAAC;EACvD,IAAIF,cAAc,GAAG,KAAK;EAC1B,IAAIld,UAAU,GAAG,IAAI;EACrB,IAAI5B,OAAO,GAAG,KAAK;EACnB,IAAIqiB,aAAa,GAAG,IAAI;EACxB;EACA,SAASpC,OAAOA,CAAA,EAAG;IACf,IAAI,CAAC6C,gBAAgB,IAAI,CAAC9D,eAAe,EAAE;MACvC;IACJ;IACA,MAAM,CAACtb,CAAC,EAAEE,CAAC,CAAC,GAAGqH,WAAW,CAACtH,QAAQ,EAAEqb,eAAe,EAAEkB,YAAY,CAAC;IACnE/D,KAAK,CAAC;MAAEzY,CAAC;MAAEE;IAAE,CAAC,CAAC;IACfib,SAAS,GAAGsB,qBAAqB,CAACF,OAAO,CAAC;EAC9C;EACA;EACA,MAAM/f,UAAU,GAAG;IACf,GAAG2jB,kBAAkB;IACrBvb,MAAM;IACN3J,IAAI,EAAEE,UAAU;IAChB8E,QAAQ,EAAEkgB,kBAAkB,CAAClgB;EACjC,CAAC;EACD,MAAMmgB,gBAAgB,GAAG/f,UAAU,CAACa,GAAG,CAAC0D,MAAM,CAAC;EAC/C,MAAMrI,IAAI,GAAG4W,iBAAiB,CAACiN,gBAAgB,EAAE5jB,UAAU,EAAES,QAAQ,CAACE,IAAI,EAAE,IAAI,CAAC;EACjF,MAAMoS,aAAa,GAAG;IAClBlT,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAE,IAAI;IACbC,IAAI;IACJC,UAAU;IACVC,YAAY,EAAED,UAAU,CAACyD,QAAQ;IACjCvD,QAAQ,EAAE0jB,gBAAgB;IAC1BzjB,EAAE,EAAEsD,QAAQ;IACZrD,QAAQ,EAAE,IAAI;IACdC,UAAU,EAAEK,gBAAgB,CAACV,UAAU,CAACyD,QAAQ,CAAC;IACjDnD,MAAM,EAAE;EACZ,CAAC;EACD8iB,gBAAgB,CAACrQ,aAAa,CAAC;EAC/B,IAAI8Q,kBAAkB,GAAG9Q,aAAa;EACtCgQ,cAAc,GAAGtV,KAAK,EAAE;IAAErF,MAAM;IAAEyO,QAAQ;IAAElY;EAAW,CAAC,CAAC;EACzD,SAASmlB,aAAaA,CAACrW,KAAK,EAAE;IAC1B,IAAI,CAAC6V,aAAa,CAAC,CAAC,IAAI,CAACtjB,UAAU,EAAE;MACjC+jB,WAAW,CAACtW,KAAK,CAAC;MAClB;IACJ;IACA,MAAMC,SAAS,GAAG2V,YAAY,CAAC,CAAC;IAChC5f,QAAQ,GAAGkK,gBAAgB,CAACF,KAAK,EAAEqR,eAAe,CAAC;IACnD0E,aAAa,GAAGjC,gBAAgB,CAAC5b,oBAAoB,CAAClC,QAAQ,EAAEiK,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE8T,gBAAgB,EAAE3d,UAAU,EAAE7D,UAAU,CAAC;IACpI,IAAI,CAAC4e,cAAc,EAAE;MACjBmB,OAAO,CAAC,CAAC;MACTnB,cAAc,GAAG,IAAI;IACzB;IACA,MAAM/F,MAAM,GAAGmL,aAAa,CAACvW,KAAK,EAAE;MAChCoC,MAAM,EAAE2T,aAAa;MACrB/M,cAAc;MACdwN,UAAU,EAAE7b,MAAM;MAClB8b,YAAY,EAAErN,QAAQ;MACtBsN,QAAQ,EAAExB,QAAQ,GAAG,QAAQ,GAAG,QAAQ;MACxCO,iBAAiB;MACjBK,GAAG;MACHpkB,GAAG;MACH0jB,MAAM;MACNhf;IACJ,CAAC,CAAC;IACFse,aAAa,GAAGtJ,MAAM,CAACsJ,aAAa;IACpCzgB,UAAU,GAAGmX,MAAM,CAACnX,UAAU;IAC9B5B,OAAO,GAAGwiB,iBAAiB,CAAC,CAAC,CAACkB,aAAa,EAAE3K,MAAM,CAAC/Y,OAAO,CAAC;IAC5D,MAAMiT,aAAa,GAAG;MAClB;MACA,GAAG8Q,kBAAkB;MACrB/jB,OAAO;MACPK,EAAE,EAAEqjB,aAAa,IAAI1jB,OAAO,GACtB6M,oBAAoB,CAAC;QAAEnJ,CAAC,EAAEggB,aAAa,CAAChgB,CAAC;QAAEE,CAAC,EAAE8f,aAAa,CAAC9f;MAAE,CAAC,EAAEgK,SAAS,CAAC,GAC3EjK,QAAQ;MACdrD,QAAQ,EAAEyY,MAAM,CAACzY,QAAQ;MACzBC,UAAU,EAAEP,OAAO,IAAI+Y,MAAM,CAACzY,QAAQ,GAAGyY,MAAM,CAACzY,QAAQ,CAACqD,QAAQ,GAAG/C,gBAAgB,CAACV,UAAU,CAACyD,QAAQ,CAAC;MACzGnD,MAAM,EAAEuY,MAAM,CAACzY,QAAQ,GAAGyD,UAAU,CAACa,GAAG,CAACmU,MAAM,CAACzY,QAAQ,CAACgI,MAAM,CAAC,GAAG;IACvE,CAAC;IACD;IACA;IACA,IAAItI,OAAO,IACP0jB,aAAa,IACbK,kBAAkB,CAACzjB,QAAQ,IAC3B2S,aAAa,CAAC3S,QAAQ,IACtByjB,kBAAkB,CAACzjB,QAAQ,CAAC3B,IAAI,KAAKsU,aAAa,CAAC3S,QAAQ,CAAC3B,IAAI,IAChEolB,kBAAkB,CAACzjB,QAAQ,CAACgI,MAAM,KAAK2K,aAAa,CAAC3S,QAAQ,CAACgI,MAAM,IACpEyb,kBAAkB,CAACzjB,QAAQ,CAAC7B,EAAE,KAAKwU,aAAa,CAAC3S,QAAQ,CAAC7B,EAAE,IAC5DslB,kBAAkB,CAAC1jB,EAAE,CAACqD,CAAC,KAAKuP,aAAa,CAAC5S,EAAE,CAACqD,CAAC,IAC9CqgB,kBAAkB,CAAC1jB,EAAE,CAACuD,CAAC,KAAKqP,aAAa,CAAC5S,EAAE,CAACuD,CAAC,EAAE;MAChD;IACJ;IACA0f,gBAAgB,CAACrQ,aAAa,CAAC;IAC/B8Q,kBAAkB,GAAG9Q,aAAa;EACtC;EACA,SAASgR,WAAWA,CAACtW,KAAK,EAAE;IACxB,IAAI,CAAC+V,aAAa,IAAIrB,aAAa,KAAKzgB,UAAU,IAAI5B,OAAO,EAAE;MAC3DkjB,SAAS,GAAGthB,UAAU,CAAC;IAC3B;IACA;IACA;IACA;IACA,MAAM;MAAE7B,UAAU;MAAE,GAAGukB;IAAgB,CAAC,GAAGP,kBAAkB;IAC7D,MAAMQ,oBAAoB,GAAG;MACzB,GAAGD,eAAe;MAClB/jB,UAAU,EAAEwjB,kBAAkB,CAACzjB,QAAQ,GAAGyjB,kBAAkB,CAACxjB,UAAU,GAAG;IAC9E,CAAC;IACD4iB,YAAY,GAAGxV,KAAK,EAAE4W,oBAAoB,CAAC;IAC3C,IAAInC,eAAe,EAAE;MACjBiB,cAAc,GAAG1V,KAAK,EAAE4W,oBAAoB,CAAC;IACjD;IACAvB,gBAAgB,CAAC,CAAC;IAClBhC,oBAAoB,CAACnC,SAAS,CAAC;IAC/BC,cAAc,GAAG,KAAK;IACtB9e,OAAO,GAAG,KAAK;IACf4B,UAAU,GAAG,IAAI;IACjBygB,aAAa,GAAG,IAAI;IACpBoB,GAAG,CAACe,mBAAmB,CAAC,WAAW,EAAER,aAAa,CAAC;IACnDP,GAAG,CAACe,mBAAmB,CAAC,SAAS,EAAEP,WAAW,CAAC;IAC/CR,GAAG,CAACe,mBAAmB,CAAC,WAAW,EAAER,aAAa,CAAC;IACnDP,GAAG,CAACe,mBAAmB,CAAC,UAAU,EAAEP,WAAW,CAAC;EACpD;EACAR,GAAG,CAACgB,gBAAgB,CAAC,WAAW,EAAET,aAAa,CAAC;EAChDP,GAAG,CAACgB,gBAAgB,CAAC,SAAS,EAAER,WAAW,CAAC;EAC5CR,GAAG,CAACgB,gBAAgB,CAAC,WAAW,EAAET,aAAa,CAAC;EAChDP,GAAG,CAACgB,gBAAgB,CAAC,UAAU,EAAER,WAAW,CAAC;AACjD;AACA;AACA,SAASC,aAAaA,CAACvW,KAAK,EAAE;EAAEoC,MAAM;EAAE4G,cAAc;EAAEwN,UAAU;EAAEC,YAAY;EAAEC,QAAQ;EAAEZ,GAAG;EAAEpkB,GAAG;EAAE0jB,MAAM;EAAEK,iBAAiB,GAAGT,WAAW;EAAE5e;AAAY,CAAC,EAAE;EAC1J,MAAM8e,QAAQ,GAAGwB,QAAQ,KAAK,QAAQ;EACtC,MAAMhC,aAAa,GAAGtS,MAAM,GACtB0T,GAAG,CAAClI,aAAa,CAAC,IAAIlc,GAAG,0BAA0B0jB,MAAM,IAAIhT,MAAM,EAAEzH,MAAM,IAAIyH,MAAM,EAAEtR,EAAE,IAAIsR,MAAM,EAAEpR,IAAI,IAAI,CAAC,GAC9G,IAAI;EACV,MAAM;IAAE+E,CAAC;IAAEE;EAAE,CAAC,GAAGiK,gBAAgB,CAACF,KAAK,CAAC;EACxC,MAAM+W,WAAW,GAAGjB,GAAG,CAACG,gBAAgB,CAAClgB,CAAC,EAAEE,CAAC,CAAC;EAC9C;EACA;EACA,MAAM+gB,aAAa,GAAGD,WAAW,EAAEpC,SAAS,CAACC,QAAQ,CAAC,GAAGljB,GAAG,eAAe,CAAC,GAAGqlB,WAAW,GAAGrC,aAAa;EAC1G,MAAMtJ,MAAM,GAAG;IACXsJ,aAAa,EAAEsC,aAAa;IAC5B3kB,OAAO,EAAE,KAAK;IACd4B,UAAU,EAAE,IAAI;IAChBtB,QAAQ,EAAE;EACd,CAAC;EACD,IAAIqkB,aAAa,EAAE;IACf,MAAM9lB,UAAU,GAAGsjB,aAAa,CAACne,SAAS,EAAE2gB,aAAa,CAAC;IAC1D,MAAMC,YAAY,GAAGD,aAAa,CAAC1U,YAAY,CAAC,aAAa,CAAC;IAC9D,MAAM8G,QAAQ,GAAG4N,aAAa,CAAC1U,YAAY,CAAC,eAAe,CAAC;IAC5D,MAAM4U,WAAW,GAAGF,aAAa,CAACrC,SAAS,CAACC,QAAQ,CAAC,aAAa,CAAC;IACnE,MAAMuC,cAAc,GAAGH,aAAa,CAACrC,SAAS,CAACC,QAAQ,CAAC,gBAAgB,CAAC;IACzE,IAAI,CAACqC,YAAY,IAAI,CAAC/lB,UAAU,EAAE;MAC9B,OAAOka,MAAM;IACjB;IACA,MAAMnX,UAAU,GAAG;MACfe,MAAM,EAAEkgB,QAAQ,GAAG+B,YAAY,GAAGT,UAAU;MAC5CrlB,YAAY,EAAE+jB,QAAQ,GAAG9L,QAAQ,GAAGqN,YAAY;MAChDvhB,MAAM,EAAEggB,QAAQ,GAAGsB,UAAU,GAAGS,YAAY;MAC5C7lB,YAAY,EAAE8jB,QAAQ,GAAGuB,YAAY,GAAGrN;IAC5C,CAAC;IACDgC,MAAM,CAACnX,UAAU,GAAGA,UAAU;IAC9B,MAAMmjB,aAAa,GAAGF,WAAW,IAAIC,cAAc;IACnD;IACA,MAAM9kB,OAAO,GAAG+kB,aAAa,KACxBpO,cAAc,KAAKhX,cAAc,CAACiX,MAAM,GAClCiM,QAAQ,IAAIhkB,UAAU,KAAK,QAAQ,IAAM,CAACgkB,QAAQ,IAAIhkB,UAAU,KAAK,QAAS,GAC/E+lB,YAAY,KAAKT,UAAU,IAAIpN,QAAQ,KAAKqN,YAAY,CAAC;IACnErL,MAAM,CAAC/Y,OAAO,GAAGA,OAAO,IAAIojB,iBAAiB,CAACxhB,UAAU,CAAC;IACzDmX,MAAM,CAACzY,QAAQ,GAAG0hB,SAAS,CAAC4C,YAAY,EAAE/lB,UAAU,EAAEkY,QAAQ,EAAEhT,UAAU,EAAE4S,cAAc,EAAE,KAAK,CAAC;EACtG;EACA,OAAOoC,MAAM;AACjB;AACA,MAAMiM,QAAQ,GAAG;EACbpC,aAAa;EACb5iB,OAAO,EAAEkkB;AACb,CAAC;AAED,SAASe,SAASA,CAAC;EAAE5J,OAAO;EAAE3T,OAAO;EAAE6b,YAAY;EAAE2B;AAAa,CAAC,EAAE;EACjE,MAAMC,SAAS,GAAGxnB,MAAM,CAAC0d,OAAO,CAAC;EACjC,SAASS,MAAMA,CAAC;IAAEO,eAAe;IAAEjZ,KAAK;IAAEC,MAAM;IAAE+hB,QAAQ,GAAG,EAAE;IAAEC,QAAQ,GAAG,IAAI;IAAEC,QAAQ,GAAG,IAAI;IAAEC,UAAU,GAAG;EAAO,CAAC,EAAE;IACtH;IACA,MAAMC,WAAW,GAAI7X,KAAK,IAAK;MAC3B,MAAMC,SAAS,GAAG2V,YAAY,CAAC,CAAC;MAChC,IAAI5V,KAAK,CAAC+S,WAAW,CAAC/hB,IAAI,KAAK,OAAO,IAAI,CAAC+I,OAAO,EAAE;QAChD;MACJ;MACA,MAAM+d,UAAU,GAAG,CAAC9X,KAAK,CAAC+S,WAAW,CAACgF,MAAM,IACvC/X,KAAK,CAAC+S,WAAW,CAACiF,SAAS,KAAK,CAAC,GAAG,IAAI,GAAGhY,KAAK,CAAC+S,WAAW,CAACiF,SAAS,GAAG,CAAC,GAAG,KAAK,CAAC,GACpFP,QAAQ;MACZ,MAAMQ,QAAQ,GAAGhY,SAAS,CAAC,CAAC,CAAC,GAAGpD,IAAI,CAACiJ,GAAG,CAAC,CAAC,EAAEgS,UAAU,CAAC;MACvD/d,OAAO,CAACme,OAAO,CAACD,QAAQ,CAAC;IAC7B,CAAC;IACD,IAAIE,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IACrB;IACA,MAAMC,eAAe,GAAIpY,KAAK,IAAK;MAC/B,IAAIA,KAAK,CAAC+S,WAAW,CAAC/hB,IAAI,KAAK,WAAW,IAAIgP,KAAK,CAAC+S,WAAW,CAAC/hB,IAAI,KAAK,YAAY,EAAE;QACnFmnB,QAAQ,GAAG,CACPnY,KAAK,CAAC+S,WAAW,CAACvR,OAAO,IAAIxB,KAAK,CAAC+S,WAAW,CAACtR,OAAO,CAAC,CAAC,CAAC,CAACD,OAAO,EACjExB,KAAK,CAAC+S,WAAW,CAACpR,OAAO,IAAI3B,KAAK,CAAC+S,WAAW,CAACtR,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,CACpE;MACL;IACJ,CAAC;IACD;IACA,MAAM0W,UAAU,GAAIrY,KAAK,IAAK;MAC1B,MAAMC,SAAS,GAAG2V,YAAY,CAAC,CAAC;MAChC,IAAK5V,KAAK,CAAC+S,WAAW,CAAC/hB,IAAI,KAAK,WAAW,IAAIgP,KAAK,CAAC+S,WAAW,CAAC/hB,IAAI,KAAK,WAAW,IAAK,CAAC+I,OAAO,EAAE;QAChG;MACJ;MACA,MAAMue,UAAU,GAAG,CACftY,KAAK,CAAC+S,WAAW,CAACvR,OAAO,IAAIxB,KAAK,CAAC+S,WAAW,CAACtR,OAAO,CAAC,CAAC,CAAC,CAACD,OAAO,EACjExB,KAAK,CAAC+S,WAAW,CAACpR,OAAO,IAAI3B,KAAK,CAAC+S,WAAW,CAACtR,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,CACpE;MACD,MAAM4W,QAAQ,GAAG,CAACD,UAAU,CAAC,CAAC,CAAC,GAAGH,QAAQ,CAAC,CAAC,CAAC,EAAEG,UAAU,CAAC,CAAC,CAAC,GAAGH,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC3EA,QAAQ,GAAGG,UAAU;MACrB,MAAME,SAAS,GAAGjB,YAAY,CAAC,CAAC,GAAG1a,IAAI,CAACD,GAAG,CAACqD,SAAS,CAAC,CAAC,CAAC,EAAEpD,IAAI,CAAC4b,GAAG,CAACxY,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI2X,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;MACzG,MAAM5hB,QAAQ,GAAG;QACbD,CAAC,EAAEkK,SAAS,CAAC,CAAC,CAAC,GAAGsY,QAAQ,CAAC,CAAC,CAAC,GAAGC,SAAS;QACzCviB,CAAC,EAAEgK,SAAS,CAAC,CAAC,CAAC,GAAGsY,QAAQ,CAAC,CAAC,CAAC,GAAGC;MACpC,CAAC;MACD,MAAMpd,MAAM,GAAG,CACX,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC3F,KAAK,EAAEC,MAAM,CAAC,CAClB;MACDqE,OAAO,CAAC6U,sBAAsB,CAAC;QAC3B7Y,CAAC,EAAEC,QAAQ,CAACD,CAAC;QACbE,CAAC,EAAED,QAAQ,CAACC,CAAC;QACb/F,IAAI,EAAE+P,SAAS,CAAC,CAAC;MACrB,CAAC,EAAE7E,MAAM,EAAEsT,eAAe,CAAC;IAC/B,CAAC;IACD,MAAMgK,iBAAiB,GAAGxoB,IAAI,CAAC,CAAC,CAC3BgjB,EAAE,CAAC,OAAO,EAAEkF,eAAe;IAC5B;IACA;IAAA,CACClF,EAAE,CAAC,MAAM,EAAEwE,QAAQ,GAAGW,UAAU,GAAG,IAAI;IACxC;IACA;IAAA,CACCnF,EAAE,CAAC,YAAY,EAAEyE,QAAQ,GAAGE,WAAW,GAAG,IAAI,CAAC;IACpDL,SAAS,CAAC9D,IAAI,CAACgF,iBAAiB,EAAE,CAAC,CAAC,CAAC;EACzC;EACA,SAAS/E,OAAOA,CAAA,EAAG;IACf6D,SAAS,CAACtE,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC;EAC9B;EACA,OAAO;IACH/E,MAAM;IACNwF,OAAO;IACP1jB;EACJ,CAAC;AACL;;AAEA;AACA,MAAM0oB,WAAW,GAAGA,CAACC,YAAY,EAAEC,aAAa,KAAKD,YAAY,CAAC7iB,CAAC,KAAK8iB,aAAa,CAAC9iB,CAAC,IAAI6iB,YAAY,CAAC3iB,CAAC,KAAK4iB,aAAa,CAAC5iB,CAAC,IAAI2iB,YAAY,CAAC1oB,IAAI,KAAK2oB,aAAa,CAAC/J,CAAC;AACtK,MAAMgK,mBAAmB,GAAI7Y,SAAS,KAAM;EACxClK,CAAC,EAAEkK,SAAS,CAAClK,CAAC;EACdE,CAAC,EAAEgK,SAAS,CAAChK,CAAC;EACd/F,IAAI,EAAE+P,SAAS,CAAC6O;AACpB,CAAC,CAAC;AACF,MAAMiK,mBAAmB,GAAGA,CAAC;EAAEhjB,CAAC;EAAEE,CAAC;EAAE/F;AAAK,CAAC,KAAKC,YAAY,CAAC6oB,SAAS,CAACjjB,CAAC,EAAEE,CAAC,CAAC,CAACgjB,KAAK,CAAC/oB,IAAI,CAAC;AACxF,MAAMgpB,kBAAkB,GAAGA,CAAClZ,KAAK,EAAEmZ,SAAS,KAAKnZ,KAAK,CAAC9K,MAAM,CAACkM,OAAO,CAAC,IAAI+X,SAAS,EAAE,CAAC;AACtF,MAAMC,eAAe,GAAGA,CAACC,SAAS,EAAEC,UAAU,KAAKA,UAAU,KAAK,CAAC,IAAInX,KAAK,CAACsN,OAAO,CAAC4J,SAAS,CAAC,IAAIA,SAAS,CAACpY,QAAQ,CAAC,CAAC,CAAC;AACxH,MAAMsY,eAAe,GAAGA,CAAC/B,SAAS,EAAE/c,QAAQ,GAAG,CAAC,EAAE+e,KAAK,GAAGA,CAAA,KAAM,CAAE,CAAC,KAAK;EACpE,MAAMC,WAAW,GAAG,OAAOhf,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,GAAG,CAAC;EAChE,IAAI,CAACgf,WAAW,EAAE;IACdD,KAAK,CAAC,CAAC;EACX;EACA,OAAOC,WAAW,GAAGjC,SAAS,CAACkC,UAAU,CAAC,CAAC,CAACjf,QAAQ,CAACA,QAAQ,CAAC,CAACyY,EAAE,CAAC,KAAK,EAAEsG,KAAK,CAAC,GAAGhC,SAAS;AAC/F,CAAC;AACD,MAAMmC,UAAU,GAAI3Z,KAAK,IAAK;EAC1B,MAAM4Z,MAAM,GAAG5Z,KAAK,CAAC6Z,OAAO,IAAIra,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;EAClD,OAAO,CAACQ,KAAK,CAAC+X,MAAM,IAAI/X,KAAK,CAACgY,SAAS,KAAK,CAAC,GAAG,IAAI,GAAGhY,KAAK,CAACgY,SAAS,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG4B,MAAM;AAChG,CAAC;AAED,SAASE,wBAAwBA,CAAC;EAAEC,aAAa;EAAEC,gBAAgB;EAAEzI,WAAW;EAAE0I,MAAM;EAAEC,eAAe;EAAEC,gBAAgB;EAAEC,WAAW;EAAEC,cAAc;EAAEC,SAAS;EAAEC;AAAc,CAAC,EAAE;EAClL,OAAQva,KAAK,IAAK;IACd,IAAIkZ,kBAAkB,CAAClZ,KAAK,EAAEga,gBAAgB,CAAC,EAAE;MAC7C,OAAO,KAAK;IAChB;IACAha,KAAK,CAACwa,cAAc,CAAC,CAAC;IACtBxa,KAAK,CAACya,wBAAwB,CAAC,CAAC;IAChC,MAAMC,WAAW,GAAGnJ,WAAW,CAACoJ,QAAQ,CAAC,QAAQ,CAAC,CAAC7L,CAAC,IAAI,CAAC;IACzD;IACA,IAAI9O,KAAK,CAAC6Z,OAAO,IAAIO,WAAW,EAAE;MAC9B,MAAMQ,KAAK,GAAG3qB,OAAO,CAAC+P,KAAK,CAAC;MAC5B,MAAM8X,UAAU,GAAG6B,UAAU,CAAC3Z,KAAK,CAAC;MACpC,MAAM9P,IAAI,GAAGwqB,WAAW,GAAG7d,IAAI,CAACiJ,GAAG,CAAC,CAAC,EAAEgS,UAAU,CAAC;MAClD;MACAmC,MAAM,CAAC/B,OAAO,CAAC3G,WAAW,EAAErhB,IAAI,EAAE0qB,KAAK,EAAE5a,KAAK,CAAC;MAC/C;IACJ;IACA;IACA;IACA,MAAM6a,cAAc,GAAG7a,KAAK,CAACgY,SAAS,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC;IACrD,IAAI8C,MAAM,GAAGZ,eAAe,KAAKjoB,eAAe,CAAC8oB,QAAQ,GAAG,CAAC,GAAG/a,KAAK,CAAC8a,MAAM,GAAGD,cAAc;IAC7F,IAAI9C,MAAM,GAAGmC,eAAe,KAAKjoB,eAAe,CAAC+oB,UAAU,GAAG,CAAC,GAAGhb,KAAK,CAAC+X,MAAM,GAAG8C,cAAc;IAC/F;IACA,IAAI,CAACrb,OAAO,CAAC,CAAC,IAAIQ,KAAK,CAACib,QAAQ,IAAIf,eAAe,KAAKjoB,eAAe,CAAC8oB,QAAQ,EAAE;MAC9ED,MAAM,GAAG9a,KAAK,CAAC+X,MAAM,GAAG8C,cAAc;MACtC9C,MAAM,GAAG,CAAC;IACd;IACAkC,MAAM,CAACiB,WAAW,CAAC3J,WAAW,EAAE,EAAEuJ,MAAM,GAAGJ,WAAW,CAAC,GAAGP,gBAAgB,EAAE,EAAEpC,MAAM,GAAG2C,WAAW,CAAC,GAAGP,gBAAgB;IACtH;IACA;MAAEgB,QAAQ,EAAE;IAAK,CAAC,CAAC;IACnB,MAAMxM,YAAY,GAAGmK,mBAAmB,CAACvH,WAAW,CAACoJ,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACxES,YAAY,CAACrB,aAAa,CAACsB,gBAAgB,CAAC;IAC5C;IACA;IACA;IACA,IAAI,CAACtB,aAAa,CAACuB,cAAc,EAAE;MAC/BvB,aAAa,CAACuB,cAAc,GAAG,IAAI;MACnCjB,cAAc,GAAGra,KAAK,EAAE2O,YAAY,CAAC;IACzC;IACA,IAAIoL,aAAa,CAACuB,cAAc,EAAE;MAC9BhB,SAAS,GAAGta,KAAK,EAAE2O,YAAY,CAAC;MAChCoL,aAAa,CAACsB,gBAAgB,GAAGE,UAAU,CAAC,MAAM;QAC9ChB,YAAY,GAAGva,KAAK,EAAE2O,YAAY,CAAC;QACnCoL,aAAa,CAACuB,cAAc,GAAG,KAAK;MACxC,CAAC,EAAE,GAAG,CAAC;IACX;EACJ,CAAC;AACL;AACA,SAASE,yBAAyBA,CAAC;EAAExB,gBAAgB;EAAEyB,gBAAgB;EAAEC;AAAc,CAAC,EAAE;EACtF,OAAO,UAAU1b,KAAK,EAAEqJ,CAAC,EAAE;IACvB;IACA,MAAMsS,WAAW,GAAG,CAACF,gBAAgB,IAAIzb,KAAK,CAAChP,IAAI,KAAK,OAAO,IAAI,CAACgP,KAAK,CAAC6Z,OAAO;IACjF,IAAI8B,WAAW,IAAIzC,kBAAkB,CAAClZ,KAAK,EAAEga,gBAAgB,CAAC,EAAE;MAC5D,OAAO,IAAI;IACf;IACAha,KAAK,CAACwa,cAAc,CAAC,CAAC;IACtBkB,aAAa,CAAChI,IAAI,CAAC,IAAI,EAAE1T,KAAK,EAAEqJ,CAAC,CAAC;EACtC,CAAC;AACL;AACA,SAASuS,yBAAyBA,CAAC;EAAE7B,aAAa;EAAE8B,gBAAgB;EAAExB;AAAe,CAAC,EAAE;EACpF,OAAQra,KAAK,IAAK;IACd,IAAIA,KAAK,CAAC+S,WAAW,EAAEoI,QAAQ,EAAE;MAC7B;IACJ;IACA,MAAM9gB,QAAQ,GAAGye,mBAAmB,CAAC9Y,KAAK,CAACC,SAAS,CAAC;IACrD;IACA8Z,aAAa,CAAC+B,WAAW,GAAG9b,KAAK,CAAC+S,WAAW,EAAEU,MAAM,IAAI,CAAC;IAC1DsG,aAAa,CAACgC,kBAAkB,GAAG,IAAI;IACvChC,aAAa,CAACnB,YAAY,GAAGve,QAAQ;IACrC,IAAI2F,KAAK,CAAC+S,WAAW,EAAE/hB,IAAI,KAAK,WAAW,EAAE;MACzC6qB,gBAAgB,CAAC,IAAI,CAAC;IAC1B;IACA,IAAIxB,cAAc,EAAE;MAChBA,cAAc,GAAGra,KAAK,CAAC+S,WAAW,EAAE1Y,QAAQ,CAAC;IACjD;EACJ,CAAC;AACL;AACA,SAAS2hB,oBAAoBA,CAAC;EAAEjC,aAAa;EAAEV,SAAS;EAAE4C,iBAAiB;EAAEC,iBAAiB;EAAE5B;AAAW,CAAC,EAAE;EAC1G,OAAQta,KAAK,IAAK;IACd+Z,aAAa,CAACoC,oBAAoB,GAAG,CAAC,EAAEF,iBAAiB,IAAI7C,eAAe,CAACC,SAAS,EAAEU,aAAa,CAAC+B,WAAW,IAAI,CAAC,CAAC,CAAC;IACxH,IAAI,CAAC9b,KAAK,CAAC+S,WAAW,EAAEqJ,IAAI,EAAE;MAC1BF,iBAAiB,CAAC,CAAClc,KAAK,CAACC,SAAS,CAAClK,CAAC,EAAEiK,KAAK,CAACC,SAAS,CAAChK,CAAC,EAAE+J,KAAK,CAACC,SAAS,CAAC6O,CAAC,CAAC,CAAC;IAChF;IACA,IAAIwL,SAAS,IAAI,CAACta,KAAK,CAAC+S,WAAW,EAAEoI,QAAQ,EAAE;MAC3Cb,SAAS,GAAGta,KAAK,CAAC+S,WAAW,EAAE+F,mBAAmB,CAAC9Y,KAAK,CAACC,SAAS,CAAC,CAAC;IACxE;EACJ,CAAC;AACL;AACA,SAASoc,uBAAuBA,CAAC;EAAEtC,aAAa;EAAEV,SAAS;EAAEiD,WAAW;EAAET,gBAAgB;EAAEtB,YAAY;EAAE0B;AAAmB,CAAC,EAAE;EAC5H,OAAQjc,KAAK,IAAK;IACd,IAAIA,KAAK,CAAC+S,WAAW,EAAEoI,QAAQ,EAAE;MAC7B;IACJ;IACApB,aAAa,CAACgC,kBAAkB,GAAG,KAAK;IACxC,IAAIE,iBAAiB,IACjB7C,eAAe,CAACC,SAAS,EAAEU,aAAa,CAAC+B,WAAW,IAAI,CAAC,CAAC,IAC1D,CAAC/B,aAAa,CAACoC,oBAAoB,IACnCnc,KAAK,CAAC+S,WAAW,EAAE;MACnBkJ,iBAAiB,CAACjc,KAAK,CAAC+S,WAAW,CAAC;IACxC;IACAgH,aAAa,CAACoC,oBAAoB,GAAG,KAAK;IAC1CN,gBAAgB,CAAC,KAAK,CAAC;IACvB,IAAItB,YAAY,IAAI5B,WAAW,CAACoB,aAAa,CAACnB,YAAY,EAAE5Y,KAAK,CAACC,SAAS,CAAC,EAAE;MAC1E,MAAM5F,QAAQ,GAAGye,mBAAmB,CAAC9Y,KAAK,CAACC,SAAS,CAAC;MACrD8Z,aAAa,CAACnB,YAAY,GAAGve,QAAQ;MACrC+gB,YAAY,CAACrB,aAAa,CAACwC,OAAO,CAAC;MACnCxC,aAAa,CAACwC,OAAO,GAAGhB,UAAU,CAAC,MAAM;QACrChB,YAAY,GAAGva,KAAK,CAAC+S,WAAW,EAAE1Y,QAAQ,CAAC;MAC/C,CAAC;MACD;MACAiiB,WAAW,GAAG,GAAG,GAAG,CAAC,CAAC;IAC1B;EACJ,CAAC;AACL;;AAEA;AACA,SAASE,YAAYA,CAAC;EAAEC,wBAAwB;EAAEC,YAAY;EAAEtC,WAAW;EAAEf,SAAS;EAAEiD,WAAW;EAAEK,iBAAiB;EAAEC,mBAAmB;EAAE5C,gBAAgB;EAAE6C,cAAc;EAAEnrB;AAAK,CAAC,EAAE;EACnL,OAAQsO,KAAK,IAAK;IACd,MAAM8c,UAAU,GAAGL,wBAAwB,IAAIC,YAAY;IAC3D,MAAMK,SAAS,GAAG3C,WAAW,IAAIpa,KAAK,CAAC6Z,OAAO;IAC9C,IAAI7Z,KAAK,CAACyT,MAAM,KAAK,CAAC,IAClBzT,KAAK,CAAChP,IAAI,KAAK,WAAW,KACzBkoB,kBAAkB,CAAClZ,KAAK,EAAE,GAAGtO,GAAG,aAAa,CAAC,IAAIwnB,kBAAkB,CAAClZ,KAAK,EAAE,GAAGtO,GAAG,aAAa,CAAC,CAAC,EAAE;MACpG,OAAO,IAAI;IACf;IACA;IACA,IAAI,CAAC2nB,SAAS,IAAI,CAACyD,UAAU,IAAI,CAACR,WAAW,IAAI,CAACK,iBAAiB,IAAI,CAACvC,WAAW,EAAE;MACjF,OAAO,KAAK;IAChB;IACA;IACA,IAAIwC,mBAAmB,EAAE;MACrB,OAAO,KAAK;IAChB;IACA;IACA,IAAI1D,kBAAkB,CAAClZ,KAAK,EAAEga,gBAAgB,CAAC,IAAIha,KAAK,CAAChP,IAAI,KAAK,OAAO,EAAE;MACvE,OAAO,KAAK;IAChB;IACA;IACA,IAAIkoB,kBAAkB,CAAClZ,KAAK,EAAE6c,cAAc,CAAC,KACxC7c,KAAK,CAAChP,IAAI,KAAK,OAAO,IAAKsrB,WAAW,IAAItc,KAAK,CAAChP,IAAI,KAAK,OAAO,IAAI,CAACyrB,wBAAyB,CAAC,EAAE;MAClG,OAAO,KAAK;IAChB;IACA,IAAI,CAACrC,WAAW,IAAIpa,KAAK,CAAC6Z,OAAO,IAAI7Z,KAAK,CAAChP,IAAI,KAAK,OAAO,EAAE;MACzD,OAAO,KAAK;IAChB;IACA,IAAI,CAACopB,WAAW,IAAIpa,KAAK,CAAChP,IAAI,KAAK,YAAY,IAAIgP,KAAK,CAACyB,OAAO,EAAEtN,MAAM,GAAG,CAAC,EAAE;MAC1E6L,KAAK,CAACwa,cAAc,CAAC,CAAC,CAAC,CAAC;MACxB,OAAO,KAAK;IAChB;IACA;IACA,IAAI,CAACsC,UAAU,IAAI,CAACR,WAAW,IAAI,CAACS,SAAS,IAAI/c,KAAK,CAAChP,IAAI,KAAK,OAAO,EAAE;MACrE,OAAO,KAAK;IAChB;IACA;IACA,IAAI,CAACqoB,SAAS,KAAKrZ,KAAK,CAAChP,IAAI,KAAK,WAAW,IAAIgP,KAAK,CAAChP,IAAI,KAAK,YAAY,CAAC,EAAE;MAC3E,OAAO,KAAK;IAChB;IACA;IACA,IAAImR,KAAK,CAACsN,OAAO,CAAC4J,SAAS,CAAC,IAAI,CAACA,SAAS,CAACpY,QAAQ,CAACjB,KAAK,CAACyT,MAAM,CAAC,IAAIzT,KAAK,CAAChP,IAAI,KAAK,WAAW,EAAE;MAC7F,OAAO,KAAK;IAChB;IACA;IACA,MAAMgsB,aAAa,GAAI7a,KAAK,CAACsN,OAAO,CAAC4J,SAAS,CAAC,IAAIA,SAAS,CAACpY,QAAQ,CAACjB,KAAK,CAACyT,MAAM,CAAC,IAAK,CAACzT,KAAK,CAACyT,MAAM,IAAIzT,KAAK,CAACyT,MAAM,IAAI,CAAC;IAC1H;IACA,OAAO,CAAC,CAACzT,KAAK,CAAC6Z,OAAO,IAAI7Z,KAAK,CAAChP,IAAI,KAAK,OAAO,KAAKgsB,aAAa;EACtE,CAAC;AACL;AAEA,SAASC,SAASA,CAAC;EAAEvP,OAAO;EAAE1T,OAAO;EAAEC,OAAO;EAAEijB,iBAAiB;EAAExO,eAAe;EAAErU,QAAQ;EAAEigB,SAAS;EAAED,cAAc;EAAEE,YAAY;EAAEsB;AAAkB,CAAC,EAAE;EACxJ,MAAM9B,aAAa,GAAG;IAClBgC,kBAAkB,EAAE,KAAK;IACzBI,oBAAoB,EAAE,KAAK;IAC3BvD,YAAY,EAAE;MAAE7iB,CAAC,EAAE,CAAC;MAAEE,CAAC,EAAE,CAAC;MAAE/F,IAAI,EAAE;IAAE,CAAC;IACrC4rB,WAAW,EAAE,CAAC;IACdS,OAAO,EAAElmB,SAAS;IAClBglB,gBAAgB,EAAEhlB,SAAS;IAC3BilB,cAAc,EAAE;EACpB,CAAC;EACD,MAAM6B,IAAI,GAAGzP,OAAO,CAACrL,qBAAqB,CAAC,CAAC;EAC5C,MAAM+a,cAAc,GAAGltB,IAAI,CAAC,CAAC,CACxB+iB,aAAa,CAAC,CAACxU,SAAS,CAACye,iBAAiB,CAAC,IAAIA,iBAAiB,GAAG,CAAC,GAAG,CAAC,GAAGA,iBAAiB,CAAC,CAC7FG,WAAW,CAAC,CAACrjB,OAAO,EAAEC,OAAO,CAAC,CAAC,CAC/ByU,eAAe,CAACA,eAAe,CAAC;EACrC,MAAM6C,WAAW,GAAGvhB,MAAM,CAAC0d,OAAO,CAAC,CAACgG,IAAI,CAAC0J,cAAc,CAAC;EACxDxO,sBAAsB,CAAC;IACnB7Y,CAAC,EAAEsE,QAAQ,CAACtE,CAAC;IACbE,CAAC,EAAEoE,QAAQ,CAACpE,CAAC;IACb/F,IAAI,EAAEuM,KAAK,CAACpC,QAAQ,CAACnK,IAAI,EAAE8J,OAAO,EAAEC,OAAO;EAC/C,CAAC,EAAE,CACC,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAACkjB,IAAI,CAAC1nB,KAAK,EAAE0nB,IAAI,CAACznB,MAAM,CAAC,CAC5B,EAAEgZ,eAAe,CAAC;EACnB,MAAMgN,aAAa,GAAGnK,WAAW,CAAC2B,EAAE,CAAC,YAAY,CAAC;EAClD,MAAMoK,qBAAqB,GAAG/L,WAAW,CAAC2B,EAAE,CAAC,eAAe,CAAC;EAC7DkK,cAAc,CAACzD,UAAU,CAACA,UAAU,CAAC;EACrC,SAAS4D,YAAYA,CAACtd,SAAS,EAAE1G,OAAO,EAAE;IACtC,IAAIgY,WAAW,EAAE;MACb,OAAO,IAAIrX,OAAO,CAAEC,OAAO,IAAK;QAC5BijB,cAAc,EAAEnd,SAAS,CAACsZ,eAAe,CAAChI,WAAW,EAAEhY,OAAO,EAAEkB,QAAQ,EAAE,MAAMN,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE8F,SAAS,CAAC;MAC9G,CAAC,CAAC;IACN;IACA,OAAO/F,OAAO,CAACC,OAAO,CAAC,KAAK,CAAC;EACjC;EACA;EACA,SAASgU,MAAMA,CAAC;IAAE6L,gBAAgB;IAAE6C,cAAc;IAAEZ,iBAAiB;IAAEW,mBAAmB;IAAEN,WAAW;IAAEjD,SAAS;IAAEa,eAAe;IAAEC,gBAAgB;IAAEsB,gBAAgB;IAAErB,WAAW;IAAEsC,YAAY;IAAEC,iBAAiB;IAAEF,wBAAwB;IAAE/qB,GAAG;IAAEwqB;EAAmB,CAAC,EAAE;IACxQ,IAAIU,mBAAmB,IAAI,CAAC7C,aAAa,CAACgC,kBAAkB,EAAE;MAC1DpI,OAAO,CAAC,CAAC;IACb;IACA,MAAM6J,aAAa,GAAGlB,WAAW,IAAI,CAACG,wBAAwB,IAAI,CAACG,mBAAmB;IACtF,MAAMa,YAAY,GAAGD,aAAa,GAC5B1D,wBAAwB,CAAC;MACvBC,aAAa;MACbC,gBAAgB;MAChBzI,WAAW;MACX0I,MAAM,EAAEmD,cAAc;MACtBlD,eAAe;MACfC,gBAAgB;MAChBC,WAAW;MACXC,cAAc;MACdC,SAAS;MACTC;IACJ,CAAC,CAAC,GACAiB,yBAAyB,CAAC;MACxBxB,gBAAgB;MAChByB,gBAAgB;MAChBC;IACJ,CAAC,CAAC;IACNnK,WAAW,CAAC2B,EAAE,CAAC,YAAY,EAAEuK,YAAY,EAAE;MAAEC,OAAO,EAAE;IAAM,CAAC,CAAC;IAC9D,IAAI,CAACd,mBAAmB,EAAE;MACtB;MACA,MAAMe,YAAY,GAAG/B,yBAAyB,CAAC;QAC3C7B,aAAa;QACb8B,gBAAgB;QAChBxB;MACJ,CAAC,CAAC;MACF+C,cAAc,CAAClK,EAAE,CAAC,OAAO,EAAEyK,YAAY,CAAC;MACxC;MACA,MAAMC,cAAc,GAAG5B,oBAAoB,CAAC;QACxCjC,aAAa;QACbV,SAAS;QACT4C,iBAAiB,EAAE,CAAC,CAACA,iBAAiB;QACtC3B,SAAS;QACT4B;MACJ,CAAC,CAAC;MACFkB,cAAc,CAAClK,EAAE,CAAC,MAAM,EAAE0K,cAAc,CAAC;MACzC;MACA,MAAMC,iBAAiB,GAAGxB,uBAAuB,CAAC;QAC9CtC,aAAa;QACbV,SAAS;QACTiD,WAAW;QACXL,iBAAiB;QACjB1B,YAAY;QACZsB;MACJ,CAAC,CAAC;MACFuB,cAAc,CAAClK,EAAE,CAAC,KAAK,EAAE2K,iBAAiB,CAAC;IAC/C;IACA,MAAM1oB,MAAM,GAAGqnB,YAAY,CAAC;MACxBC,wBAAwB;MACxBpD,SAAS;MACTqD,YAAY;MACZJ,WAAW;MACXK,iBAAiB;MACjBvC,WAAW;MACXwC,mBAAmB;MACnBC,cAAc;MACd7C,gBAAgB;MAChBtoB;IACJ,CAAC,CAAC;IACF0rB,cAAc,CAACjoB,MAAM,CAACA,MAAM,CAAC;IAC7B;IACA;IACA;IACA,IAAIwnB,iBAAiB,EAAE;MACnBpL,WAAW,CAAC2B,EAAE,CAAC,eAAe,EAAEoK,qBAAqB,CAAC;IAC1D,CAAC,MACI;MACD/L,WAAW,CAAC2B,EAAE,CAAC,eAAe,EAAE,IAAI,CAAC;IACzC;EACJ;EACA,SAASS,OAAOA,CAAA,EAAG;IACfyJ,cAAc,CAAClK,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC;EACnC;EACA,eAAetE,sBAAsBA,CAACvU,QAAQ,EAAEe,MAAM,EAAEsT,eAAe,EAAE;IACrE,MAAMoP,aAAa,GAAG/E,mBAAmB,CAAC1e,QAAQ,CAAC;IACnD,MAAM0jB,mBAAmB,GAAGX,cAAc,EAAEY,SAAS,CAAC,CAAC,CAACF,aAAa,EAAE1iB,MAAM,EAAEsT,eAAe,CAAC;IAC/F,IAAIqP,mBAAmB,EAAE;MACrB,MAAMR,YAAY,CAACQ,mBAAmB,CAAC;IAC3C;IACA,OAAO,IAAI7jB,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAAC4jB,mBAAmB,CAAC,CAAC;EACjE;EACA,eAAevjB,WAAWA,CAACH,QAAQ,EAAEd,OAAO,EAAE;IAC1C,MAAMukB,aAAa,GAAG/E,mBAAmB,CAAC1e,QAAQ,CAAC;IACnD,MAAMkjB,YAAY,CAACO,aAAa,EAAEvkB,OAAO,CAAC;IAC1C,OAAO,IAAIW,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAAC2jB,aAAa,CAAC,CAAC;EAC3D;EACA,SAASG,YAAYA,CAAC5jB,QAAQ,EAAE;IAC5B,IAAIkX,WAAW,EAAE;MACb,MAAMuM,aAAa,GAAG/E,mBAAmB,CAAC1e,QAAQ,CAAC;MACnD,MAAM6jB,gBAAgB,GAAG3M,WAAW,CAACoJ,QAAQ,CAAC,QAAQ,CAAC;MACvD,IAAIuD,gBAAgB,CAACpP,CAAC,KAAKzU,QAAQ,CAACnK,IAAI,IACpCguB,gBAAgB,CAACnoB,CAAC,KAAKsE,QAAQ,CAACtE,CAAC,IACjCmoB,gBAAgB,CAACjoB,CAAC,KAAKoE,QAAQ,CAACpE,CAAC,EAAE;QACnC;QACA;QACAmnB,cAAc,EAAEnd,SAAS,CAACsR,WAAW,EAAEuM,aAAa,EAAE,IAAI,EAAE;UAAE1B,IAAI,EAAE;QAAK,CAAC,CAAC;MAC/E;IACJ;EACJ;EACA,SAAS+B,WAAWA,CAAA,EAAG;IACnB,MAAMle,SAAS,GAAGsR,WAAW,GAAGnhB,aAAa,CAACmhB,WAAW,CAAC7c,IAAI,CAAC,CAAC,CAAC,GAAG;MAAEqB,CAAC,EAAE,CAAC;MAAEE,CAAC,EAAE,CAAC;MAAE6Y,CAAC,EAAE;IAAE,CAAC;IACxF,OAAO;MAAE/Y,CAAC,EAAEkK,SAAS,CAAClK,CAAC;MAAEE,CAAC,EAAEgK,SAAS,CAAChK,CAAC;MAAE/F,IAAI,EAAE+P,SAAS,CAAC6O;IAAE,CAAC;EAChE;EACA,SAASoJ,OAAOA,CAAChoB,IAAI,EAAEqJ,OAAO,EAAE;IAC5B,IAAIgY,WAAW,EAAE;MACb,OAAO,IAAIrX,OAAO,CAAEC,OAAO,IAAK;QAC5BijB,cAAc,EAAElF,OAAO,CAACqB,eAAe,CAAChI,WAAW,EAAEhY,OAAO,EAAEkB,QAAQ,EAAE,MAAMN,OAAO,CAAC,IAAI,CAAC,CAAC,EAAEjK,IAAI,CAAC;MACvG,CAAC,CAAC;IACN;IACA,OAAOgK,OAAO,CAACC,OAAO,CAAC,KAAK,CAAC;EACjC;EACA,SAASikB,OAAOA,CAACxE,MAAM,EAAErgB,OAAO,EAAE;IAC9B,IAAIgY,WAAW,EAAE;MACb,OAAO,IAAIrX,OAAO,CAAEC,OAAO,IAAK;QAC5BijB,cAAc,EAAEgB,OAAO,CAAC7E,eAAe,CAAChI,WAAW,EAAEhY,OAAO,EAAEkB,QAAQ,EAAE,MAAMN,OAAO,CAAC,IAAI,CAAC,CAAC,EAAEyf,MAAM,CAAC;MACzG,CAAC,CAAC;IACN;IACA,OAAO1f,OAAO,CAACC,OAAO,CAAC,KAAK,CAAC;EACjC;EACA,SAASkkB,cAAcA,CAAChB,WAAW,EAAE;IACjCD,cAAc,EAAEC,WAAW,CAACA,WAAW,CAAC;EAC5C;EACA,SAASiB,kBAAkBA,CAAC5P,eAAe,EAAE;IACzC0O,cAAc,EAAE1O,eAAe,CAACA,eAAe,CAAC;EACpD;EACA,SAAS6P,gBAAgBA,CAAC9gB,QAAQ,EAAE;IAChC,MAAM+gB,aAAa,GAAG,CAAC/f,SAAS,CAAChB,QAAQ,CAAC,IAAIA,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAGA,QAAQ;IACzE2f,cAAc,EAAEnK,aAAa,CAACuL,aAAa,CAAC;EAChD;EACA,OAAO;IACHrQ,MAAM;IACNwF,OAAO;IACPnZ,WAAW;IACXoU,sBAAsB;IACtBuP,WAAW;IACXjG,OAAO;IACPkG,OAAO;IACPC,cAAc;IACdC,kBAAkB;IAClBL,YAAY;IACZM;EACJ,CAAC;AACL;AAEA,IAAIE,oBAAoB;AACxB,CAAC,UAAUA,oBAAoB,EAAE;EAC7BA,oBAAoB,CAAC,MAAM,CAAC,GAAG,MAAM;EACrCA,oBAAoB,CAAC,QAAQ,CAAC,GAAG,QAAQ;AAC7C,CAAC,EAAEA,oBAAoB,KAAKA,oBAAoB,GAAG,CAAC,CAAC,CAAC,CAAC;AACvD,MAAMC,2BAA2B,GAAG,CAAC,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE,cAAc,CAAC;AAC5F,MAAMC,yBAAyB,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAAC;EAAEnpB,KAAK;EAAEopB,SAAS;EAAEnpB,MAAM;EAAEopB,UAAU;EAAEC,QAAQ;EAAEC;AAAU,CAAC,EAAE;EACvF,MAAMC,UAAU,GAAGxpB,KAAK,GAAGopB,SAAS;EACpC,MAAMK,WAAW,GAAGxpB,MAAM,GAAGopB,UAAU;EACvC,MAAMK,SAAS,GAAG,CAACF,UAAU,GAAG,CAAC,GAAG,CAAC,GAAGA,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAEC,WAAW,GAAG,CAAC,GAAG,CAAC,GAAGA,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EAChH,IAAID,UAAU,IAAIF,QAAQ,EAAE;IACxBI,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACpC;EACA,IAAID,WAAW,IAAIF,QAAQ,EAAE;IACzBG,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACpC;EACA,OAAOA,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAACC,eAAe,EAAE;EAC1C,MAAMC,YAAY,GAAGD,eAAe,CAACpe,QAAQ,CAAC,OAAO,CAAC,IAAIoe,eAAe,CAACpe,QAAQ,CAAC,MAAM,CAAC;EAC1F,MAAMse,UAAU,GAAGF,eAAe,CAACpe,QAAQ,CAAC,QAAQ,CAAC,IAAIoe,eAAe,CAACpe,QAAQ,CAAC,KAAK,CAAC;EACxF,MAAM8d,QAAQ,GAAGM,eAAe,CAACpe,QAAQ,CAAC,MAAM,CAAC;EACjD,MAAM+d,QAAQ,GAAGK,eAAe,CAACpe,QAAQ,CAAC,KAAK,CAAC;EAChD,OAAO;IACHqe,YAAY;IACZC,UAAU;IACVR,QAAQ;IACRC;EACJ,CAAC;AACL;AACA,SAASQ,mBAAmBA,CAACC,WAAW,EAAEC,UAAU,EAAE;EAClD,OAAO7iB,IAAI,CAACD,GAAG,CAAC,CAAC,EAAE8iB,UAAU,GAAGD,WAAW,CAAC;AAChD;AACA,SAASE,mBAAmBA,CAACC,WAAW,EAAEC,UAAU,EAAE;EAClD,OAAOhjB,IAAI,CAACD,GAAG,CAAC,CAAC,EAAEgjB,WAAW,GAAGC,UAAU,CAAC;AAChD;AACA,SAASC,YAAYA,CAACrsB,IAAI,EAAEssB,OAAO,EAAEC,OAAO,EAAE;EAC1C,OAAOnjB,IAAI,CAACD,GAAG,CAAC,CAAC,EAAEmjB,OAAO,GAAGtsB,IAAI,EAAEA,IAAI,GAAGusB,OAAO,CAAC;AACtD;AACA,SAASC,GAAGA,CAAC1sB,CAAC,EAAEC,CAAC,EAAE;EACf,OAAOD,CAAC,GAAG,CAACC,CAAC,GAAGA,CAAC;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0sB,wBAAwBA,CAACC,WAAW,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,UAAU,EAAEC,eAAe,EAAE/qB,UAAU,EAAE4F,MAAM,EAAEolB,WAAW,EAAE;EAC5I,IAAI;IAAEzB,QAAQ;IAAEC;EAAS,CAAC,GAAGoB,gBAAgB;EAC7C,MAAM;IAAEd,YAAY;IAAEC;EAAW,CAAC,GAAGa,gBAAgB;EACrD,MAAMK,UAAU,GAAGnB,YAAY,IAAIC,UAAU;EAC7C,MAAM;IAAEnf,QAAQ;IAAEC;EAAS,CAAC,GAAGggB,eAAe;EAC9C,MAAM;IAAEK,QAAQ;IAAEC,QAAQ;IAAEC,SAAS;IAAEC;EAAU,CAAC,GAAGP,UAAU;EAC/D,MAAM;IAAEvqB,CAAC,EAAE+qB,MAAM;IAAE7qB,CAAC,EAAE8qB,MAAM;IAAEtrB,KAAK,EAAEurB,UAAU;IAAEtrB,MAAM,EAAEurB,WAAW;IAAEC;EAAY,CAAC,GAAGf,WAAW;EACjG,IAAIgB,KAAK,GAAGtkB,IAAI,CAACukB,KAAK,CAAC9B,YAAY,GAAGlf,QAAQ,GAAG+f,WAAW,CAACkB,QAAQ,GAAG,CAAC,CAAC;EAC1E,IAAIC,KAAK,GAAGzkB,IAAI,CAACukB,KAAK,CAAC7B,UAAU,GAAGlf,QAAQ,GAAG8f,WAAW,CAACoB,QAAQ,GAAG,CAAC,CAAC;EACxE,MAAMpU,QAAQ,GAAG6T,UAAU,IAAIjC,QAAQ,GAAG,CAACoC,KAAK,GAAGA,KAAK,CAAC;EACzD,MAAM/T,SAAS,GAAG6T,WAAW,IAAIjC,QAAQ,GAAG,CAACsC,KAAK,GAAGA,KAAK,CAAC;EAC3D,MAAME,aAAa,GAAG,CAAChsB,UAAU,CAAC,CAAC,CAAC,GAAGwrB,UAAU;EACjD,MAAMS,aAAa,GAAG,CAACjsB,UAAU,CAAC,CAAC,CAAC,GAAGyrB,WAAW;EAClD;EACA,IAAIS,MAAM,GAAG5B,YAAY,CAAC3S,QAAQ,EAAEuT,QAAQ,EAAEC,QAAQ,CAAC;EACvD,IAAIgB,MAAM,GAAG7B,YAAY,CAAC1S,SAAS,EAAEwT,SAAS,EAAEC,SAAS,CAAC;EAC1D;EACA,IAAIzlB,MAAM,EAAE;IACR,IAAIwmB,YAAY,GAAG,CAAC;IACpB,IAAIC,YAAY,GAAG,CAAC;IACpB,IAAI9C,QAAQ,IAAIoC,KAAK,GAAG,CAAC,EAAE;MACvBS,YAAY,GAAGpC,mBAAmB,CAACsB,MAAM,GAAGK,KAAK,GAAGK,aAAa,EAAEpmB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpF,CAAC,MACI,IAAI,CAAC2jB,QAAQ,IAAIoC,KAAK,GAAG,CAAC,EAAE;MAC7BS,YAAY,GAAGjC,mBAAmB,CAACmB,MAAM,GAAG3T,QAAQ,GAAGqU,aAAa,EAAEpmB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvF;IACA,IAAI4jB,QAAQ,IAAIsC,KAAK,GAAG,CAAC,EAAE;MACvBO,YAAY,GAAGrC,mBAAmB,CAACuB,MAAM,GAAGO,KAAK,GAAGG,aAAa,EAAErmB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpF,CAAC,MACI,IAAI,CAAC4jB,QAAQ,IAAIsC,KAAK,GAAG,CAAC,EAAE;MAC7BO,YAAY,GAAGlC,mBAAmB,CAACoB,MAAM,GAAG3T,SAAS,GAAGqU,aAAa,EAAErmB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxF;IACAsmB,MAAM,GAAG7kB,IAAI,CAACD,GAAG,CAAC8kB,MAAM,EAAEE,YAAY,CAAC;IACvCD,MAAM,GAAG9kB,IAAI,CAACD,GAAG,CAAC+kB,MAAM,EAAEE,YAAY,CAAC;EAC3C;EACA;EACA,IAAIrB,WAAW,EAAE;IACb,IAAIoB,YAAY,GAAG,CAAC;IACpB,IAAIC,YAAY,GAAG,CAAC;IACpB,IAAI9C,QAAQ,IAAIoC,KAAK,GAAG,CAAC,EAAE;MACvBS,YAAY,GAAGjC,mBAAmB,CAACmB,MAAM,GAAGK,KAAK,EAAEX,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzE,CAAC,MACI,IAAI,CAACzB,QAAQ,IAAIoC,KAAK,GAAG,CAAC,EAAE;MAC7BS,YAAY,GAAGpC,mBAAmB,CAACsB,MAAM,GAAG3T,QAAQ,EAAEqT,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5E;IACA,IAAIxB,QAAQ,IAAIsC,KAAK,GAAG,CAAC,EAAE;MACvBO,YAAY,GAAGlC,mBAAmB,CAACoB,MAAM,GAAGO,KAAK,EAAEd,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzE,CAAC,MACI,IAAI,CAACxB,QAAQ,IAAIsC,KAAK,GAAG,CAAC,EAAE;MAC7BO,YAAY,GAAGrC,mBAAmB,CAACuB,MAAM,GAAG3T,SAAS,EAAEoT,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7E;IACAkB,MAAM,GAAG7kB,IAAI,CAACD,GAAG,CAAC8kB,MAAM,EAAEE,YAAY,CAAC;IACvCD,MAAM,GAAG9kB,IAAI,CAACD,GAAG,CAAC+kB,MAAM,EAAEE,YAAY,CAAC;EAC3C;EACA;EACA,IAAItB,eAAe,EAAE;IACjB,IAAIjB,YAAY,EAAE;MACd;MACA,MAAMwC,iBAAiB,GAAGhC,YAAY,CAAC3S,QAAQ,GAAG+T,WAAW,EAAEN,SAAS,EAAEC,SAAS,CAAC,GAAGK,WAAW;MAClGQ,MAAM,GAAG7kB,IAAI,CAACD,GAAG,CAAC8kB,MAAM,EAAEI,iBAAiB,CAAC;MAC5C;MACA,IAAI1mB,MAAM,EAAE;QACR,IAAI2mB,iBAAiB,GAAG,CAAC;QACzB,IAAK,CAAChD,QAAQ,IAAI,CAACC,QAAQ,IAAMD,QAAQ,IAAI,CAACC,QAAQ,IAAIyB,UAAW,EAAE;UACnEsB,iBAAiB,GACbpC,mBAAmB,CAACoB,MAAM,GAAGU,aAAa,GAAGtU,QAAQ,GAAG+T,WAAW,EAAE9lB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG8lB,WAAW;QACxG,CAAC,MACI;UACDa,iBAAiB,GACbvC,mBAAmB,CAACuB,MAAM,GAAGU,aAAa,GAAG,CAAC1C,QAAQ,GAAGoC,KAAK,GAAG,CAACA,KAAK,IAAID,WAAW,EAAE9lB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjG8lB,WAAW;QACvB;QACAQ,MAAM,GAAG7kB,IAAI,CAACD,GAAG,CAAC8kB,MAAM,EAAEK,iBAAiB,CAAC;MAChD;MACA;MACA,IAAIvB,WAAW,EAAE;QACb,IAAIuB,iBAAiB,GAAG,CAAC;QACzB,IAAK,CAAChD,QAAQ,IAAI,CAACC,QAAQ,IAAMD,QAAQ,IAAI,CAACC,QAAQ,IAAIyB,UAAW,EAAE;UACnEsB,iBAAiB,GAAGvC,mBAAmB,CAACuB,MAAM,GAAG5T,QAAQ,GAAG+T,WAAW,EAAEV,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGU,WAAW;QAC7G,CAAC,MACI;UACDa,iBAAiB,GACbpC,mBAAmB,CAACoB,MAAM,GAAG,CAAChC,QAAQ,GAAGoC,KAAK,GAAG,CAACA,KAAK,IAAID,WAAW,EAAEV,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGU,WAAW;QAChH;QACAQ,MAAM,GAAG7kB,IAAI,CAACD,GAAG,CAAC8kB,MAAM,EAAEK,iBAAiB,CAAC;MAChD;IACJ;IACA;IACA,IAAIxC,UAAU,EAAE;MACZ,MAAMyC,gBAAgB,GAAGlC,YAAY,CAAC1S,SAAS,GAAG8T,WAAW,EAAER,QAAQ,EAAEC,QAAQ,CAAC,GAAGO,WAAW;MAChGS,MAAM,GAAG9kB,IAAI,CAACD,GAAG,CAAC+kB,MAAM,EAAEK,gBAAgB,CAAC;MAC3C,IAAI5mB,MAAM,EAAE;QACR,IAAI2mB,iBAAiB,GAAG,CAAC;QACzB,IAAK,CAAChD,QAAQ,IAAI,CAACC,QAAQ,IAAMA,QAAQ,IAAI,CAACD,QAAQ,IAAI0B,UAAW,EAAE;UACnEsB,iBAAiB,GACbpC,mBAAmB,CAACmB,MAAM,GAAG1T,SAAS,GAAG8T,WAAW,GAAGM,aAAa,EAAEpmB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG8lB,WAAW;QACzG,CAAC,MACI;UACDa,iBAAiB,GACbvC,mBAAmB,CAACsB,MAAM,GAAG,CAAC9B,QAAQ,GAAGsC,KAAK,GAAG,CAACA,KAAK,IAAIJ,WAAW,GAAGM,aAAa,EAAEpmB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjG8lB,WAAW;QACvB;QACAS,MAAM,GAAG9kB,IAAI,CAACD,GAAG,CAAC+kB,MAAM,EAAEI,iBAAiB,CAAC;MAChD;MACA,IAAIvB,WAAW,EAAE;QACb,IAAIuB,iBAAiB,GAAG,CAAC;QACzB,IAAK,CAAChD,QAAQ,IAAI,CAACC,QAAQ,IAAMA,QAAQ,IAAI,CAACD,QAAQ,IAAI0B,UAAW,EAAE;UACnEsB,iBAAiB,GAAGvC,mBAAmB,CAACsB,MAAM,GAAG1T,SAAS,GAAG8T,WAAW,EAAEV,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGU,WAAW;QAC9G,CAAC,MACI;UACDa,iBAAiB,GACbpC,mBAAmB,CAACmB,MAAM,GAAG,CAAC9B,QAAQ,GAAGsC,KAAK,GAAG,CAACA,KAAK,IAAIJ,WAAW,EAAEV,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGU,WAAW;QAChH;QACAS,MAAM,GAAG9kB,IAAI,CAACD,GAAG,CAAC+kB,MAAM,EAAEI,iBAAiB,CAAC;MAChD;IACJ;EACJ;EACAT,KAAK,GAAGA,KAAK,IAAIA,KAAK,GAAG,CAAC,GAAGK,MAAM,GAAG,CAACA,MAAM,CAAC;EAC9CR,KAAK,GAAGA,KAAK,IAAIA,KAAK,GAAG,CAAC,GAAGO,MAAM,GAAG,CAACA,MAAM,CAAC;EAC9C,IAAInB,eAAe,EAAE;IACjB,IAAIE,UAAU,EAAE;MACZ,IAAItT,QAAQ,GAAGC,SAAS,GAAG8T,WAAW,EAAE;QACpCI,KAAK,GAAG,CAACrB,GAAG,CAAClB,QAAQ,EAAEC,QAAQ,CAAC,GAAG,CAACmC,KAAK,GAAGA,KAAK,IAAID,WAAW;MACpE,CAAC,MACI;QACDC,KAAK,GAAG,CAAClB,GAAG,CAAClB,QAAQ,EAAEC,QAAQ,CAAC,GAAG,CAACsC,KAAK,GAAGA,KAAK,IAAIJ,WAAW;MACpE;IACJ,CAAC,MACI;MACD,IAAI5B,YAAY,EAAE;QACdgC,KAAK,GAAGH,KAAK,GAAGD,WAAW;QAC3BlC,QAAQ,GAAGD,QAAQ;MACvB,CAAC,MACI;QACDoC,KAAK,GAAGG,KAAK,GAAGJ,WAAW;QAC3BnC,QAAQ,GAAGC,QAAQ;MACvB;IACJ;EACJ;EACA,MAAMjpB,CAAC,GAAGgpB,QAAQ,GAAG+B,MAAM,GAAGK,KAAK,GAAGL,MAAM;EAC5C,MAAM7qB,CAAC,GAAG+oB,QAAQ,GAAG+B,MAAM,GAAGO,KAAK,GAAGP,MAAM;EAC5C,OAAO;IACHtrB,KAAK,EAAEurB,UAAU,IAAIjC,QAAQ,GAAG,CAACoC,KAAK,GAAGA,KAAK,CAAC;IAC/CzrB,MAAM,EAAEurB,WAAW,IAAIjC,QAAQ,GAAG,CAACsC,KAAK,GAAGA,KAAK,CAAC;IACjDvrB,CAAC,EAAEP,UAAU,CAAC,CAAC,CAAC,GAAG2rB,KAAK,IAAI,CAACpC,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAGhpB,CAAC;IACnDE,CAAC,EAAET,UAAU,CAAC,CAAC,CAAC,GAAG8rB,KAAK,IAAI,CAACtC,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG/oB;EACtD,CAAC;AACL;AAEA,MAAMgsB,cAAc,GAAG;EAAExsB,KAAK,EAAE,CAAC;EAAEC,MAAM,EAAE,CAAC;EAAEK,CAAC,EAAE,CAAC;EAAEE,CAAC,EAAE;AAAE,CAAC;AAC1D,MAAMisB,eAAe,GAAG;EACpB,GAAGD,cAAc;EACjBZ,QAAQ,EAAE,CAAC;EACXE,QAAQ,EAAE,CAAC;EACXL,WAAW,EAAE;AACjB,CAAC;AACD,SAASiB,kBAAkBA,CAACztB,IAAI,EAAE;EAC9B,OAAO,CACH,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAACA,IAAI,CAAC2D,QAAQ,CAAC5C,KAAK,EAAEf,IAAI,CAAC2D,QAAQ,CAAC3C,MAAM,CAAC,CAC9C;AACL;AACA,SAAS0sB,iBAAiBA,CAACtV,KAAK,EAAE5P,MAAM,EAAE1H,UAAU,EAAE;EAClD,MAAMO,CAAC,GAAGmH,MAAM,CAAClH,QAAQ,CAACD,CAAC,GAAG+W,KAAK,CAAC9W,QAAQ,CAACD,CAAC;EAC9C,MAAME,CAAC,GAAGiH,MAAM,CAAClH,QAAQ,CAACC,CAAC,GAAG6W,KAAK,CAAC9W,QAAQ,CAACC,CAAC;EAC9C,MAAMR,KAAK,GAAGqX,KAAK,CAACzU,QAAQ,CAAC5C,KAAK,IAAI,CAAC;EACvC,MAAMC,MAAM,GAAGoX,KAAK,CAACzU,QAAQ,CAAC3C,MAAM,IAAI,CAAC;EACzC,MAAM8rB,aAAa,GAAGhsB,UAAU,CAAC,CAAC,CAAC,GAAGC,KAAK;EAC3C,MAAMgsB,aAAa,GAAGjsB,UAAU,CAAC,CAAC,CAAC,GAAGE,MAAM;EAC5C,OAAO,CACH,CAACK,CAAC,GAAGyrB,aAAa,EAAEvrB,CAAC,GAAGwrB,aAAa,CAAC,EACtC,CAAC1rB,CAAC,GAAGN,KAAK,GAAG+rB,aAAa,EAAEvrB,CAAC,GAAGP,MAAM,GAAG+rB,aAAa,CAAC,CAC1D;AACL;AACA,SAASY,SAASA,CAAC;EAAE3U,OAAO;EAAE/S,MAAM;EAAEkW,aAAa;EAAEyR,QAAQ;EAAE9I;AAAM,CAAC,EAAE;EACpE,MAAMhC,SAAS,GAAGxnB,MAAM,CAAC0d,OAAO,CAAC;EACjC,SAASS,MAAMA,CAAC;IAAEkR,eAAe;IAAEiB,UAAU;IAAEC,eAAe;IAAEgC,aAAa;IAAEC,QAAQ;IAAEC,WAAW;IAAEC;EAAc,CAAC,EAAE;IACnH,IAAIC,UAAU,GAAG;MAAE,GAAGV;IAAe,CAAC;IACtC,IAAI9B,WAAW,GAAG;MAAE,GAAG+B;IAAgB,CAAC;IACxC,MAAM9B,gBAAgB,GAAGhB,mBAAmB,CAACC,eAAe,CAAC;IAC7D,IAAI3qB,IAAI,GAAG2B,SAAS;IACpB,IAAI8V,UAAU,GAAG,EAAE;IACnB,IAAIpR,UAAU,GAAG1E,SAAS,CAAC,CAAC;IAC5B,IAAIusB,YAAY,GAAGvsB,SAAS;IAC5B,IAAImqB,WAAW,GAAGnqB,SAAS;IAC3B,MAAMwsB,WAAW,GAAG9yB,IAAI,CAAC,CAAC,CACrBmjB,EAAE,CAAC,OAAO,EAAGlT,KAAK,IAAK;MACxB,MAAM;QAAE5J,UAAU;QAAE6J,SAAS;QAAElB,QAAQ;QAAEE,UAAU;QAAEzJ;MAAW,CAAC,GAAGqb,aAAa,CAAC,CAAC;MACnFnc,IAAI,GAAG0B,UAAU,CAACa,GAAG,CAAC0D,MAAM,CAAC;MAC7B,IAAI,CAACjG,IAAI,EAAE;QACP;MACJ;MACA,MAAM;QAAE0L,QAAQ;QAAEC;MAAS,CAAC,GAAGN,kBAAkB,CAACC,KAAK,CAAC+S,WAAW,EAAE;QAAE9S,SAAS;QAAElB,QAAQ;QAAEE;MAAW,CAAC,CAAC;MACzG0jB,UAAU,GAAG;QACTltB,KAAK,EAAEf,IAAI,CAAC2D,QAAQ,CAAC5C,KAAK,IAAI,CAAC;QAC/BC,MAAM,EAAEhB,IAAI,CAAC2D,QAAQ,CAAC3C,MAAM,IAAI,CAAC;QACjCK,CAAC,EAAErB,IAAI,CAACsB,QAAQ,CAACD,CAAC,IAAI,CAAC;QACvBE,CAAC,EAAEvB,IAAI,CAACsB,QAAQ,CAACC,CAAC,IAAI;MAC1B,CAAC;MACDkqB,WAAW,GAAG;QACV,GAAGwC,UAAU;QACbtB,QAAQ,EAAEjhB,QAAQ;QAClBmhB,QAAQ,EAAElhB,QAAQ;QAClB6gB,WAAW,EAAEyB,UAAU,CAACltB,KAAK,GAAGktB,UAAU,CAACjtB;MAC/C,CAAC;MACDqF,UAAU,GAAG1E,SAAS;MACtB,IAAI3B,IAAI,CAACsG,QAAQ,KAAKtG,IAAI,CAAC0G,MAAM,KAAK,QAAQ,IAAI1G,IAAI,CAAC2G,YAAY,CAAC,EAAE;QAClEN,UAAU,GAAG3E,UAAU,CAACa,GAAG,CAACvC,IAAI,CAACsG,QAAQ,CAAC;QAC1C4nB,YAAY,GAAG7nB,UAAU,IAAIrG,IAAI,CAAC0G,MAAM,KAAK,QAAQ,GAAG+mB,kBAAkB,CAACpnB,UAAU,CAAC,GAAG1E,SAAS;MACtG;MACA;MACA;MACA8V,UAAU,GAAG,EAAE;MACfqU,WAAW,GAAGnqB,SAAS;MACvB,KAAK,MAAM,CAACysB,OAAO,EAAEhW,KAAK,CAAC,IAAI1W,UAAU,EAAE;QACvC,IAAI0W,KAAK,CAAC9R,QAAQ,KAAKL,MAAM,EAAE;UAC3BwR,UAAU,CAACjY,IAAI,CAAC;YACZpD,EAAE,EAAEgyB,OAAO;YACX9sB,QAAQ,EAAE;cAAE,GAAG8W,KAAK,CAAC9W;YAAS,CAAC;YAC/BoF,MAAM,EAAE0R,KAAK,CAAC1R;UAClB,CAAC,CAAC;UACF,IAAI0R,KAAK,CAAC1R,MAAM,KAAK,QAAQ,IAAI0R,KAAK,CAACzR,YAAY,EAAE;YACjD,MAAMD,MAAM,GAAGgnB,iBAAiB,CAACtV,KAAK,EAAEpY,IAAI,EAAEoY,KAAK,CAAClX,MAAM,IAAIJ,UAAU,CAAC;YACzE,IAAIgrB,WAAW,EAAE;cACbA,WAAW,GAAG,CACV,CAAC3jB,IAAI,CAACF,GAAG,CAACvB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEolB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE3jB,IAAI,CAACF,GAAG,CAACvB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEolB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACtF,CAAC3jB,IAAI,CAACD,GAAG,CAACxB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEolB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE3jB,IAAI,CAACD,GAAG,CAACxB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEolB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACzF;YACL,CAAC,MACI;cACDA,WAAW,GAAGplB,MAAM;YACxB;UACJ;QACJ;MACJ;MACAmnB,aAAa,GAAGviB,KAAK,EAAE;QAAE,GAAG2iB;MAAW,CAAC,CAAC;IAC7C,CAAC,CAAC,CACGzP,EAAE,CAAC,MAAM,EAAGlT,KAAK,IAAK;MACvB,MAAM;QAAEC,SAAS;QAAElB,QAAQ;QAAEE,UAAU;QAAEzJ,UAAU,EAAEutB;MAAgB,CAAC,GAAGlS,aAAa,CAAC,CAAC;MACxF,MAAMwP,eAAe,GAAGtgB,kBAAkB,CAACC,KAAK,CAAC+S,WAAW,EAAE;QAAE9S,SAAS;QAAElB,QAAQ;QAAEE;MAAW,CAAC,CAAC;MAClG,MAAM+jB,YAAY,GAAG,EAAE;MACvB,IAAI,CAACtuB,IAAI,EAAE;QACP;MACJ;MACA,MAAM;QAAEqB,CAAC,EAAEktB,KAAK;QAAEhtB,CAAC,EAAEitB,KAAK;QAAEztB,KAAK,EAAEopB,SAAS;QAAEnpB,MAAM,EAAEopB;MAAW,CAAC,GAAG6D,UAAU;MAC/E,MAAMQ,MAAM,GAAG,CAAC,CAAC;MACjB,MAAM3tB,UAAU,GAAGd,IAAI,CAACkB,MAAM,IAAImtB,eAAe;MACjD,MAAM;QAAEttB,KAAK;QAAEC,MAAM;QAAEK,CAAC;QAAEE;MAAE,CAAC,GAAGiqB,wBAAwB,CAACC,WAAW,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,UAAU,EAAEC,eAAe,EAAE/qB,UAAU,EAAEotB,YAAY,EAAEpC,WAAW,CAAC;MAC5K,MAAM4C,aAAa,GAAG3tB,KAAK,KAAKopB,SAAS;MACzC,MAAMwE,cAAc,GAAG3tB,MAAM,KAAKopB,UAAU;MAC5C,MAAMwE,YAAY,GAAGvtB,CAAC,KAAKktB,KAAK,IAAIG,aAAa;MACjD,MAAMG,YAAY,GAAGttB,CAAC,KAAKitB,KAAK,IAAIG,cAAc;MAClD,IAAI,CAACC,YAAY,IAAI,CAACC,YAAY,IAAI,CAACH,aAAa,IAAI,CAACC,cAAc,EAAE;QACrE;MACJ;MACA,IAAIC,YAAY,IAAIC,YAAY,IAAI/tB,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QAC5E2tB,MAAM,CAACptB,CAAC,GAAGutB,YAAY,GAAGvtB,CAAC,GAAG4sB,UAAU,CAAC5sB,CAAC;QAC1CotB,MAAM,CAACltB,CAAC,GAAGstB,YAAY,GAAGttB,CAAC,GAAG0sB,UAAU,CAAC1sB,CAAC;QAC1C0sB,UAAU,CAAC5sB,CAAC,GAAGotB,MAAM,CAACptB,CAAC;QACvB4sB,UAAU,CAAC1sB,CAAC,GAAGktB,MAAM,CAACltB,CAAC;QACvB;QACA;QACA,IAAIkW,UAAU,CAAChY,MAAM,GAAG,CAAC,EAAE;UACvB,MAAM8Y,OAAO,GAAGlX,CAAC,GAAGktB,KAAK;UACzB,MAAM/V,OAAO,GAAGjX,CAAC,GAAGitB,KAAK;UACzB,KAAK,MAAM5W,SAAS,IAAIH,UAAU,EAAE;YAChCG,SAAS,CAACtW,QAAQ,GAAG;cACjBD,CAAC,EAAEuW,SAAS,CAACtW,QAAQ,CAACD,CAAC,GAAGkX,OAAO,GAAGzX,UAAU,CAAC,CAAC,CAAC,IAAIC,KAAK,GAAGopB,SAAS,CAAC;cACvE5oB,CAAC,EAAEqW,SAAS,CAACtW,QAAQ,CAACC,CAAC,GAAGiX,OAAO,GAAG1X,UAAU,CAAC,CAAC,CAAC,IAAIE,MAAM,GAAGopB,UAAU;YAC5E,CAAC;YACDkE,YAAY,CAAC9uB,IAAI,CAACoY,SAAS,CAAC;UAChC;QACJ;MACJ;MACA,IAAI8W,aAAa,IAAIC,cAAc,EAAE;QACjCF,MAAM,CAAC1tB,KAAK,GAAG2tB,aAAa,GAAG3tB,KAAK,GAAGktB,UAAU,CAACltB,KAAK;QACvD0tB,MAAM,CAACztB,MAAM,GAAG2tB,cAAc,GAAG3tB,MAAM,GAAGitB,UAAU,CAACjtB,MAAM;QAC3DitB,UAAU,CAACltB,KAAK,GAAG0tB,MAAM,CAAC1tB,KAAK;QAC/BktB,UAAU,CAACjtB,MAAM,GAAGytB,MAAM,CAACztB,MAAM;MACrC;MACA;MACA,IAAIqF,UAAU,IAAIrG,IAAI,CAAC2G,YAAY,EAAE;QACjC,MAAMmoB,MAAM,GAAGhuB,UAAU,CAAC,CAAC,CAAC,IAAI2tB,MAAM,CAAC1tB,KAAK,IAAI,CAAC,CAAC;QAClD,IAAI0tB,MAAM,CAACptB,CAAC,IAAIotB,MAAM,CAACptB,CAAC,GAAGytB,MAAM,EAAE;UAC/Bb,UAAU,CAAC5sB,CAAC,GAAGytB,MAAM;UACrBrD,WAAW,CAACpqB,CAAC,GAAGoqB,WAAW,CAACpqB,CAAC,IAAIotB,MAAM,CAACptB,CAAC,GAAGytB,MAAM,CAAC;QACvD;QACA,MAAMC,MAAM,GAAGjuB,UAAU,CAAC,CAAC,CAAC,IAAI2tB,MAAM,CAACztB,MAAM,IAAI,CAAC,CAAC;QACnD,IAAIytB,MAAM,CAACltB,CAAC,IAAIktB,MAAM,CAACltB,CAAC,GAAGwtB,MAAM,EAAE;UAC/Bd,UAAU,CAAC1sB,CAAC,GAAGwtB,MAAM;UACrBtD,WAAW,CAAClqB,CAAC,GAAGkqB,WAAW,CAAClqB,CAAC,IAAIktB,MAAM,CAACltB,CAAC,GAAGwtB,MAAM,CAAC;QACvD;MACJ;MACA,MAAMtE,SAAS,GAAGP,kBAAkB,CAAC;QACjCnpB,KAAK,EAAEktB,UAAU,CAACltB,KAAK;QACvBopB,SAAS;QACTnpB,MAAM,EAAEitB,UAAU,CAACjtB,MAAM;QACzBopB,UAAU;QACVC,QAAQ,EAAEqB,gBAAgB,CAACrB,QAAQ;QACnCC,QAAQ,EAAEoB,gBAAgB,CAACpB;MAC/B,CAAC,CAAC;MACF,MAAM0E,UAAU,GAAG;QAAE,GAAGf,UAAU;QAAExD;MAAU,CAAC;MAC/C,MAAMwE,UAAU,GAAGjB,YAAY,GAAG1iB,KAAK,EAAE0jB,UAAU,CAAC;MACpD,IAAIC,UAAU,KAAK,KAAK,EAAE;QACtB;MACJ;MACAnB,QAAQ,GAAGxiB,KAAK,EAAE0jB,UAAU,CAAC;MAC7BpB,QAAQ,CAACa,MAAM,EAAEH,YAAY,CAAC;IAClC,CAAC,CAAC,CACG9P,EAAE,CAAC,KAAK,EAAGlT,KAAK,IAAK;MACtByiB,WAAW,GAAGziB,KAAK,EAAE;QAAE,GAAG2iB;MAAW,CAAC,CAAC;MACvCnJ,KAAK,GAAG,CAAC;IACb,CAAC,CAAC;IACFhC,SAAS,CAAC9D,IAAI,CAACmP,WAAW,CAAC;EAC/B;EACA,SAASlP,OAAOA,CAAA,EAAG;IACf6D,SAAS,CAACtE,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC;EAC/B;EACA,OAAO;IACH/E,MAAM;IACNwF;EACJ,CAAC;AACL;AAEA,SAAS7gB,kBAAkB,EAAEd,cAAc,EAAEe,UAAU,EAAEd,eAAe,EAAEe,QAAQ,EAAEyrB,oBAAoB,EAAEvsB,aAAa,EAAEye,MAAM,EAAE0G,QAAQ,EAAEC,SAAS,EAAE2F,SAAS,EAAEoF,SAAS,EAAE3D,2BAA2B,EAAEC,yBAAyB,EAAE1Z,OAAO,EAAE0G,cAAc,EAAErY,sBAAsB,EAAEkE,SAAS,EAAE8F,WAAW,EAAE5C,qBAAqB,EAAE+B,KAAK,EAAEhB,aAAa,EAAEsB,qBAAqB,EAAE6M,eAAe,EAAEhL,OAAO,EAAE7M,oBAAoB,EAAE1B,aAAa,EAAEwP,wBAAwB,EAAE/F,OAAO,EAAEyI,mBAAmB,EAAEkB,aAAa,EAAEnM,gBAAgB,EAAEyG,gBAAgB,EAAE3E,iBAAiB,EAAEhF,mBAAmB,EAAEkM,aAAa,EAAEwD,aAAa,EAAE6E,eAAe,EAAEjN,mBAAmB,EAAEuI,qBAAqB,EAAE/D,gBAAgB,EAAE5G,eAAe,EAAEwI,eAAe,EAAEoH,iBAAiB,EAAEzI,iBAAiB,EAAEpL,WAAW,EAAEoC,sBAAsB,EAAE6R,WAAW,EAAE3T,iBAAiB,EAAEJ,yBAAyB,EAAEgV,uBAAuB,EAAErU,cAAc,EAAEwB,cAAc,EAAEjD,WAAW,EAAEkE,kBAAkB,EAAEoH,kBAAkB,EAAEoI,iBAAiB,EAAExC,eAAe,EAAErL,oBAAoB,EAAEzG,sBAAsB,EAAE6Y,kBAAkB,EAAE/a,cAAc,EAAEQ,iBAAiB,EAAEqJ,kBAAkB,EAAEnH,UAAU,EAAEqQ,aAAa,EAAE5D,cAAc,EAAEtM,kBAAkB,EAAEgL,OAAO,EAAE6B,YAAY,EAAE9M,UAAU,EAAEkK,SAAS,EAAEF,YAAY,EAAEqB,iBAAiB,EAAEzI,SAAS,EAAEyB,UAAU,EAAE3F,gBAAgB,EAAEub,KAAK,EAAEtW,oBAAoB,EAAEkN,aAAa,EAAEtH,SAAS,EAAEoB,oBAAoB,EAAEqQ,eAAe,EAAEzQ,YAAY,EAAEuM,uBAAuB,EAAE0D,sBAAsB,EAAEvB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}